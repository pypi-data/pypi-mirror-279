[build-system]
requires = ["setuptools>=68.2", "setuptools-rust", "setuptools_scm[toml]>=8.0", "wheel>=0.41"]
build-backend = "setuptools.build_meta"

[project]
name = "artistools"
authors = [
    {name = "Luke J. Shingles", email = "luke.shingles@gmail.com"},
    {name = "Christine E. Collins", email = "c.collins@gsi.de"},
    {name = "Alexander Holas", email = "alexander.holas@h-its.org"},
    {name = "Fionntan Callan", email = "fcallan02@qub.ac.uk"},
    {name = "Stuart Sim", email = "s.sim@qub.ac.uk"},
]
description="Plotting and analysis tools for the ARTIS 3D radiative transfer code for supernovae and kilonovae."
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Framework :: Matplotlib",
    "Intended Audience :: Science/Research",
]
dynamic = ["version", "dependencies"]
requires-python = ">=3.10"
license = {text = "MIT"}
readme = {file = "README.md", content-type='text/markdown'}

[project.urls]
Repository ="https://www.github.com/artis-mcrt/artistools"

[project.scripts]
at = 'artistools.__main__:main'
artistools = 'artistools.__main__:main'
makeartismodel1dslicefromcone = 'artistools.inputmodel.slice1dfromconein3dmodel:main'
makeartismodel = 'artistools.inputmodel.makeartismodel:main'
plotartisdensity = 'artistools.inputmodel.plotdensity:main'
plotartisdeposition = 'artistools.deposition:main'
plotartisestimators = 'artistools.estimators.plotestimators:main'
plotartislightcurve = 'artistools.lightcurve.plotlightcurve:main'
plotartislinefluxes = 'artistools.linefluxes:main'
plotartismacroatom = 'artistools.macroatom:main'
plotartisnltepops = 'artistools.nltepops.plotnltepops:main'
plotartisnonthermal = 'artistools.nonthermal:main'
plotartisradfield = 'artistools.radfield:main'
plotartisspectrum = 'artistools.spectra.plotspectra:main'
plotartistransitions = 'artistools.transitions:main'
plotartisinitialcomposition = 'artistools.inputmodel.plotinitialcomposition:main'
plotartisviewingangles = 'artistools.viewing_angles_visualization:main'

[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312", "py313"]

[tool.cibuildwheel]
skip = ["*-win32", "*i686"]

[tool.mypy]
check_untyped_defs = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_any_unimported = false
disallow_incomplete_defs = false
disallow_subclassing_any = true
disallow_untyped_calls = false
disallow_untyped_decorators = true
disallow_untyped_defs = false
error_summary = true
enable_error_code = [
  "comparison-overlap",
  "ignore-without-code",
  "redundant-expr",
  "redundant-self",
  "truthy-bool",
  "unused-awaitable",
]
exclude = "(build)|(dist)|(tests)|(data)"
extra_checks = true
ignore_missing_imports = true
implicit_optional = false
implicit_reexport = false
local_partial_types = true
packages = "artistools"
plugins = 'numpy.typing.mypy_plugin'
pretty = true
python_version = '3.12'
scripts_are_modules = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = false
warn_unused_configs = true
warn_unused_ignores = true
warn_return_any = true

# strict mode
[[tool.mypy.overrides]]
module = [
    "artistools",
    "artistools.estimators",
    "artistools.commands",
    "artistools.inputmodel",
    "artistools.lightcurve",
    "artistools.misc",
    "artistools.packets",
    "artistools.plotspherical",
    "artistools.spectra",
    "*.__init__",
    "*.__main__",
]
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "pyvista"
ignore_errors = true

[tool.pylint.'MESSAGES CONTROL']
max-line-length = 120
disable = """
    broad-exception-caught,
    fixme,
    missing-function-docstring,
    missing-module-docstring,
    import-outside-toplevel,
    invalid-name,
    line-too-long,
    no-member,
    not-an-iterable,
    not-context-manager,
    possibly-used-before-assignment,
    protected-access,
    redefined-outer-name,
    too-many-arguments,
    too-many-branches,
    too-many-function-args,
    too-many-lines,
    too-many-locals,
    too-many-nested-blocks,
    too-many-statements,
    unbalanced-tuple-unpacking,
    unused-argument,
    unused-import,
    unused-variable,
    unspecified-encoding,
    unsupported-assignment-operation,
    C,
    R,
"""

[tool.pylint.typecheck]
ignored-modules = ["astropy", "extinction", "artistools.rustext"]
unsafe-load-any-extension = true

[tool.pyright]
analyzeUnannotatedFunctions = false
exclude=['**/node_modules','**/__pycache__','**/.*', 'build', 'dist']
reportAttributeAccessIssue = false
reportCallIssue = false
reportMissingImports = false
reportOptionalMemberAccess = false
reportPossiblyUnboundVariable = false
reportPrivateImportUsage = false
reportUnknownVariableType = false
typeCheckingMode = "basic"
useLibraryCodeForTypes = false

[tool.pytest.ini_options]
addopts = " --durations=0 --durations-min=1.0 --typeguard-packages=artistools -n auto"

[tool.refurb]
ignore = ["FURB120"]
quiet = false
enable_all = true
python_version = "3.10"
sort_by = "error"

[[tool.refurb.amend]]
path = "./artistools/inputmodel/fromcmfgen/rd_cmfgen.py"
ignore = ["FURB108"]

[tool.ruff]
line-length = 120
target-version = "py310"
fix = true
show-fixes = true
extend-exclude = ["_version.py"]
preview = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ARG001", # ignored because variables in df.eval() are not detected
    "ANN",
    "B005",  # strip-with-multi-characters
    "C901",  # complex-structure
    "COM812",  # missing-trailing-comma
    "CPY001", # missing-copyright-notice
    "D100",  # undocumented-public-module
    "D102",  # undocumented-public-method
    "D103",  # undocumented-public-function
    "D104",  # undocumented-public-package
    "D107",  # undocumented-public-init
    "D203",  # one-blank-line-before-class
    "D213",  # multi-line-summary-second-line
    "D417",  # undocumented-param
    "E501", # Line too long
    "ERA001",  # commented-out-code
    "FBT",
    "FIX002",  # line contains TODO
    "ISC001", # single-line-implicit-string-concatenation
    "N802",  # Function name should be lowercase
    "N803",  # Argument name should be lowercase
    "N806",  # non-lowercase-variable-in-function
    "PERF203", # try-except-in-loop
    "PGH004", # blanket-noqa
    "PLC0414", # useless-import-alias
    "PLC0415", # import-outside-toplevel
    "PLR0914", # too-many-locals
    "PLR0917", # too-many-positional
    "PLR1702", # too-many-nested-blocks
    "PLR0911",  # too-many-return-statements
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-arguments
    "PLR0915",  # too-many-statements
    "PLR2004",  # magic-value-comparison
    "PLW2901",  # redefined-loop-name
    "PYI024", # Use `typing.NamedTuple` instead of `collections.namedtuple`
    "S101",  # Use of assert detected
    "S311",  # suspicious-non-cryptographic-random-usage
    "S404",  # suspicious-subprocess-import
    "S603",  # subprocess-without-shell-equals-true
    "S607",  # start-process-with-partial-path
    "T201",  # print found
    "TD002",  # missing-todo-author
    "TD003",  # missing-todo-link
]
fixable = ["ALL"]
unfixable = [
    "ERA001",  # commented-out-code (will just delete it!)
    "F401", # unused-import (can be annoying to have improt disappear while editing)
    "F841",  # unused-variable
    "SIM222", # expr-or-true
    "SIM223", # expr-and-false
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"artistools" = "at"
"matplotlib" = "mpl"
"matplotlib.pyplot" = "plt"
"matplotlib.typing" = "mplt"
"numpy.typing" = "npt"
"typing" = "t"
"polars" = "pl"
"polars.selectors" = "cs"
"polars.testing" = "pltest"
"pynonthermal" = "pynt"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
order-by-type = false

[tool.setuptools]
include-package-data = true
license-files = ["LICENSE.txt"]

[[tool.setuptools-rust.ext-modules]]
target = "artistools.rustext"  # The last part of the name has to match lib.name in Cargo.toml,
                             # but you can add a prefix to nest it inside of a Python package.
path = "rust/Cargo.toml"
binding = "PyO3"
debug = false
optional = false

[tool.setuptools.packages.find]
namespaces = false
where = ["."]
include = ["*", "**/matplotlibrc", "**/data"]
exclude = ["tests", "**/dist", "**/lib", "**/build", "*.egg-info", "**/.*"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[tool.setuptools_scm]
version_file = "_version.py"
local_scheme = "no-local-version"

[tool.vulture]
exclude = [".*", "build/", ".eggs/"]
#ignore_names = ["visit_*", "do_*"]
paths = ["artistools"]
sort_by_size = true
