# This pyproject.toml is setup so it can be used with or without poetry and also
# supports editable installs (PEP 660) without breaking IDE and linter inspection.

# DEVELOPER INSTALL INSTRUCTIONS (assuming current directory is at the top of the project) :
# Poetry:
#   poetry install --extras dev
# PIP:
#   pip install -e .[dev]

# everything in the boilerplate *SHOULD* match between the ScreenPyHQ packages.
################################################################################
#                START OF BOILERPLATE CONFIGURATIONS                #
################################################################################


[build-system]
requires = ["poetry-core>=1.6.1"]
build-backend = "poetry.core.masonry.api"


[tool.black]
target-version = ['py312']
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
    \.idea
    | \.git
    | \.mypy_cache
    | \.tox
    | \/docs
    | ^/setup.py
)

'''


[tool.ruff]
target-version = "py310"  # minimum supported version
line-length = 88  # same as Black.
extend-exclude = [
    "docs",
]

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff specific
    "SIM",  # flake8-simplify
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TRY",  # tryceratops
    "UP",  # python upgrade
    "W",  # pycodestyle warning
    "YTT",  # flake8-2020

    # we would like these someday, but not yet
    # "FURB",  # refurb
]
ignore = [
    "ANN101",  # missing self annotation, we only annotate self when we return it.
    "ANN102",  # missing cls annotation, we only annotate cls when we return it.

    # NOT OPTIONAL. MUST REMAIN AS SET
    # these are all completely unnecessary 
    "D101", # Missing docstring in public class
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__`
    "D202", # no blank lines after docstring
    "D203", # one-blank-line-before-class
    "D204", # blank line required after docstring
    "D205", # blank line between summary and description
    "D212", # Multi-line summary should start at the first line
    "D400", # First line should end with a period
    "D401", # imperative mood
    "D404", # First word of the docstring should not be "This"
    "D405", # Section name should be properly capitalized
    "D406", # Section name should end with a newline 
    "D407", # Missing dashed underline after section
    "D411", # Missing blank line before section
    "D412", # No blank lines allowed between a section header and its content 
    "D415", # First line should end with punctuation

    "PLC0414", # useless-import-alias
    "PLR0911", # too-many-return-statements
    "PLR0912", # too-many-branches
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
]

extend-safe-fixes = [
    "EM101", "EM102",
    "TCH001", "TCH002", "TCH003", "TCH004",
    "C419",
    "D200", "D205", "D415",
    "PT003", "PT006", "PT018",
    "RET504",
    "UP006", "UP007",
    "W291",
]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D",  # we don't need public-API-polished docstrings in tests.
    "FBT",  # using a boolean as a test object is useful!
    "PLR",  # likewise using specific numbers and strings in tests.
]
"__version__.py" = ["D"]


################################################################################
#                 END OF BOILERPLATE ScreenPyHQ CONFIGURATIONS                 #
################################################################################

[tool.poetry]
name = "readabledelta2"
version = "0.0.1"
description = ""
authors = ["Marcel Wilson <trenchrats@gmail.com>"]
maintainers = []
license = "MIT"
repository = "https://github.com/bandophahita/readabledelta2"
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: BDD",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
]

# It's possible to add optional dependencies with the poetry CLI tool using:
#   poetry add --optional some_dev_pkg
# This will set `optional = true` flag in [tool.poetry.dependencies], as seen below
# But then you need to remember to manually edit the [tool.poetry.extras] dev section
# and declare the package. This allows `pip install .[dev]` to work as expected
# Poetry users will need to use the `--extras dev` option rather than the `--with dev`
# so we dont have two different sets of package versions to update.

[tool.poetry.dependencies]
python = "^3.10"
python-dateutil = "*"


# convenience packages for development
black = {version = "*", optional = true}
coverage = {version = "*", optional = true}
mypy = {version = "*", optional = true}
pytest = {version = "*", optional = true}
pytest-mock = {version = "*", optional = true}
ruff = {version = ">=0.2.0", optional = true}
tox = {version = "*", optional = true}
types-python-dateutil = {version = "*", optional = true}

[tool.poetry.extras]
dev = [
    "black",
    "coverage",
    "mypy",
    "pytest",
    "pytest-mock",
    "ruff",
    "tox",
    "types-python-dateutil"
]
test = [
    "coverage",
    "pytest",
    "pytest-mock",
]

