[build-system]
requires = ["setuptools>=68.2.2", "setuptools-scm", "wheel", "toml"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
version_scheme = "guess-next-dev"
local_scheme = "dirty-tag"

[project]
name = "msort"
description = "Automatic ordering of Python class components."
authors = [
	{ name = "Isaac Kitchen-Smith", email = "isaacks123@gmail.com" },
]
readme = "README.md"
classifiers = [
	"Operating System :: OS Independent",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3",
    "Intended Audience :: Developers",
    "Typing :: Typed"

]
keywords = ["msort"]
requires-python = ">=3.9"
dynamic = ["version"]

dependencies = ["ast-comments==1.2.2", "astor==0.8.1", "libcst==1.3.1", "toml==0.10.2"]

[project.scripts]
msort = "msort.main:main"

[project.optional-dependencies]
dev = [
	"black==24.3.0",
	"coverage==6.5.0",
	"mypy==1.9.0",
	"pre-commit==3.7.0",
	"pytest==8.1.2",
	"pytest-cov==5.0.0",
	"tox==4.15.0",
	"validate-pyproject[all]",
]

[tool.pytest.ini_options]
pythonpath = "./src"
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
testpaths = ["tests"]
##env = ["PYTHONHASHSEED=0"]

[tool.mypy]
mypy_path = "src"
files = "src/msort"
ignore_missing_imports = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
install_types = true
non_interactive = true

explicit_package_bases = true
disallow_untyped_calls = false
disallow_untyped_defs = true
check_untyped_defs = true
warn_return_any = false
no_implicit_optional = true
strict_optional = true
exclude = ['tests/', 'build/', 'docs/']

[tool.isort]
profile = "black"
py_version = "auto"
line_length = 120

[tool.black]
line-length = 120

[tool.msort.order]
dunder_method = 3
msort_group = 4
class_method = 5
private_method = 13

[tool.msort]
use_msort_group = true
auto_static = false

[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.15
    env_list =
        py311
        py310
        py39
        type

	[testenv:py39]
	basepython = python3.9
	deps =
		py39: -r requirements.txt
	commands =
		pytest tests

	[testenv:py310]
	basepython = python3.10
	deps =
		py310: -r requirements.txt
	commands =
		pytest tests

	[testenv:py311]
	basepython = python3.11
	deps =
		py311: -r requirements.txt
	commands =
		pytest tests

	[testenv:py312]
	basepython = python3.12
	deps =
		py312: -r requirements.txt
	commands = pytest tests

	[testenv:type]
    deps =
    	mypy
    	types-toml
    commands = mypy src

    [testenv:lint]
	description = Perform static analysis and style checks
	skip_install = True
	deps = pylint
	commands =
		pylint ./src/msort --rcfile=.pylintrc

	[testenv:{clean}]
	description =
		clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
	skip_install = True
	changedir = {toxinidir}
	commands =
		clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
		clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'

	[testenv:{build}]
	description =
		build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
	skip_install = True
	changedir = {toxinidir}
	deps =
		build: build[virtualenv]
	passenv =
		SETUPTOOLS_*
	commands =
		build: python -m build

	[testenv:publish]
	description =
		Publish the package you have been developing to a package index server.
		By default, it uses testpypi. If you really want to publish your package
		to be publicly accessible in PyPI, use the `-- --repository pypi` option.
	skip_install = True
	changedir = {toxinidir}
	passenv =
		TWINE_USERNAME
		TWINE_PASSWORD
		TWINE_REPOSITORY
		TWINE_REPOSITORY_URL
	deps = twine
	commands =
		python -m twine check dist/*
		python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
"""

[tool.setuptools]
packages = { find = { where = ["src"], exclude = ["tests"] } }
