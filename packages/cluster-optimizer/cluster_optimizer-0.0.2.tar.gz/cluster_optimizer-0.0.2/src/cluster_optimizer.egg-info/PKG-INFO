Metadata-Version: 2.1
Name: cluster_optimizer
Version: 0.0.2
Summary: A GridSearchCV like object for clustering in sklearn
Author-email: "A. Karwath" <cluster_opimizer@karwath.org>
License: MIT License
        
        Copyright (c) 2024 Andreas Karwath
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/athro/ClusterOptimizer
Keywords: sklearn,cluster,gridsearch
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: scikit-learn
Requires-Dist: pandas

# Cluster Optimizer

This is a simple object simulating the [GridSearchCV](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html) object from [scikit-learn (sklearn)](https://scikit-learn.org), but only for clustering. Instead of estimating predictive performance measures using a test fold, it simply calculates unsupervised scores such as the [silhouette_score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score) or [davies_bouldin_score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.davies_bouldin_score.html#sklearn.metrics.davies_bouldin_score). 

The object is instantiated with an sklearn cluster algorithm, e.g. [KMeans](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html#sklearn.cluster.KMeans), [HDBScan](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.HDBSCAN.html#sklearn.cluster.HDBSCAN), or similar from from [sklearn.cluster](https://scikit-learn.org/stable/api/sklearn.cluster.html) and a set of parameter options. Different scoring approaches can be supplied as a list of the scoring functions (silhouette_score, davies_bouldin_score, calinski_harabasz_score  from [sklearn.metrics](https://scikit-learn.org/stable/api/sklearn.metrics.html) ). 

Using the ClusterOptimizer.optimize() method will perform a grid search through the supplied parameter space. The scores for all supplied scoring functions are stored for all parameters. 

The results can be obtained by ClusterOptimizer.results, which should return a [pandas](https://pandas.pydata.org/pandas-docs/stable/index.html) [DataFrame](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#dataframe). 

For one or two parameters, the result DataFrame can be used together with [seaborn](https://seaborn.pydata.org) for visualisation. 





