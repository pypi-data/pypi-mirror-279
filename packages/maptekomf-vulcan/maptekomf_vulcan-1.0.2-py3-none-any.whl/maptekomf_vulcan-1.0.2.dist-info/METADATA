Metadata-Version: 2.1
Name: maptekomf-vulcan
Version: 1.0.2
Summary: Provides interoperability between Vulcan and OMF.
Author-email: Maptek <support@maptek.com.au>
License: Maptek End User Licence Agreement
Project-URL: Homepage, https://www.maptek.com
Project-URL: Documentation, https://help.maptek.com/mapteksdk/
Project-URL: Support, https://www.maptek.com/support/index.html
Keywords: mining,data,interchange
Classifier: Development Status :: 4 - Beta
Classifier: Operating System :: Microsoft :: Windows
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Natural Language :: English
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Visualization
Requires-Python: <3.12,>=3.7
Description-Content-Type: text/markdown
Requires-Dist: omf (==1.0.1)

# maptekomf.vulcan
Provides support for inter-operability with the OMF format and Maptek Vulcan.

The sister package maptekomf.maptek provides support for inter-operability with
the Open Mining Format (OMF) and Maptek applications built on a shared
underlying infrastructure (which Maptek Vulcan is not built on).

## Supported application versions
* Maptek Vulcan 2021.4 and later

Older versions such as Maptek Vulcan 2020 and 2021.x may work but they have
not been tested.

## Implementation defined behaviour
This OMF importer/exporter implementation has the following behaviour that
may be different to how other implementations, scripts and applications handle
a given OMF project file. This is done in places where the OMF specification
does not specify how such cases should be handled, especially in cases
where data can't be represented natively in the data format.

### Naming
The names of objects in an OMF project are not required to be unique.
The names of objects in a given folder in a Vulcan project need be
unique as they are often stored on the file system.

As a result during import if a duplicate name is detected a numerical suffix
will be added.

### Point colouring
Maptek Vulcan's point and line sets have the concept of a per-point colour.

If the colours are not all the same when exporting, then they will be written
as an attribute of type `omf.ColorData` on the object called "point colours".

When importing, the "point colours" attribute will be recognised and read in
as a colour array. Vulcan does not support an arbitrary number of colour
array attributes, it only allows one set of colours for the points.

### Cell visibility
Vulcan's grids have the concept of visibility (or a grid mask), as a way to
hide cells that are not relevant. For example, they may fall outside the data
range (i.e. the area that was measured/recorded). This is achieved by saving it
as an attribute for vertices called "visibility" in OMF and recognising the
attribute in the importer.

## Limitations

* Per-facet attributes are not supported in Vulcan's data types.
* Per-vertex attributes are not supported in Vulcan's data types.
* Grids in Vulcan do not support texturing. This means textures for gridded
  surfaces in an OMF file won't be imported.

## Future work
* Import and export for block models.
  Support may be added on request; however the plan is to wait until this
  package is updated to use omf-2.0.
* Upgrade omf package from 1.0 to 2.0.
* Support importing/exporting textured surfaces.
* Support SCD (Colour map/legend) files and colour maps in general.

## Distribution
This project is typically distributed as a Python wheel through PyPi.
However, other mechanisms exist.
