

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("breez_liquid_sdk_bindings")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_breez_liquid_sdk_bindings_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_func_connect() != 18922:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_func_default_config() != 13178:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_func_parse_invoice() != 13238:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_func_set_logger() != 34021:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_add_event_listener() != 21118:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_backup() != 56517:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_disconnect() != 31676:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_get_info() != 38166:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_list_payments() != 34268:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_prepare_receive_payment() != 57331:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_prepare_send_payment() != 35897:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_receive_payment() != 8257:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_remove_event_listener() != 11780:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_restore() != 42575:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_send_payment() != 37911:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_sync() != 9045:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_eventlistener_on_event() != 59532:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_breez_liquid_sdk_bindings_checksum_method_logger_log() != 3894:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU8,
)
class UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI8,
)
class UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU16,
)
class UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI16,
)
class UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU32,
)
class UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI32,
)
class UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU64,
)
class UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI64,
)
class UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF32,
)
class UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF64,
)
class UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructPointer,
)
class UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructRustBuffer,
)
class UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructVoid,
)
UNIFFI_CALLBACK_INTERFACE_EVENT_LISTENER_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_LOGGER_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
class UniffiVTableCallbackInterfaceEventListener(ctypes.Structure):
    _fields_ = [
        ("on_event", UNIFFI_CALLBACK_INTERFACE_EVENT_LISTENER_METHOD0),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class UniffiVTableCallbackInterfaceLogger(ctypes.Structure):
    _fields_ = [
        ("log", UNIFFI_CALLBACK_INTERFACE_LOGGER_METHOD0),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_clone_bindingliquidsdk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_clone_bindingliquidsdk.restype = ctypes.c_void_p
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_free_bindingliquidsdk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_free_bindingliquidsdk.restype = None
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_add_event_listener.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_add_event_listener.restype = _UniffiRustBuffer
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_backup.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_backup.restype = None
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_disconnect.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_disconnect.restype = None
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_get_info.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_get_info.restype = _UniffiRustBuffer
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_list_payments.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_list_payments.restype = _UniffiRustBuffer
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_prepare_receive_payment.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_prepare_receive_payment.restype = _UniffiRustBuffer
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_prepare_send_payment.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_prepare_send_payment.restype = _UniffiRustBuffer
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_receive_payment.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_receive_payment.restype = _UniffiRustBuffer
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_remove_event_listener.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_remove_event_listener.restype = None
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_restore.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_restore.restype = None
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_send_payment.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_send_payment.restype = _UniffiRustBuffer
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_sync.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_sync.restype = None
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_init_callback_vtable_eventlistener.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceEventListener),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_init_callback_vtable_eventlistener.restype = None
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_init_callback_vtable_logger.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceLogger),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_init_callback_vtable_logger.restype = None
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_connect.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_connect.restype = ctypes.c_void_p
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_default_config.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_default_config.restype = _UniffiRustBuffer
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_parse_invoice.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_parse_invoice.restype = _UniffiRustBuffer
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_set_logger.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_set_logger.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_free.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_u8.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_u8.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_i8.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_i8.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_u16.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_u16.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_i16.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_i16.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_u32.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_u32.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_i32.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_i32.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_u64.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_u64.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_i64.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_i64.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_f32.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_f32.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_f64.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_f64.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_pointer.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_poll_void.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_cancel_void.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_free_void.restype = None
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_rust_future_complete_void.restype = None
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_func_connect.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_func_connect.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_func_default_config.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_func_default_config.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_func_parse_invoice.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_func_parse_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_func_set_logger.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_func_set_logger.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_add_event_listener.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_add_event_listener.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_backup.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_backup.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_disconnect.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_disconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_get_info.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_get_info.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_list_payments.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_list_payments.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_prepare_receive_payment.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_prepare_receive_payment.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_prepare_send_payment.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_prepare_send_payment.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_receive_payment.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_receive_payment.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_remove_event_listener.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_remove_event_listener.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_restore.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_restore.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_send_payment.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_send_payment.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_sync.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_sync.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_eventlistener_on_event.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_eventlistener_on_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_logger_log.argtypes = (
)
_UniffiLib.uniffi_breez_liquid_sdk_bindings_checksum_method_logger_log.restype = ctypes.c_uint16
_UniffiLib.ffi_breez_liquid_sdk_bindings_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_breez_liquid_sdk_bindings_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write(value, buf):
        buf.write_u8(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterFloat(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_float()

    @staticmethod
    def write(value, buf):
        buf.write_float(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class BindingLiquidSdkProtocol(typing.Protocol):
    def add_event_listener(self, listener: "EventListener"):
        raise NotImplementedError
    def backup(self, req: "BackupRequest"):
        raise NotImplementedError
    def disconnect(self, ):
        raise NotImplementedError
    def get_info(self, ):
        raise NotImplementedError
    def list_payments(self, ):
        raise NotImplementedError
    def prepare_receive_payment(self, req: "PrepareReceiveRequest"):
        raise NotImplementedError
    def prepare_send_payment(self, req: "PrepareSendRequest"):
        raise NotImplementedError
    def receive_payment(self, req: "PrepareReceiveResponse"):
        raise NotImplementedError
    def remove_event_listener(self, id: "str"):
        raise NotImplementedError
    def restore(self, req: "RestoreRequest"):
        raise NotImplementedError
    def send_payment(self, req: "PrepareSendResponse"):
        raise NotImplementedError
    def sync(self, ):
        raise NotImplementedError


class BindingLiquidSdk:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_free_bindingliquidsdk, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_clone_bindingliquidsdk, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add_event_listener(self, listener: "EventListener") -> "str":
        _UniffiConverterCallbackInterfaceEventListener.check_lower(listener)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeLiquidSdkError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_add_event_listener,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceEventListener.lower(listener))
        )





    def backup(self, req: "BackupRequest") -> None:
        _UniffiConverterTypeBackupRequest.check_lower(req)
        
        _rust_call_with_error(_UniffiConverterTypeLiquidSdkError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_backup,self._uniffi_clone_pointer(),
        _UniffiConverterTypeBackupRequest.lower(req))






    def disconnect(self, ) -> None:
        _rust_call_with_error(_UniffiConverterTypeLiquidSdkError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_disconnect,self._uniffi_clone_pointer(),)






    def get_info(self, ) -> "GetInfoResponse":
        return _UniffiConverterTypeGetInfoResponse.lift(
            _rust_call_with_error(_UniffiConverterTypeLiquidSdkError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_get_info,self._uniffi_clone_pointer(),)
        )





    def list_payments(self, ) -> "typing.List[Payment]":
        return _UniffiConverterSequenceTypePayment.lift(
            _rust_call_with_error(_UniffiConverterTypePaymentError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_list_payments,self._uniffi_clone_pointer(),)
        )





    def prepare_receive_payment(self, req: "PrepareReceiveRequest") -> "PrepareReceiveResponse":
        _UniffiConverterTypePrepareReceiveRequest.check_lower(req)
        
        return _UniffiConverterTypePrepareReceiveResponse.lift(
            _rust_call_with_error(_UniffiConverterTypePaymentError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_prepare_receive_payment,self._uniffi_clone_pointer(),
        _UniffiConverterTypePrepareReceiveRequest.lower(req))
        )





    def prepare_send_payment(self, req: "PrepareSendRequest") -> "PrepareSendResponse":
        _UniffiConverterTypePrepareSendRequest.check_lower(req)
        
        return _UniffiConverterTypePrepareSendResponse.lift(
            _rust_call_with_error(_UniffiConverterTypePaymentError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_prepare_send_payment,self._uniffi_clone_pointer(),
        _UniffiConverterTypePrepareSendRequest.lower(req))
        )





    def receive_payment(self, req: "PrepareReceiveResponse") -> "ReceivePaymentResponse":
        _UniffiConverterTypePrepareReceiveResponse.check_lower(req)
        
        return _UniffiConverterTypeReceivePaymentResponse.lift(
            _rust_call_with_error(_UniffiConverterTypePaymentError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_receive_payment,self._uniffi_clone_pointer(),
        _UniffiConverterTypePrepareReceiveResponse.lower(req))
        )





    def remove_event_listener(self, id: "str") -> None:
        _UniffiConverterString.check_lower(id)
        
        _rust_call_with_error(_UniffiConverterTypeLiquidSdkError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_remove_event_listener,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(id))






    def restore(self, req: "RestoreRequest") -> None:
        _UniffiConverterTypeRestoreRequest.check_lower(req)
        
        _rust_call_with_error(_UniffiConverterTypeLiquidSdkError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_restore,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRestoreRequest.lower(req))






    def send_payment(self, req: "PrepareSendResponse") -> "SendPaymentResponse":
        _UniffiConverterTypePrepareSendResponse.check_lower(req)
        
        return _UniffiConverterTypeSendPaymentResponse.lift(
            _rust_call_with_error(_UniffiConverterTypePaymentError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_send_payment,self._uniffi_clone_pointer(),
        _UniffiConverterTypePrepareSendResponse.lower(req))
        )





    def sync(self, ) -> None:
        _rust_call_with_error(_UniffiConverterTypeLiquidSdkError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_sync,self._uniffi_clone_pointer(),)







class _UniffiConverterTypeBindingLiquidSdk:

    @staticmethod
    def lift(value: int):
        return BindingLiquidSdk._make_instance_(value)

    @staticmethod
    def check_lower(value: BindingLiquidSdk):
        if not isinstance(value, BindingLiquidSdk):
            raise TypeError("Expected BindingLiquidSdk instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: BindingLiquidSdkProtocol):
        if not isinstance(value, BindingLiquidSdk):
            raise TypeError("Expected BindingLiquidSdk instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: BindingLiquidSdkProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class BackupRequest:
    backup_path: "typing.Optional[str]"
    @typing.no_type_check
    def __init__(self, *, backup_path: "typing.Optional[str]" = _DEFAULT):
        if backup_path is _DEFAULT:
            self.backup_path = None
        else:
            self.backup_path = backup_path

    def __str__(self):
        return "BackupRequest(backup_path={})".format(self.backup_path)

    def __eq__(self, other):
        if self.backup_path != other.backup_path:
            return False
        return True

class _UniffiConverterTypeBackupRequest(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return BackupRequest(
            backup_path=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterOptionalString.check_lower(value.backup_path)

    @staticmethod
    def write(value, buf):
        _UniffiConverterOptionalString.write(value.backup_path, buf)


class Config:
    boltz_url: "str"
    electrum_url: "str"
    working_dir: "str"
    network: "Network"
    payment_timeout_sec: "int"
    zero_conf_min_fee_rate: "float"
    zero_conf_max_amount_sat: "typing.Optional[int]"
    @typing.no_type_check
    def __init__(self, *, boltz_url: "str", electrum_url: "str", working_dir: "str", network: "Network", payment_timeout_sec: "int", zero_conf_min_fee_rate: "float", zero_conf_max_amount_sat: "typing.Optional[int]"):
        self.boltz_url = boltz_url
        self.electrum_url = electrum_url
        self.working_dir = working_dir
        self.network = network
        self.payment_timeout_sec = payment_timeout_sec
        self.zero_conf_min_fee_rate = zero_conf_min_fee_rate
        self.zero_conf_max_amount_sat = zero_conf_max_amount_sat

    def __str__(self):
        return "Config(boltz_url={}, electrum_url={}, working_dir={}, network={}, payment_timeout_sec={}, zero_conf_min_fee_rate={}, zero_conf_max_amount_sat={})".format(self.boltz_url, self.electrum_url, self.working_dir, self.network, self.payment_timeout_sec, self.zero_conf_min_fee_rate, self.zero_conf_max_amount_sat)

    def __eq__(self, other):
        if self.boltz_url != other.boltz_url:
            return False
        if self.electrum_url != other.electrum_url:
            return False
        if self.working_dir != other.working_dir:
            return False
        if self.network != other.network:
            return False
        if self.payment_timeout_sec != other.payment_timeout_sec:
            return False
        if self.zero_conf_min_fee_rate != other.zero_conf_min_fee_rate:
            return False
        if self.zero_conf_max_amount_sat != other.zero_conf_max_amount_sat:
            return False
        return True

class _UniffiConverterTypeConfig(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Config(
            boltz_url=_UniffiConverterString.read(buf),
            electrum_url=_UniffiConverterString.read(buf),
            working_dir=_UniffiConverterString.read(buf),
            network=_UniffiConverterTypeNetwork.read(buf),
            payment_timeout_sec=_UniffiConverterUInt64.read(buf),
            zero_conf_min_fee_rate=_UniffiConverterFloat.read(buf),
            zero_conf_max_amount_sat=_UniffiConverterOptionalUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.boltz_url)
        _UniffiConverterString.check_lower(value.electrum_url)
        _UniffiConverterString.check_lower(value.working_dir)
        _UniffiConverterTypeNetwork.check_lower(value.network)
        _UniffiConverterUInt64.check_lower(value.payment_timeout_sec)
        _UniffiConverterFloat.check_lower(value.zero_conf_min_fee_rate)
        _UniffiConverterOptionalUInt64.check_lower(value.zero_conf_max_amount_sat)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.boltz_url, buf)
        _UniffiConverterString.write(value.electrum_url, buf)
        _UniffiConverterString.write(value.working_dir, buf)
        _UniffiConverterTypeNetwork.write(value.network, buf)
        _UniffiConverterUInt64.write(value.payment_timeout_sec, buf)
        _UniffiConverterFloat.write(value.zero_conf_min_fee_rate, buf)
        _UniffiConverterOptionalUInt64.write(value.zero_conf_max_amount_sat, buf)


class ConnectRequest:
    config: "Config"
    mnemonic: "str"
    @typing.no_type_check
    def __init__(self, *, config: "Config", mnemonic: "str"):
        self.config = config
        self.mnemonic = mnemonic

    def __str__(self):
        return "ConnectRequest(config={}, mnemonic={})".format(self.config, self.mnemonic)

    def __eq__(self, other):
        if self.config != other.config:
            return False
        if self.mnemonic != other.mnemonic:
            return False
        return True

class _UniffiConverterTypeConnectRequest(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ConnectRequest(
            config=_UniffiConverterTypeConfig.read(buf),
            mnemonic=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeConfig.check_lower(value.config)
        _UniffiConverterString.check_lower(value.mnemonic)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeConfig.write(value.config, buf)
        _UniffiConverterString.write(value.mnemonic, buf)


class GetInfoResponse:
    balance_sat: "int"
    pending_send_sat: "int"
    pending_receive_sat: "int"
    pubkey: "str"
    @typing.no_type_check
    def __init__(self, *, balance_sat: "int", pending_send_sat: "int", pending_receive_sat: "int", pubkey: "str"):
        self.balance_sat = balance_sat
        self.pending_send_sat = pending_send_sat
        self.pending_receive_sat = pending_receive_sat
        self.pubkey = pubkey

    def __str__(self):
        return "GetInfoResponse(balance_sat={}, pending_send_sat={}, pending_receive_sat={}, pubkey={})".format(self.balance_sat, self.pending_send_sat, self.pending_receive_sat, self.pubkey)

    def __eq__(self, other):
        if self.balance_sat != other.balance_sat:
            return False
        if self.pending_send_sat != other.pending_send_sat:
            return False
        if self.pending_receive_sat != other.pending_receive_sat:
            return False
        if self.pubkey != other.pubkey:
            return False
        return True

class _UniffiConverterTypeGetInfoResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return GetInfoResponse(
            balance_sat=_UniffiConverterUInt64.read(buf),
            pending_send_sat=_UniffiConverterUInt64.read(buf),
            pending_receive_sat=_UniffiConverterUInt64.read(buf),
            pubkey=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.balance_sat)
        _UniffiConverterUInt64.check_lower(value.pending_send_sat)
        _UniffiConverterUInt64.check_lower(value.pending_receive_sat)
        _UniffiConverterString.check_lower(value.pubkey)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.balance_sat, buf)
        _UniffiConverterUInt64.write(value.pending_send_sat, buf)
        _UniffiConverterUInt64.write(value.pending_receive_sat, buf)
        _UniffiConverterString.write(value.pubkey, buf)


class LnInvoice:
    bolt11: "str"
    network: "Network"
    payee_pubkey: "str"
    payment_hash: "str"
    description: "typing.Optional[str]"
    description_hash: "typing.Optional[str]"
    amount_msat: "typing.Optional[int]"
    timestamp: "int"
    expiry: "int"
    routing_hints: "typing.List[RouteHint]"
    payment_secret: "typing.List[int]"
    min_final_cltv_expiry_delta: "int"
    @typing.no_type_check
    def __init__(self, *, bolt11: "str", network: "Network", payee_pubkey: "str", payment_hash: "str", description: "typing.Optional[str]", description_hash: "typing.Optional[str]", amount_msat: "typing.Optional[int]", timestamp: "int", expiry: "int", routing_hints: "typing.List[RouteHint]", payment_secret: "typing.List[int]", min_final_cltv_expiry_delta: "int"):
        self.bolt11 = bolt11
        self.network = network
        self.payee_pubkey = payee_pubkey
        self.payment_hash = payment_hash
        self.description = description
        self.description_hash = description_hash
        self.amount_msat = amount_msat
        self.timestamp = timestamp
        self.expiry = expiry
        self.routing_hints = routing_hints
        self.payment_secret = payment_secret
        self.min_final_cltv_expiry_delta = min_final_cltv_expiry_delta

    def __str__(self):
        return "LnInvoice(bolt11={}, network={}, payee_pubkey={}, payment_hash={}, description={}, description_hash={}, amount_msat={}, timestamp={}, expiry={}, routing_hints={}, payment_secret={}, min_final_cltv_expiry_delta={})".format(self.bolt11, self.network, self.payee_pubkey, self.payment_hash, self.description, self.description_hash, self.amount_msat, self.timestamp, self.expiry, self.routing_hints, self.payment_secret, self.min_final_cltv_expiry_delta)

    def __eq__(self, other):
        if self.bolt11 != other.bolt11:
            return False
        if self.network != other.network:
            return False
        if self.payee_pubkey != other.payee_pubkey:
            return False
        if self.payment_hash != other.payment_hash:
            return False
        if self.description != other.description:
            return False
        if self.description_hash != other.description_hash:
            return False
        if self.amount_msat != other.amount_msat:
            return False
        if self.timestamp != other.timestamp:
            return False
        if self.expiry != other.expiry:
            return False
        if self.routing_hints != other.routing_hints:
            return False
        if self.payment_secret != other.payment_secret:
            return False
        if self.min_final_cltv_expiry_delta != other.min_final_cltv_expiry_delta:
            return False
        return True

class _UniffiConverterTypeLNInvoice(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnInvoice(
            bolt11=_UniffiConverterString.read(buf),
            network=_UniffiConverterTypeNetwork.read(buf),
            payee_pubkey=_UniffiConverterString.read(buf),
            payment_hash=_UniffiConverterString.read(buf),
            description=_UniffiConverterOptionalString.read(buf),
            description_hash=_UniffiConverterOptionalString.read(buf),
            amount_msat=_UniffiConverterOptionalUInt64.read(buf),
            timestamp=_UniffiConverterUInt64.read(buf),
            expiry=_UniffiConverterUInt64.read(buf),
            routing_hints=_UniffiConverterSequenceTypeRouteHint.read(buf),
            payment_secret=_UniffiConverterSequenceUInt8.read(buf),
            min_final_cltv_expiry_delta=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.bolt11)
        _UniffiConverterTypeNetwork.check_lower(value.network)
        _UniffiConverterString.check_lower(value.payee_pubkey)
        _UniffiConverterString.check_lower(value.payment_hash)
        _UniffiConverterOptionalString.check_lower(value.description)
        _UniffiConverterOptionalString.check_lower(value.description_hash)
        _UniffiConverterOptionalUInt64.check_lower(value.amount_msat)
        _UniffiConverterUInt64.check_lower(value.timestamp)
        _UniffiConverterUInt64.check_lower(value.expiry)
        _UniffiConverterSequenceTypeRouteHint.check_lower(value.routing_hints)
        _UniffiConverterSequenceUInt8.check_lower(value.payment_secret)
        _UniffiConverterUInt64.check_lower(value.min_final_cltv_expiry_delta)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.bolt11, buf)
        _UniffiConverterTypeNetwork.write(value.network, buf)
        _UniffiConverterString.write(value.payee_pubkey, buf)
        _UniffiConverterString.write(value.payment_hash, buf)
        _UniffiConverterOptionalString.write(value.description, buf)
        _UniffiConverterOptionalString.write(value.description_hash, buf)
        _UniffiConverterOptionalUInt64.write(value.amount_msat, buf)
        _UniffiConverterUInt64.write(value.timestamp, buf)
        _UniffiConverterUInt64.write(value.expiry, buf)
        _UniffiConverterSequenceTypeRouteHint.write(value.routing_hints, buf)
        _UniffiConverterSequenceUInt8.write(value.payment_secret, buf)
        _UniffiConverterUInt64.write(value.min_final_cltv_expiry_delta, buf)


class LogEntry:
    line: "str"
    level: "str"
    @typing.no_type_check
    def __init__(self, *, line: "str", level: "str"):
        self.line = line
        self.level = level

    def __str__(self):
        return "LogEntry(line={}, level={})".format(self.line, self.level)

    def __eq__(self, other):
        if self.line != other.line:
            return False
        if self.level != other.level:
            return False
        return True

class _UniffiConverterTypeLogEntry(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LogEntry(
            line=_UniffiConverterString.read(buf),
            level=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.line)
        _UniffiConverterString.check_lower(value.level)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.line, buf)
        _UniffiConverterString.write(value.level, buf)


class Payment:
    tx_id: "typing.Optional[str]"
    swap_id: "typing.Optional[str]"
    timestamp: "int"
    amount_sat: "int"
    fees_sat: "int"
    preimage: "typing.Optional[str]"
    refund_tx_id: "typing.Optional[str]"
    refund_tx_amount_sat: "typing.Optional[int]"
    payment_type: "PaymentType"
    status: "PaymentState"
    @typing.no_type_check
    def __init__(self, *, tx_id: "typing.Optional[str]" = _DEFAULT, swap_id: "typing.Optional[str]" = _DEFAULT, timestamp: "int", amount_sat: "int", fees_sat: "int", preimage: "typing.Optional[str]" = _DEFAULT, refund_tx_id: "typing.Optional[str]" = _DEFAULT, refund_tx_amount_sat: "typing.Optional[int]" = _DEFAULT, payment_type: "PaymentType", status: "PaymentState"):
        if tx_id is _DEFAULT:
            self.tx_id = None
        else:
            self.tx_id = tx_id
        if swap_id is _DEFAULT:
            self.swap_id = None
        else:
            self.swap_id = swap_id
        self.timestamp = timestamp
        self.amount_sat = amount_sat
        self.fees_sat = fees_sat
        if preimage is _DEFAULT:
            self.preimage = None
        else:
            self.preimage = preimage
        if refund_tx_id is _DEFAULT:
            self.refund_tx_id = None
        else:
            self.refund_tx_id = refund_tx_id
        if refund_tx_amount_sat is _DEFAULT:
            self.refund_tx_amount_sat = None
        else:
            self.refund_tx_amount_sat = refund_tx_amount_sat
        self.payment_type = payment_type
        self.status = status

    def __str__(self):
        return "Payment(tx_id={}, swap_id={}, timestamp={}, amount_sat={}, fees_sat={}, preimage={}, refund_tx_id={}, refund_tx_amount_sat={}, payment_type={}, status={})".format(self.tx_id, self.swap_id, self.timestamp, self.amount_sat, self.fees_sat, self.preimage, self.refund_tx_id, self.refund_tx_amount_sat, self.payment_type, self.status)

    def __eq__(self, other):
        if self.tx_id != other.tx_id:
            return False
        if self.swap_id != other.swap_id:
            return False
        if self.timestamp != other.timestamp:
            return False
        if self.amount_sat != other.amount_sat:
            return False
        if self.fees_sat != other.fees_sat:
            return False
        if self.preimage != other.preimage:
            return False
        if self.refund_tx_id != other.refund_tx_id:
            return False
        if self.refund_tx_amount_sat != other.refund_tx_amount_sat:
            return False
        if self.payment_type != other.payment_type:
            return False
        if self.status != other.status:
            return False
        return True

class _UniffiConverterTypePayment(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Payment(
            tx_id=_UniffiConverterOptionalString.read(buf),
            swap_id=_UniffiConverterOptionalString.read(buf),
            timestamp=_UniffiConverterUInt32.read(buf),
            amount_sat=_UniffiConverterUInt64.read(buf),
            fees_sat=_UniffiConverterUInt64.read(buf),
            preimage=_UniffiConverterOptionalString.read(buf),
            refund_tx_id=_UniffiConverterOptionalString.read(buf),
            refund_tx_amount_sat=_UniffiConverterOptionalUInt64.read(buf),
            payment_type=_UniffiConverterTypePaymentType.read(buf),
            status=_UniffiConverterTypePaymentState.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterOptionalString.check_lower(value.tx_id)
        _UniffiConverterOptionalString.check_lower(value.swap_id)
        _UniffiConverterUInt32.check_lower(value.timestamp)
        _UniffiConverterUInt64.check_lower(value.amount_sat)
        _UniffiConverterUInt64.check_lower(value.fees_sat)
        _UniffiConverterOptionalString.check_lower(value.preimage)
        _UniffiConverterOptionalString.check_lower(value.refund_tx_id)
        _UniffiConverterOptionalUInt64.check_lower(value.refund_tx_amount_sat)
        _UniffiConverterTypePaymentType.check_lower(value.payment_type)
        _UniffiConverterTypePaymentState.check_lower(value.status)

    @staticmethod
    def write(value, buf):
        _UniffiConverterOptionalString.write(value.tx_id, buf)
        _UniffiConverterOptionalString.write(value.swap_id, buf)
        _UniffiConverterUInt32.write(value.timestamp, buf)
        _UniffiConverterUInt64.write(value.amount_sat, buf)
        _UniffiConverterUInt64.write(value.fees_sat, buf)
        _UniffiConverterOptionalString.write(value.preimage, buf)
        _UniffiConverterOptionalString.write(value.refund_tx_id, buf)
        _UniffiConverterOptionalUInt64.write(value.refund_tx_amount_sat, buf)
        _UniffiConverterTypePaymentType.write(value.payment_type, buf)
        _UniffiConverterTypePaymentState.write(value.status, buf)


class PrepareReceiveRequest:
    payer_amount_sat: "int"
    @typing.no_type_check
    def __init__(self, *, payer_amount_sat: "int"):
        self.payer_amount_sat = payer_amount_sat

    def __str__(self):
        return "PrepareReceiveRequest(payer_amount_sat={})".format(self.payer_amount_sat)

    def __eq__(self, other):
        if self.payer_amount_sat != other.payer_amount_sat:
            return False
        return True

class _UniffiConverterTypePrepareReceiveRequest(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PrepareReceiveRequest(
            payer_amount_sat=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.payer_amount_sat)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.payer_amount_sat, buf)


class PrepareReceiveResponse:
    payer_amount_sat: "int"
    fees_sat: "int"
    @typing.no_type_check
    def __init__(self, *, payer_amount_sat: "int", fees_sat: "int"):
        self.payer_amount_sat = payer_amount_sat
        self.fees_sat = fees_sat

    def __str__(self):
        return "PrepareReceiveResponse(payer_amount_sat={}, fees_sat={})".format(self.payer_amount_sat, self.fees_sat)

    def __eq__(self, other):
        if self.payer_amount_sat != other.payer_amount_sat:
            return False
        if self.fees_sat != other.fees_sat:
            return False
        return True

class _UniffiConverterTypePrepareReceiveResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PrepareReceiveResponse(
            payer_amount_sat=_UniffiConverterUInt64.read(buf),
            fees_sat=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.payer_amount_sat)
        _UniffiConverterUInt64.check_lower(value.fees_sat)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.payer_amount_sat, buf)
        _UniffiConverterUInt64.write(value.fees_sat, buf)


class PrepareSendRequest:
    invoice: "str"
    @typing.no_type_check
    def __init__(self, *, invoice: "str"):
        self.invoice = invoice

    def __str__(self):
        return "PrepareSendRequest(invoice={})".format(self.invoice)

    def __eq__(self, other):
        if self.invoice != other.invoice:
            return False
        return True

class _UniffiConverterTypePrepareSendRequest(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PrepareSendRequest(
            invoice=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.invoice)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.invoice, buf)


class PrepareSendResponse:
    invoice: "str"
    fees_sat: "int"
    @typing.no_type_check
    def __init__(self, *, invoice: "str", fees_sat: "int"):
        self.invoice = invoice
        self.fees_sat = fees_sat

    def __str__(self):
        return "PrepareSendResponse(invoice={}, fees_sat={})".format(self.invoice, self.fees_sat)

    def __eq__(self, other):
        if self.invoice != other.invoice:
            return False
        if self.fees_sat != other.fees_sat:
            return False
        return True

class _UniffiConverterTypePrepareSendResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PrepareSendResponse(
            invoice=_UniffiConverterString.read(buf),
            fees_sat=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.invoice)
        _UniffiConverterUInt64.check_lower(value.fees_sat)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.invoice, buf)
        _UniffiConverterUInt64.write(value.fees_sat, buf)


class ReceivePaymentResponse:
    id: "str"
    invoice: "str"
    @typing.no_type_check
    def __init__(self, *, id: "str", invoice: "str"):
        self.id = id
        self.invoice = invoice

    def __str__(self):
        return "ReceivePaymentResponse(id={}, invoice={})".format(self.id, self.invoice)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.invoice != other.invoice:
            return False
        return True

class _UniffiConverterTypeReceivePaymentResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ReceivePaymentResponse(
            id=_UniffiConverterString.read(buf),
            invoice=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterString.check_lower(value.invoice)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterString.write(value.invoice, buf)


class RestoreRequest:
    backup_path: "typing.Optional[str]"
    @typing.no_type_check
    def __init__(self, *, backup_path: "typing.Optional[str]" = _DEFAULT):
        if backup_path is _DEFAULT:
            self.backup_path = None
        else:
            self.backup_path = backup_path

    def __str__(self):
        return "RestoreRequest(backup_path={})".format(self.backup_path)

    def __eq__(self, other):
        if self.backup_path != other.backup_path:
            return False
        return True

class _UniffiConverterTypeRestoreRequest(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RestoreRequest(
            backup_path=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterOptionalString.check_lower(value.backup_path)

    @staticmethod
    def write(value, buf):
        _UniffiConverterOptionalString.write(value.backup_path, buf)


class RouteHint:
    hops: "typing.List[RouteHintHop]"
    @typing.no_type_check
    def __init__(self, *, hops: "typing.List[RouteHintHop]"):
        self.hops = hops

    def __str__(self):
        return "RouteHint(hops={})".format(self.hops)

    def __eq__(self, other):
        if self.hops != other.hops:
            return False
        return True

class _UniffiConverterTypeRouteHint(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RouteHint(
            hops=_UniffiConverterSequenceTypeRouteHintHop.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterSequenceTypeRouteHintHop.check_lower(value.hops)

    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceTypeRouteHintHop.write(value.hops, buf)


class RouteHintHop:
    src_node_id: "str"
    short_channel_id: "int"
    fees_base_msat: "int"
    fees_proportional_millionths: "int"
    cltv_expiry_delta: "int"
    htlc_minimum_msat: "typing.Optional[int]"
    htlc_maximum_msat: "typing.Optional[int]"
    @typing.no_type_check
    def __init__(self, *, src_node_id: "str", short_channel_id: "int", fees_base_msat: "int", fees_proportional_millionths: "int", cltv_expiry_delta: "int", htlc_minimum_msat: "typing.Optional[int]", htlc_maximum_msat: "typing.Optional[int]"):
        self.src_node_id = src_node_id
        self.short_channel_id = short_channel_id
        self.fees_base_msat = fees_base_msat
        self.fees_proportional_millionths = fees_proportional_millionths
        self.cltv_expiry_delta = cltv_expiry_delta
        self.htlc_minimum_msat = htlc_minimum_msat
        self.htlc_maximum_msat = htlc_maximum_msat

    def __str__(self):
        return "RouteHintHop(src_node_id={}, short_channel_id={}, fees_base_msat={}, fees_proportional_millionths={}, cltv_expiry_delta={}, htlc_minimum_msat={}, htlc_maximum_msat={})".format(self.src_node_id, self.short_channel_id, self.fees_base_msat, self.fees_proportional_millionths, self.cltv_expiry_delta, self.htlc_minimum_msat, self.htlc_maximum_msat)

    def __eq__(self, other):
        if self.src_node_id != other.src_node_id:
            return False
        if self.short_channel_id != other.short_channel_id:
            return False
        if self.fees_base_msat != other.fees_base_msat:
            return False
        if self.fees_proportional_millionths != other.fees_proportional_millionths:
            return False
        if self.cltv_expiry_delta != other.cltv_expiry_delta:
            return False
        if self.htlc_minimum_msat != other.htlc_minimum_msat:
            return False
        if self.htlc_maximum_msat != other.htlc_maximum_msat:
            return False
        return True

class _UniffiConverterTypeRouteHintHop(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RouteHintHop(
            src_node_id=_UniffiConverterString.read(buf),
            short_channel_id=_UniffiConverterUInt64.read(buf),
            fees_base_msat=_UniffiConverterUInt32.read(buf),
            fees_proportional_millionths=_UniffiConverterUInt32.read(buf),
            cltv_expiry_delta=_UniffiConverterUInt64.read(buf),
            htlc_minimum_msat=_UniffiConverterOptionalUInt64.read(buf),
            htlc_maximum_msat=_UniffiConverterOptionalUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.src_node_id)
        _UniffiConverterUInt64.check_lower(value.short_channel_id)
        _UniffiConverterUInt32.check_lower(value.fees_base_msat)
        _UniffiConverterUInt32.check_lower(value.fees_proportional_millionths)
        _UniffiConverterUInt64.check_lower(value.cltv_expiry_delta)
        _UniffiConverterOptionalUInt64.check_lower(value.htlc_minimum_msat)
        _UniffiConverterOptionalUInt64.check_lower(value.htlc_maximum_msat)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.src_node_id, buf)
        _UniffiConverterUInt64.write(value.short_channel_id, buf)
        _UniffiConverterUInt32.write(value.fees_base_msat, buf)
        _UniffiConverterUInt32.write(value.fees_proportional_millionths, buf)
        _UniffiConverterUInt64.write(value.cltv_expiry_delta, buf)
        _UniffiConverterOptionalUInt64.write(value.htlc_minimum_msat, buf)
        _UniffiConverterOptionalUInt64.write(value.htlc_maximum_msat, buf)


class SendPaymentResponse:
    payment: "Payment"
    @typing.no_type_check
    def __init__(self, *, payment: "Payment"):
        self.payment = payment

    def __str__(self):
        return "SendPaymentResponse(payment={})".format(self.payment)

    def __eq__(self, other):
        if self.payment != other.payment:
            return False
        return True

class _UniffiConverterTypeSendPaymentResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SendPaymentResponse(
            payment=_UniffiConverterTypePayment.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypePayment.check_lower(value.payment)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypePayment.write(value.payment, buf)


# LiquidSdkError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class LiquidSdkError(Exception):
    pass

_UniffiTempLiquidSdkError = LiquidSdkError

class LiquidSdkError:  # type: ignore
    class AlreadyStarted(_UniffiTempLiquidSdkError):

        def __repr__(self):
            return "LiquidSdkError.AlreadyStarted({})".format(repr(str(self)))
    _UniffiTempLiquidSdkError.AlreadyStarted = AlreadyStarted # type: ignore
    class Generic(_UniffiTempLiquidSdkError):

        def __repr__(self):
            return "LiquidSdkError.Generic({})".format(repr(str(self)))
    _UniffiTempLiquidSdkError.Generic = Generic # type: ignore
    class NotStarted(_UniffiTempLiquidSdkError):

        def __repr__(self):
            return "LiquidSdkError.NotStarted({})".format(repr(str(self)))
    _UniffiTempLiquidSdkError.NotStarted = NotStarted # type: ignore

LiquidSdkError = _UniffiTempLiquidSdkError # type: ignore
del _UniffiTempLiquidSdkError


class _UniffiConverterTypeLiquidSdkError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LiquidSdkError.AlreadyStarted(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return LiquidSdkError.Generic(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return LiquidSdkError.NotStarted(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, LiquidSdkError.AlreadyStarted):
            return
        if isinstance(value, LiquidSdkError.Generic):
            return
        if isinstance(value, LiquidSdkError.NotStarted):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, LiquidSdkError.AlreadyStarted):
            buf.write_i32(1)
        if isinstance(value, LiquidSdkError.Generic):
            buf.write_i32(2)
        if isinstance(value, LiquidSdkError.NotStarted):
            buf.write_i32(3)





class LiquidSdkEvent:
    def __init__(self):
        raise RuntimeError("LiquidSdkEvent cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class PAYMENT_FAILED:
        details: "Payment"

        @typing.no_type_check
        def __init__(self,details: "Payment"):
            self.details = details

        def __str__(self):
            return "LiquidSdkEvent.PAYMENT_FAILED(details={})".format(self.details)

        def __eq__(self, other):
            if not other.is_payment_failed():
                return False
            if self.details != other.details:
                return False
            return True
    
    class PAYMENT_PENDING:
        details: "Payment"

        @typing.no_type_check
        def __init__(self,details: "Payment"):
            self.details = details

        def __str__(self):
            return "LiquidSdkEvent.PAYMENT_PENDING(details={})".format(self.details)

        def __eq__(self, other):
            if not other.is_payment_pending():
                return False
            if self.details != other.details:
                return False
            return True
    
    class PAYMENT_REFUNDED:
        details: "Payment"

        @typing.no_type_check
        def __init__(self,details: "Payment"):
            self.details = details

        def __str__(self):
            return "LiquidSdkEvent.PAYMENT_REFUNDED(details={})".format(self.details)

        def __eq__(self, other):
            if not other.is_payment_refunded():
                return False
            if self.details != other.details:
                return False
            return True
    
    class PAYMENT_REFUND_PENDING:
        details: "Payment"

        @typing.no_type_check
        def __init__(self,details: "Payment"):
            self.details = details

        def __str__(self):
            return "LiquidSdkEvent.PAYMENT_REFUND_PENDING(details={})".format(self.details)

        def __eq__(self, other):
            if not other.is_payment_refund_pending():
                return False
            if self.details != other.details:
                return False
            return True
    
    class PAYMENT_SUCCEEDED:
        details: "Payment"

        @typing.no_type_check
        def __init__(self,details: "Payment"):
            self.details = details

        def __str__(self):
            return "LiquidSdkEvent.PAYMENT_SUCCEEDED(details={})".format(self.details)

        def __eq__(self, other):
            if not other.is_payment_succeeded():
                return False
            if self.details != other.details:
                return False
            return True
    
    class PAYMENT_WAITING_CONFIRMATION:
        details: "Payment"

        @typing.no_type_check
        def __init__(self,details: "Payment"):
            self.details = details

        def __str__(self):
            return "LiquidSdkEvent.PAYMENT_WAITING_CONFIRMATION(details={})".format(self.details)

        def __eq__(self, other):
            if not other.is_payment_waiting_confirmation():
                return False
            if self.details != other.details:
                return False
            return True
    
    class SYNCED:

        @typing.no_type_check
        def __init__(self,):
            pass

        def __str__(self):
            return "LiquidSdkEvent.SYNCED()".format()

        def __eq__(self, other):
            if not other.is_synced():
                return False
            return True
    
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_payment_failed(self) -> bool:
        return isinstance(self, LiquidSdkEvent.PAYMENT_FAILED)
    def is_payment_pending(self) -> bool:
        return isinstance(self, LiquidSdkEvent.PAYMENT_PENDING)
    def is_payment_refunded(self) -> bool:
        return isinstance(self, LiquidSdkEvent.PAYMENT_REFUNDED)
    def is_payment_refund_pending(self) -> bool:
        return isinstance(self, LiquidSdkEvent.PAYMENT_REFUND_PENDING)
    def is_payment_succeeded(self) -> bool:
        return isinstance(self, LiquidSdkEvent.PAYMENT_SUCCEEDED)
    def is_payment_waiting_confirmation(self) -> bool:
        return isinstance(self, LiquidSdkEvent.PAYMENT_WAITING_CONFIRMATION)
    def is_synced(self) -> bool:
        return isinstance(self, LiquidSdkEvent.SYNCED)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
LiquidSdkEvent.PAYMENT_FAILED = type("LiquidSdkEvent.PAYMENT_FAILED", (LiquidSdkEvent.PAYMENT_FAILED, LiquidSdkEvent,), {})  # type: ignore
LiquidSdkEvent.PAYMENT_PENDING = type("LiquidSdkEvent.PAYMENT_PENDING", (LiquidSdkEvent.PAYMENT_PENDING, LiquidSdkEvent,), {})  # type: ignore
LiquidSdkEvent.PAYMENT_REFUNDED = type("LiquidSdkEvent.PAYMENT_REFUNDED", (LiquidSdkEvent.PAYMENT_REFUNDED, LiquidSdkEvent,), {})  # type: ignore
LiquidSdkEvent.PAYMENT_REFUND_PENDING = type("LiquidSdkEvent.PAYMENT_REFUND_PENDING", (LiquidSdkEvent.PAYMENT_REFUND_PENDING, LiquidSdkEvent,), {})  # type: ignore
LiquidSdkEvent.PAYMENT_SUCCEEDED = type("LiquidSdkEvent.PAYMENT_SUCCEEDED", (LiquidSdkEvent.PAYMENT_SUCCEEDED, LiquidSdkEvent,), {})  # type: ignore
LiquidSdkEvent.PAYMENT_WAITING_CONFIRMATION = type("LiquidSdkEvent.PAYMENT_WAITING_CONFIRMATION", (LiquidSdkEvent.PAYMENT_WAITING_CONFIRMATION, LiquidSdkEvent,), {})  # type: ignore
LiquidSdkEvent.SYNCED = type("LiquidSdkEvent.SYNCED", (LiquidSdkEvent.SYNCED, LiquidSdkEvent,), {})  # type: ignore




class _UniffiConverterTypeLiquidSdkEvent(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LiquidSdkEvent.PAYMENT_FAILED(
                _UniffiConverterTypePayment.read(buf),
            )
        if variant == 2:
            return LiquidSdkEvent.PAYMENT_PENDING(
                _UniffiConverterTypePayment.read(buf),
            )
        if variant == 3:
            return LiquidSdkEvent.PAYMENT_REFUNDED(
                _UniffiConverterTypePayment.read(buf),
            )
        if variant == 4:
            return LiquidSdkEvent.PAYMENT_REFUND_PENDING(
                _UniffiConverterTypePayment.read(buf),
            )
        if variant == 5:
            return LiquidSdkEvent.PAYMENT_SUCCEEDED(
                _UniffiConverterTypePayment.read(buf),
            )
        if variant == 6:
            return LiquidSdkEvent.PAYMENT_WAITING_CONFIRMATION(
                _UniffiConverterTypePayment.read(buf),
            )
        if variant == 7:
            return LiquidSdkEvent.SYNCED(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_payment_failed():
            _UniffiConverterTypePayment.check_lower(value.details)
            return
        if value.is_payment_pending():
            _UniffiConverterTypePayment.check_lower(value.details)
            return
        if value.is_payment_refunded():
            _UniffiConverterTypePayment.check_lower(value.details)
            return
        if value.is_payment_refund_pending():
            _UniffiConverterTypePayment.check_lower(value.details)
            return
        if value.is_payment_succeeded():
            _UniffiConverterTypePayment.check_lower(value.details)
            return
        if value.is_payment_waiting_confirmation():
            _UniffiConverterTypePayment.check_lower(value.details)
            return
        if value.is_synced():
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_payment_failed():
            buf.write_i32(1)
            _UniffiConverterTypePayment.write(value.details, buf)
        if value.is_payment_pending():
            buf.write_i32(2)
            _UniffiConverterTypePayment.write(value.details, buf)
        if value.is_payment_refunded():
            buf.write_i32(3)
            _UniffiConverterTypePayment.write(value.details, buf)
        if value.is_payment_refund_pending():
            buf.write_i32(4)
            _UniffiConverterTypePayment.write(value.details, buf)
        if value.is_payment_succeeded():
            buf.write_i32(5)
            _UniffiConverterTypePayment.write(value.details, buf)
        if value.is_payment_waiting_confirmation():
            buf.write_i32(6)
            _UniffiConverterTypePayment.write(value.details, buf)
        if value.is_synced():
            buf.write_i32(7)







class Network(enum.Enum):
    MAINNET = 0
    
    TESTNET = 1
    


class _UniffiConverterTypeNetwork(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Network.MAINNET
        if variant == 2:
            return Network.TESTNET
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Network.MAINNET:
            return
        if value == Network.TESTNET:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == Network.MAINNET:
            buf.write_i32(1)
        if value == Network.TESTNET:
            buf.write_i32(2)




# PaymentError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class PaymentError(Exception):
    pass

_UniffiTempPaymentError = PaymentError

class PaymentError:  # type: ignore
    class AlreadyClaimed(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.AlreadyClaimed({})".format(repr(str(self)))
    _UniffiTempPaymentError.AlreadyClaimed = AlreadyClaimed # type: ignore
    class AlreadyPaid(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.AlreadyPaid({})".format(repr(str(self)))
    _UniffiTempPaymentError.AlreadyPaid = AlreadyPaid # type: ignore
    class PaymentInProgress(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.PaymentInProgress({})".format(repr(str(self)))
    _UniffiTempPaymentError.PaymentInProgress = PaymentInProgress # type: ignore
    class AmountOutOfRange(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.AmountOutOfRange({})".format(repr(str(self)))
    _UniffiTempPaymentError.AmountOutOfRange = AmountOutOfRange # type: ignore
    class Generic(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.Generic({})".format(repr(str(self)))
    _UniffiTempPaymentError.Generic = Generic # type: ignore
    class InvalidOrExpiredFees(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.InvalidOrExpiredFees({})".format(repr(str(self)))
    _UniffiTempPaymentError.InvalidOrExpiredFees = InvalidOrExpiredFees # type: ignore
    class InsufficientFunds(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.InsufficientFunds({})".format(repr(str(self)))
    _UniffiTempPaymentError.InsufficientFunds = InsufficientFunds # type: ignore
    class InvalidInvoice(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.InvalidInvoice({})".format(repr(str(self)))
    _UniffiTempPaymentError.InvalidInvoice = InvalidInvoice # type: ignore
    class InvalidPreimage(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.InvalidPreimage({})".format(repr(str(self)))
    _UniffiTempPaymentError.InvalidPreimage = InvalidPreimage # type: ignore
    class LwkError(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.LwkError({})".format(repr(str(self)))
    _UniffiTempPaymentError.LwkError = LwkError # type: ignore
    class PairsNotFound(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.PairsNotFound({})".format(repr(str(self)))
    _UniffiTempPaymentError.PairsNotFound = PairsNotFound # type: ignore
    class PaymentTimeout(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.PaymentTimeout({})".format(repr(str(self)))
    _UniffiTempPaymentError.PaymentTimeout = PaymentTimeout # type: ignore
    class PersistError(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.PersistError({})".format(repr(str(self)))
    _UniffiTempPaymentError.PersistError = PersistError # type: ignore
    class ReceiveError(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.ReceiveError({})".format(repr(str(self)))
    _UniffiTempPaymentError.ReceiveError = ReceiveError # type: ignore
    class Refunded(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.Refunded({})".format(repr(str(self)))
    _UniffiTempPaymentError.Refunded = Refunded # type: ignore
    class SelfTransferNotSupported(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.SelfTransferNotSupported({})".format(repr(str(self)))
    _UniffiTempPaymentError.SelfTransferNotSupported = SelfTransferNotSupported # type: ignore
    class SendError(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.SendError({})".format(repr(str(self)))
    _UniffiTempPaymentError.SendError = SendError # type: ignore
    class SignerError(_UniffiTempPaymentError):

        def __repr__(self):
            return "PaymentError.SignerError({})".format(repr(str(self)))
    _UniffiTempPaymentError.SignerError = SignerError # type: ignore

PaymentError = _UniffiTempPaymentError # type: ignore
del _UniffiTempPaymentError


class _UniffiConverterTypePaymentError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PaymentError.AlreadyClaimed(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return PaymentError.AlreadyPaid(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return PaymentError.PaymentInProgress(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return PaymentError.AmountOutOfRange(
                _UniffiConverterString.read(buf),
            )
        if variant == 5:
            return PaymentError.Generic(
                _UniffiConverterString.read(buf),
            )
        if variant == 6:
            return PaymentError.InvalidOrExpiredFees(
                _UniffiConverterString.read(buf),
            )
        if variant == 7:
            return PaymentError.InsufficientFunds(
                _UniffiConverterString.read(buf),
            )
        if variant == 8:
            return PaymentError.InvalidInvoice(
                _UniffiConverterString.read(buf),
            )
        if variant == 9:
            return PaymentError.InvalidPreimage(
                _UniffiConverterString.read(buf),
            )
        if variant == 10:
            return PaymentError.LwkError(
                _UniffiConverterString.read(buf),
            )
        if variant == 11:
            return PaymentError.PairsNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 12:
            return PaymentError.PaymentTimeout(
                _UniffiConverterString.read(buf),
            )
        if variant == 13:
            return PaymentError.PersistError(
                _UniffiConverterString.read(buf),
            )
        if variant == 14:
            return PaymentError.ReceiveError(
                _UniffiConverterString.read(buf),
            )
        if variant == 15:
            return PaymentError.Refunded(
                _UniffiConverterString.read(buf),
            )
        if variant == 16:
            return PaymentError.SelfTransferNotSupported(
                _UniffiConverterString.read(buf),
            )
        if variant == 17:
            return PaymentError.SendError(
                _UniffiConverterString.read(buf),
            )
        if variant == 18:
            return PaymentError.SignerError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, PaymentError.AlreadyClaimed):
            return
        if isinstance(value, PaymentError.AlreadyPaid):
            return
        if isinstance(value, PaymentError.PaymentInProgress):
            return
        if isinstance(value, PaymentError.AmountOutOfRange):
            return
        if isinstance(value, PaymentError.Generic):
            return
        if isinstance(value, PaymentError.InvalidOrExpiredFees):
            return
        if isinstance(value, PaymentError.InsufficientFunds):
            return
        if isinstance(value, PaymentError.InvalidInvoice):
            return
        if isinstance(value, PaymentError.InvalidPreimage):
            return
        if isinstance(value, PaymentError.LwkError):
            return
        if isinstance(value, PaymentError.PairsNotFound):
            return
        if isinstance(value, PaymentError.PaymentTimeout):
            return
        if isinstance(value, PaymentError.PersistError):
            return
        if isinstance(value, PaymentError.ReceiveError):
            return
        if isinstance(value, PaymentError.Refunded):
            return
        if isinstance(value, PaymentError.SelfTransferNotSupported):
            return
        if isinstance(value, PaymentError.SendError):
            return
        if isinstance(value, PaymentError.SignerError):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, PaymentError.AlreadyClaimed):
            buf.write_i32(1)
        if isinstance(value, PaymentError.AlreadyPaid):
            buf.write_i32(2)
        if isinstance(value, PaymentError.PaymentInProgress):
            buf.write_i32(3)
        if isinstance(value, PaymentError.AmountOutOfRange):
            buf.write_i32(4)
        if isinstance(value, PaymentError.Generic):
            buf.write_i32(5)
        if isinstance(value, PaymentError.InvalidOrExpiredFees):
            buf.write_i32(6)
        if isinstance(value, PaymentError.InsufficientFunds):
            buf.write_i32(7)
        if isinstance(value, PaymentError.InvalidInvoice):
            buf.write_i32(8)
        if isinstance(value, PaymentError.InvalidPreimage):
            buf.write_i32(9)
        if isinstance(value, PaymentError.LwkError):
            buf.write_i32(10)
        if isinstance(value, PaymentError.PairsNotFound):
            buf.write_i32(11)
        if isinstance(value, PaymentError.PaymentTimeout):
            buf.write_i32(12)
        if isinstance(value, PaymentError.PersistError):
            buf.write_i32(13)
        if isinstance(value, PaymentError.ReceiveError):
            buf.write_i32(14)
        if isinstance(value, PaymentError.Refunded):
            buf.write_i32(15)
        if isinstance(value, PaymentError.SelfTransferNotSupported):
            buf.write_i32(16)
        if isinstance(value, PaymentError.SendError):
            buf.write_i32(17)
        if isinstance(value, PaymentError.SignerError):
            buf.write_i32(18)





class PaymentState(enum.Enum):
    CREATED = 0
    
    PENDING = 1
    
    COMPLETE = 2
    
    FAILED = 3
    
    TIMED_OUT = 4
    


class _UniffiConverterTypePaymentState(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PaymentState.CREATED
        if variant == 2:
            return PaymentState.PENDING
        if variant == 3:
            return PaymentState.COMPLETE
        if variant == 4:
            return PaymentState.FAILED
        if variant == 5:
            return PaymentState.TIMED_OUT
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == PaymentState.CREATED:
            return
        if value == PaymentState.PENDING:
            return
        if value == PaymentState.COMPLETE:
            return
        if value == PaymentState.FAILED:
            return
        if value == PaymentState.TIMED_OUT:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == PaymentState.CREATED:
            buf.write_i32(1)
        if value == PaymentState.PENDING:
            buf.write_i32(2)
        if value == PaymentState.COMPLETE:
            buf.write_i32(3)
        if value == PaymentState.FAILED:
            buf.write_i32(4)
        if value == PaymentState.TIMED_OUT:
            buf.write_i32(5)







class PaymentType(enum.Enum):
    RECEIVE = 0
    
    SEND = 1
    


class _UniffiConverterTypePaymentType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PaymentType.RECEIVE
        if variant == 2:
            return PaymentType.SEND
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == PaymentType.RECEIVE:
            return
        if value == PaymentType.SEND:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == PaymentType.RECEIVE:
            buf.write_i32(1)
        if value == PaymentType.SEND:
            buf.write_i32(2)





class EventListener(typing.Protocol):
    def on_event(self, e: "LiquidSdkEvent"):
        raise NotImplementedError
# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplEventListener:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_EVENT_LISTENER_METHOD0
    def on_event(
            uniffi_handle,
            e,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceEventListener._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeLiquidSdkEvent.lift(e), )
            method = uniffi_obj.on_event
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceEventListener._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceEventListener(
        on_event,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_init_callback_vtable_eventlistener(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceEventListener = UniffiCallbackInterfaceFfiConverter()



class Logger(typing.Protocol):
    def log(self, l: "LogEntry"):
        raise NotImplementedError


# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplLogger:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_LOGGER_METHOD0
    def log(
            uniffi_handle,
            l,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceLogger._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeLogEntry.lift(l), )
            method = uniffi_obj.log
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceLogger._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceLogger(
        log,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_init_callback_vtable_logger(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceLogger = UniffiCallbackInterfaceFfiConverter()



class _UniffiConverterOptionalUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt64.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterUInt8.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt8.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt8.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypePayment(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypePayment.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypePayment.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypePayment.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeRouteHint(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeRouteHint.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeRouteHint.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeRouteHint.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeRouteHintHop(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeRouteHintHop.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeRouteHintHop.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeRouteHintHop.read(buf) for i in range(count)
        ]

# Async support

def connect(req: "ConnectRequest") -> "BindingLiquidSdk":
    _UniffiConverterTypeConnectRequest.check_lower(req)
    
    return _UniffiConverterTypeBindingLiquidSdk.lift(_rust_call_with_error(_UniffiConverterTypeLiquidSdkError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_connect,
        _UniffiConverterTypeConnectRequest.lower(req)))


def default_config(network: "Network") -> "Config":
    _UniffiConverterTypeNetwork.check_lower(network)
    
    return _UniffiConverterTypeConfig.lift(_rust_call(_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_default_config,
        _UniffiConverterTypeNetwork.lower(network)))


def parse_invoice(invoice: "str") -> "LnInvoice":
    _UniffiConverterString.check_lower(invoice)
    
    return _UniffiConverterTypeLNInvoice.lift(_rust_call_with_error(_UniffiConverterTypePaymentError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_parse_invoice,
        _UniffiConverterString.lower(invoice)))


def set_logger(logger: "Logger") -> None:
    _UniffiConverterCallbackInterfaceLogger.check_lower(logger)
    
    _rust_call_with_error(_UniffiConverterTypeLiquidSdkError,_UniffiLib.uniffi_breez_liquid_sdk_bindings_fn_func_set_logger,
        _UniffiConverterCallbackInterfaceLogger.lower(logger))


__all__ = [
    "InternalError",
    "LiquidSdkError",
    "LiquidSdkEvent",
    "Network",
    "PaymentError",
    "PaymentState",
    "PaymentType",
    "BackupRequest",
    "Config",
    "ConnectRequest",
    "GetInfoResponse",
    "LnInvoice",
    "LogEntry",
    "Payment",
    "PrepareReceiveRequest",
    "PrepareReceiveResponse",
    "PrepareSendRequest",
    "PrepareSendResponse",
    "ReceivePaymentResponse",
    "RestoreRequest",
    "RouteHint",
    "RouteHintHop",
    "SendPaymentResponse",
    "connect",
    "default_config",
    "parse_invoice",
    "set_logger",
    "BindingLiquidSdk",
    "EventListener",
    "Logger",
]

