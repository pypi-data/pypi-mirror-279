# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from circle.web3.user_controlled_wallets.models.account_type import AccountType
from circle.web3.user_controlled_wallets.models.blockchain import Blockchain
from circle.web3.user_controlled_wallets.models.custody_type import CustodyType
from circle.web3.user_controlled_wallets.models.wallet_state import WalletState

class WalletResponse(BaseModel):
    """
    WalletResponse
    """
    id: StrictStr = Field(..., description="System-generated unique identifier of the resource.")
    address: StrictStr = Field(..., description="The blockchain address generated upon wallet creation.")
    blockchain: Blockchain = Field(...)
    create_date: datetime = Field(..., alias="createDate", description="Date and time the resource was created, in ISO-8601 UTC format.")
    custody_type: CustodyType = Field(..., alias="custodyType")
    account_type: AccountType = Field(..., alias="accountType")
    name: Optional[StrictStr] = Field(None, description="Optional name or description associated with the wallet.")
    ref_id: Optional[StrictStr] = Field(None, alias="refId", description="Optional reference or description used to identify the wallet.")
    state: WalletState = Field(...)
    update_date: datetime = Field(..., alias="updateDate", description="Date and time the resource was last updated, in ISO-8601 UTC format.")
    user_id: Optional[constr(strict=True, max_length=50, min_length=5)] = Field(None, alias="userId", description="Unique system generated identifier for the user.")
    wallet_set_id: StrictStr = Field(..., alias="walletSetId", description="Unique system generated identifier of the wallet's parent wallet set. under.")
    sca_core: Optional[StrictStr] = Field(None, alias="scaCore", description="SCAs can have different versions that have different functionality. SCACore will display the version of the SCA being created. Please refer to developer docs for a list of the versions supported.")
    __properties = ["id", "address", "blockchain", "createDate", "custodyType", "accountType", "name", "refId", "state", "updateDate", "userId", "walletSetId", "scaCore"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WalletResponse:
        """Create an instance of WalletResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WalletResponse:
        """Create an instance of WalletResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WalletResponse.parse_obj(obj)

        _obj = WalletResponse.parse_obj({
            "id": obj.get("id"),
            "address": obj.get("address"),
            "blockchain": obj.get("blockchain"),
            "create_date": obj.get("createDate"),
            "custody_type": obj.get("custodyType"),
            "account_type": obj.get("accountType"),
            "name": obj.get("name"),
            "ref_id": obj.get("refId"),
            "state": obj.get("state"),
            "update_date": obj.get("updateDate"),
            "user_id": obj.get("userId"),
            "wallet_set_id": obj.get("walletSetId"),
            "sca_core": obj.get("scaCore")
        })
        return _obj


