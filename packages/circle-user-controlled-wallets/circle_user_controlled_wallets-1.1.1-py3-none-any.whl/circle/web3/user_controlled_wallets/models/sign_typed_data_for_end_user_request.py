# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class SignTypedDataForEndUserRequest(BaseModel):
    """
    SignTypedDataForEndUserRequest
    """
    wallet_id: StrictStr = Field(..., alias="walletId", description="Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive. For contract deploys this wallet ID will be used as the source.")
    data: StrictStr = Field(..., description="A string represents the typed structured data in EIP-712")
    memo: Optional[StrictStr] = Field(None, description="The human readable explanation for this sign action. Useful for presenting with extra information.")
    __properties = ["walletId", "data", "memo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignTypedDataForEndUserRequest:
        """Create an instance of SignTypedDataForEndUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignTypedDataForEndUserRequest:
        """Create an instance of SignTypedDataForEndUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignTypedDataForEndUserRequest.parse_obj(obj)

        _obj = SignTypedDataForEndUserRequest.parse_obj({
            "wallet_id": obj.get("walletId"),
            "data": obj.get("data"),
            "memo": obj.get("memo")
        })
        return _obj


