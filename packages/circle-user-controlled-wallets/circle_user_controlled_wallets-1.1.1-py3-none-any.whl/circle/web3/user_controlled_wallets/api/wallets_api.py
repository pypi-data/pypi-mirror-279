# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings
import functools
import inspect

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, StrictStr, conint

from typing import Optional

from circle.web3.user_controlled_wallets.models.blockchain import Blockchain
from circle.web3.user_controlled_wallets.models.create_end_user_wallet_request import CreateEndUserWalletRequest
from circle.web3.user_controlled_wallets.models.create_user_wallet200_response import CreateUserWallet200Response
from circle.web3.user_controlled_wallets.models.ext_update_wallet_metadata_request import ExtUpdateWalletMetadataRequest
from circle.web3.user_controlled_wallets.models.get_wallet200_response import GetWallet200Response
from circle.web3.user_controlled_wallets.models.list_wallet_ballance200_response import ListWalletBallance200Response
from circle.web3.user_controlled_wallets.models.list_wallet_nfts200_response import ListWalletNfts200Response
from circle.web3.user_controlled_wallets.models.list_wallets200_response import ListWallets200Response
from circle.web3.user_controlled_wallets.models.update_wallet200_response import UpdateWallet200Response

from circle.web3.user_controlled_wallets.api_client import ApiClient
from circle.web3.user_controlled_wallets.api_response import ApiResponse
from circle.web3.user_controlled_wallets.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


def auto_fill(func):
    functools.wraps(func)

    def wrapper(*args, **kwargs):
        api = args[0]
        if 'x_user_id' in kwargs:
            x_user_token = api.api_client.get_user_token(kwargs['x_user_id'])
            del kwargs['x_user_id']
            kwargs['x_user_token'] = x_user_token
            try:
                sig = inspect.signature(func)
                sig.bind(*args, **kwargs)
            except:
                raise Exception('Please provide ether x_user_id or x_user_token as parameter input.')
        return func(*args, **kwargs)

    return wrapper


class WalletsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @auto_fill
    @validate_arguments
    def create_user_wallet(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], create_end_user_wallet_request : Annotated[CreateEndUserWalletRequest, Field(..., description="walletResponse creation request")], **kwargs) -> CreateUserWallet200Response:  # noqa: E501
        """Create wallets  # noqa: E501

        Generates a challenge for creating a new user-controlled wallet or batch of wallets, specifying blockchain and wallet name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_user_wallet(x_user_token, create_end_user_wallet_request, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param create_end_user_wallet_request: walletResponse creation request (required)
        :type create_end_user_wallet_request: CreateEndUserWalletRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateUserWallet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_user_wallet_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_user_wallet_with_http_info(x_user_token, create_end_user_wallet_request, **kwargs)  # noqa: E501

    @auto_fill
    @validate_arguments
    def create_user_wallet_with_http_info(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], create_end_user_wallet_request : Annotated[CreateEndUserWalletRequest, Field(..., description="walletResponse creation request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create wallets  # noqa: E501

        Generates a challenge for creating a new user-controlled wallet or batch of wallets, specifying blockchain and wallet name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_user_wallet_with_http_info(x_user_token, create_end_user_wallet_request, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param create_end_user_wallet_request: walletResponse creation request (required)
        :type create_end_user_wallet_request: CreateEndUserWalletRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateUserWallet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_user_token',
            'create_end_user_wallet_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_wallet" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_user_token']:
            _header_params['X-User-Token'] = _params['x_user_token']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_end_user_wallet_request'] is not None:
            _body_params = _params['create_end_user_wallet_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateUserWallet200Response",
        }

        return self.api_client.call_api(
            '/user/wallets', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @auto_fill
    @validate_arguments
    def get_wallet(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], id : Annotated[StrictStr, Field(..., description="Wallet ID")], **kwargs) -> GetWallet200Response:  # noqa: E501
        """Get a wallet  # noqa: E501

        Retrieves info for a single user-controlled wallet using it's unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_wallet(x_user_token, id, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param id: Wallet ID (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetWallet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_wallet_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_wallet_with_http_info(x_user_token, id, **kwargs)  # noqa: E501

    @auto_fill
    @validate_arguments
    def get_wallet_with_http_info(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], id : Annotated[StrictStr, Field(..., description="Wallet ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a wallet  # noqa: E501

        Retrieves info for a single user-controlled wallet using it's unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_wallet_with_http_info(x_user_token, id, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param id: Wallet ID (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetWallet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_user_token',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wallet" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_user_token']:
            _header_params['X-User-Token'] = _params['x_user_token']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetWallet200Response",
        }

        return self.api_client.call_api(
            '/wallets/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @auto_fill
    @validate_arguments
    def list_wallet_ballance(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], id : Annotated[StrictStr, Field(..., description="Wallet ID")], include_all : Annotated[Optional[StrictBool], Field(description="Return all recourses with monitored and non-monitored tokens.")] = None, name : Annotated[Optional[StrictStr], Field(description="Filter by token name.")] = None, token_address : Annotated[Optional[StrictStr], Field(description="Filter by token addresses.")] = None, standard : Annotated[Optional[StrictStr], Field(description="Filter by the token standard.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. ")] = None, page_after : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. ")] = None, page_size : Annotated[Optional[conint(strict=True, le=50, ge=1)], Field(description="Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. ")] = None, **kwargs) -> ListWalletBallance200Response:  # noqa: E501
        """Get token balance for a wallet  # noqa: E501

        Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_wallet_ballance(x_user_token, id, include_all, name, token_address, standard, page_before, page_after, page_size, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param id: Wallet ID (required)
        :type id: str
        :param include_all: Return all recourses with monitored and non-monitored tokens.
        :type include_all: bool
        :param name: Filter by token name.
        :type name: str
        :param token_address: Filter by token addresses.
        :type token_address: str
        :param standard: Filter by the token standard.
        :type standard: str
        :param page_before: A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. 
        :type page_before: str
        :param page_after: A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. 
        :type page_after: str
        :param page_size: Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. 
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListWalletBallance200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_wallet_ballance_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_wallet_ballance_with_http_info(x_user_token, id, include_all, name, token_address, standard, page_before, page_after, page_size, **kwargs)  # noqa: E501

    @auto_fill
    @validate_arguments
    def list_wallet_ballance_with_http_info(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], id : Annotated[StrictStr, Field(..., description="Wallet ID")], include_all : Annotated[Optional[StrictBool], Field(description="Return all recourses with monitored and non-monitored tokens.")] = None, name : Annotated[Optional[StrictStr], Field(description="Filter by token name.")] = None, token_address : Annotated[Optional[StrictStr], Field(description="Filter by token addresses.")] = None, standard : Annotated[Optional[StrictStr], Field(description="Filter by the token standard.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. ")] = None, page_after : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. ")] = None, page_size : Annotated[Optional[conint(strict=True, le=50, ge=1)], Field(description="Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get token balance for a wallet  # noqa: E501

        Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_wallet_ballance_with_http_info(x_user_token, id, include_all, name, token_address, standard, page_before, page_after, page_size, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param id: Wallet ID (required)
        :type id: str
        :param include_all: Return all recourses with monitored and non-monitored tokens.
        :type include_all: bool
        :param name: Filter by token name.
        :type name: str
        :param token_address: Filter by token addresses.
        :type token_address: str
        :param standard: Filter by the token standard.
        :type standard: str
        :param page_before: A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. 
        :type page_before: str
        :param page_after: A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. 
        :type page_after: str
        :param page_size: Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. 
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListWalletBallance200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_user_token',
            'id',
            'include_all',
            'name',
            'token_address',
            'standard',
            'page_before',
            'page_after',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_wallet_ballance" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('include_all') is not None:  # noqa: E501
            _query_params.append(('includeAll', _params['include_all']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('token_address') is not None:  # noqa: E501
            _query_params.append(('tokenAddress', _params['token_address']))

        if _params.get('standard') is not None:  # noqa: E501
            _query_params.append(('standard', _params['standard']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('pageBefore', _params['page_before']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('pageAfter', _params['page_after']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_user_token']:
            _header_params['X-User-Token'] = _params['x_user_token']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListWalletBallance200Response",
        }

        return self.api_client.call_api(
            '/wallets/{id}/balances', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @auto_fill
    @validate_arguments
    def list_wallet_nfts(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], id : Annotated[StrictStr, Field(..., description="Wallet ID")], include_all : Annotated[Optional[StrictBool], Field(description="Return all recourses with monitored and non-monitored tokens.")] = None, name : Annotated[Optional[StrictStr], Field(description="Filter by token name.")] = None, token_address : Annotated[Optional[StrictStr], Field(description="Filter by token addresses.")] = None, standard : Annotated[Optional[StrictStr], Field(description="Filter by the token standard.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. ")] = None, page_after : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. ")] = None, page_size : Annotated[Optional[conint(strict=True, le=50, ge=1)], Field(description="Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. ")] = None, **kwargs) -> ListWalletNfts200Response:  # noqa: E501
        """Get NFTs for a wallet  # noqa: E501

        Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_wallet_nfts(x_user_token, id, include_all, name, token_address, standard, page_before, page_after, page_size, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param id: Wallet ID (required)
        :type id: str
        :param include_all: Return all recourses with monitored and non-monitored tokens.
        :type include_all: bool
        :param name: Filter by token name.
        :type name: str
        :param token_address: Filter by token addresses.
        :type token_address: str
        :param standard: Filter by the token standard.
        :type standard: str
        :param page_before: A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. 
        :type page_before: str
        :param page_after: A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. 
        :type page_after: str
        :param page_size: Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. 
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListWalletNfts200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_wallet_nfts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_wallet_nfts_with_http_info(x_user_token, id, include_all, name, token_address, standard, page_before, page_after, page_size, **kwargs)  # noqa: E501

    @auto_fill
    @validate_arguments
    def list_wallet_nfts_with_http_info(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], id : Annotated[StrictStr, Field(..., description="Wallet ID")], include_all : Annotated[Optional[StrictBool], Field(description="Return all recourses with monitored and non-monitored tokens.")] = None, name : Annotated[Optional[StrictStr], Field(description="Filter by token name.")] = None, token_address : Annotated[Optional[StrictStr], Field(description="Filter by token addresses.")] = None, standard : Annotated[Optional[StrictStr], Field(description="Filter by the token standard.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. ")] = None, page_after : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. ")] = None, page_size : Annotated[Optional[conint(strict=True, le=50, ge=1)], Field(description="Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get NFTs for a wallet  # noqa: E501

        Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_wallet_nfts_with_http_info(x_user_token, id, include_all, name, token_address, standard, page_before, page_after, page_size, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param id: Wallet ID (required)
        :type id: str
        :param include_all: Return all recourses with monitored and non-monitored tokens.
        :type include_all: bool
        :param name: Filter by token name.
        :type name: str
        :param token_address: Filter by token addresses.
        :type token_address: str
        :param standard: Filter by the token standard.
        :type standard: str
        :param page_before: A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. 
        :type page_before: str
        :param page_after: A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. 
        :type page_after: str
        :param page_size: Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. 
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListWalletNfts200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_user_token',
            'id',
            'include_all',
            'name',
            'token_address',
            'standard',
            'page_before',
            'page_after',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_wallet_nfts" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('include_all') is not None:  # noqa: E501
            _query_params.append(('includeAll', _params['include_all']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('token_address') is not None:  # noqa: E501
            _query_params.append(('tokenAddress', _params['token_address']))

        if _params.get('standard') is not None:  # noqa: E501
            _query_params.append(('standard', _params['standard']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('pageBefore', _params['page_before']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('pageAfter', _params['page_after']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_user_token']:
            _header_params['X-User-Token'] = _params['x_user_token']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListWalletNfts200Response",
        }

        return self.api_client.call_api(
            '/wallets/{id}/nfts', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @auto_fill
    @validate_arguments
    def list_wallets(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], address : Annotated[Optional[StrictStr], Field(description="Filter by the Address of the wallet.")] = None, blockchain : Annotated[Optional[Blockchain], Field(description="Filter by blockchain.")] = None, wallet_set_id : Annotated[Optional[StrictStr], Field(description="Filter by the wallet set the wallet belongs to.")] = None, ref_id : Annotated[Optional[StrictStr], Field(description="Filter by the reference identifier set on the wallet.")] = None, var_from : Annotated[Optional[datetime], Field(description="Queries items created since the specified date-time (inclusive) in ISO 8601 format.")] = None, to : Annotated[Optional[datetime], Field(description="Queries items created before the specified date-time (inclusive) in ISO 8601 format.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. ")] = None, page_after : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. ")] = None, page_size : Annotated[Optional[conint(strict=True, le=50, ge=1)], Field(description="Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. ")] = None, **kwargs) -> ListWallets200Response:  # noqa: E501
        """List wallets  # noqa: E501

        Retrieves a list of all user-controlled wallets that fit the specified parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_wallets(x_user_token, address, blockchain, wallet_set_id, ref_id, var_from, to, page_before, page_after, page_size, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param address: Filter by the Address of the wallet.
        :type address: str
        :param blockchain: Filter by blockchain.
        :type blockchain: Blockchain
        :param wallet_set_id: Filter by the wallet set the wallet belongs to.
        :type wallet_set_id: str
        :param ref_id: Filter by the reference identifier set on the wallet.
        :type ref_id: str
        :param var_from: Queries items created since the specified date-time (inclusive) in ISO 8601 format.
        :type var_from: datetime
        :param to: Queries items created before the specified date-time (inclusive) in ISO 8601 format.
        :type to: datetime
        :param page_before: A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. 
        :type page_before: str
        :param page_after: A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. 
        :type page_after: str
        :param page_size: Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. 
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListWallets200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_wallets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_wallets_with_http_info(x_user_token, address, blockchain, wallet_set_id, ref_id, var_from, to, page_before, page_after, page_size, **kwargs)  # noqa: E501

    @auto_fill
    @validate_arguments
    def list_wallets_with_http_info(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], address : Annotated[Optional[StrictStr], Field(description="Filter by the Address of the wallet.")] = None, blockchain : Annotated[Optional[Blockchain], Field(description="Filter by blockchain.")] = None, wallet_set_id : Annotated[Optional[StrictStr], Field(description="Filter by the wallet set the wallet belongs to.")] = None, ref_id : Annotated[Optional[StrictStr], Field(description="Filter by the reference identifier set on the wallet.")] = None, var_from : Annotated[Optional[datetime], Field(description="Queries items created since the specified date-time (inclusive) in ISO 8601 format.")] = None, to : Annotated[Optional[datetime], Field(description="Queries items created before the specified date-time (inclusive) in ISO 8601 format.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. ")] = None, page_after : Annotated[Optional[StrictStr], Field(description="A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. ")] = None, page_size : Annotated[Optional[conint(strict=True, le=50, ge=1)], Field(description="Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List wallets  # noqa: E501

        Retrieves a list of all user-controlled wallets that fit the specified parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_wallets_with_http_info(x_user_token, address, blockchain, wallet_set_id, ref_id, var_from, to, page_before, page_after, page_size, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param address: Filter by the Address of the wallet.
        :type address: str
        :param blockchain: Filter by blockchain.
        :type blockchain: Blockchain
        :param wallet_set_id: Filter by the wallet set the wallet belongs to.
        :type wallet_set_id: str
        :param ref_id: Filter by the reference identifier set on the wallet.
        :type ref_id: str
        :param var_from: Queries items created since the specified date-time (inclusive) in ISO 8601 format.
        :type var_from: datetime
        :param to: Queries items created before the specified date-time (inclusive) in ISO 8601 format.
        :type to: datetime
        :param page_before: A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter. 
        :type page_before: str
        :param page_after: A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore. 
        :type page_after: str
        :param page_size: Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself. 
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListWallets200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_user_token',
            'address',
            'blockchain',
            'wallet_set_id',
            'ref_id',
            'var_from',
            'to',
            'page_before',
            'page_after',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_wallets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('address') is not None:  # noqa: E501
            _query_params.append(('address', _params['address']))

        if _params.get('blockchain') is not None:  # noqa: E501
            _query_params.append(('blockchain', _params['blockchain'].value))

        if _params.get('wallet_set_id') is not None:  # noqa: E501
            _query_params.append(('walletSetId', _params['wallet_set_id']))

        if _params.get('ref_id') is not None:  # noqa: E501
            _query_params.append(('refId', _params['ref_id']))

        if _params.get('var_from') is not None:  # noqa: E501
            if isinstance(_params['var_from'], datetime):
                _query_params.append(('from', _params['var_from'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('from', _params['var_from']))

        if _params.get('to') is not None:  # noqa: E501
            if isinstance(_params['to'], datetime):
                _query_params.append(('to', _params['to'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('to', _params['to']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('pageBefore', _params['page_before']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('pageAfter', _params['page_after']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_user_token']:
            _header_params['X-User-Token'] = _params['x_user_token']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListWallets200Response",
        }

        return self.api_client.call_api(
            '/wallets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @auto_fill
    @validate_arguments
    def update_wallet(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], id : Annotated[StrictStr, Field(..., description="Wallet ID")], ext_update_wallet_metadata_request : Annotated[ExtUpdateWalletMetadataRequest, Field(..., description="Wallet metadata update request")], **kwargs) -> UpdateWallet200Response:  # noqa: E501
        """Update a wallet  # noqa: E501

        Updates info for a single user-controlled wallet using it's unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_wallet(x_user_token, id, ext_update_wallet_metadata_request, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param id: Wallet ID (required)
        :type id: str
        :param ext_update_wallet_metadata_request: Wallet metadata update request (required)
        :type ext_update_wallet_metadata_request: ExtUpdateWalletMetadataRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdateWallet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_wallet_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_wallet_with_http_info(x_user_token, id, ext_update_wallet_metadata_request, **kwargs)  # noqa: E501

    @auto_fill
    @validate_arguments
    def update_wallet_with_http_info(self, x_user_token : Annotated[StrictStr, Field(..., description="Unique system generated JWT session token for specific user.")], id : Annotated[StrictStr, Field(..., description="Wallet ID")], ext_update_wallet_metadata_request : Annotated[ExtUpdateWalletMetadataRequest, Field(..., description="Wallet metadata update request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a wallet  # noqa: E501

        Updates info for a single user-controlled wallet using it's unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_wallet_with_http_info(x_user_token, id, ext_update_wallet_metadata_request, async_req=True)
        >>> result = thread.get()

        :param x_user_token: Unique system generated JWT session token for specific user. (required)
        :type x_user_token: str
        :param id: Wallet ID (required)
        :type id: str
        :param ext_update_wallet_metadata_request: Wallet metadata update request (required)
        :type ext_update_wallet_metadata_request: ExtUpdateWalletMetadataRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdateWallet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_user_token',
            'id',
            'ext_update_wallet_metadata_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_wallet" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_user_token']:
            _header_params['X-User-Token'] = _params['x_user_token']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ext_update_wallet_metadata_request'] is not None:
            _body_params = _params['ext_update_wallet_metadata_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "UpdateWallet200Response",
        }

        return self.api_client.call_api(
            '/wallets/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
