# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import circle.web3.user_controlled_wallets
from circle.web3.user_controlled_wallets.models.estimate_transaction_fee_response import EstimateTransactionFeeResponse  # noqa: E501
from circle.web3.user_controlled_wallets.rest import ApiException

class TestEstimateTransactionFeeResponse(unittest.TestCase):
    """EstimateTransactionFeeResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test EstimateTransactionFeeResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EstimateTransactionFeeResponse`
        """
        model = circle.web3.user_controlled_wallets.models.estimate_transaction_fee_response.EstimateTransactionFeeResponse()  # noqa: E501
        if include_optional :
            return EstimateTransactionFeeResponse(
                high = circle.web3.user_controlled_wallets.models.estimated_transaction_fee.EstimatedTransactionFee(
                    gas_limit = '21000', 
                    gas_price = '', 
                    max_fee = '5.935224468', 
                    priority_fee = '1.022783914', 
                    base_fee = '1.022783914', ), 
                low = circle.web3.user_controlled_wallets.models.estimated_transaction_fee.EstimatedTransactionFee(
                    gas_limit = '21000', 
                    gas_price = '', 
                    max_fee = '5.935224468', 
                    priority_fee = '1.022783914', 
                    base_fee = '1.022783914', ), 
                medium = circle.web3.user_controlled_wallets.models.estimated_transaction_fee.EstimatedTransactionFee(
                    gas_limit = '21000', 
                    gas_price = '', 
                    max_fee = '5.935224468', 
                    priority_fee = '1.022783914', 
                    base_fee = '1.022783914', ), 
                call_gas_limit = '69222', 
                verification_gas_limit = '56863', 
                pre_verification_gas = '44112'
            )
        else :
            return EstimateTransactionFeeResponse(
        )
        """

    def testEstimateTransactionFeeResponse(self):
        """Test EstimateTransactionFeeResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
