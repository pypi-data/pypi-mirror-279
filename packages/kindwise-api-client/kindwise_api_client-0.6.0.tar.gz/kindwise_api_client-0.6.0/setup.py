# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['kindwise', 'kindwise.tests']

package_data = \
{'': ['*'],
 'kindwise': ['resources/*'],
 'kindwise.tests': ['resources/images/*']}

install_requires = \
['pillow', 'python-dotenv', 'requests']

setup_kwargs = {
    'name': 'kindwise-api-client',
    'version': '0.6.0',
    'description': 'Python SDK toolkit for integrating Kindwise API',
    'long_description': '# Kindwise sdk for python\n\nPython SDK toolkit for integrating Kindwise API into your application. This Python SDK provides a convenient way to\ninteract with the Kindwise API for plant, insect, and mushroom identification. The SDK is organized into different\nmodules, each corresponding to a specific domain ([plant](https://web.plant.id/plant-identification-api/),\n[insect](https://www.kindwise.com/insect-id), [mushroom](https://www.kindwise.com/mushroom-id)). You can always use our\nAPI without our SDK, the documentation can be found on the following links:\n\n- [plant.id](https://plant.id/docs)\n- [insect.id](https://insect.kindwise.com/docs)\n- [mushroom.id](https://mushroom.kindwise.com/docs)\n- [crop.health](https://crop.kindwise.com/docs)\n\n## Setup\n\n### Install\n\n```bash\npip install kindwise\n```\n\n### API key\n\nThe API key serves to identify your account and is required to make requests to the API. Get API key at\n[admin.kindwise.com](https://admin.kindwise.com).\n\n## Quick Start\n\nTo use Kindwise API, an active API key is needed. See the section [above](#api-key) on how to get an API key.\n\n```python\nfrom kindwise import PlantApi, PlantIdentification, UsageInfo\n\n# initialize plant.id api\n# "PLANT_API_KEY" environment variable can be set instead of specifying api_key\napi = PlantApi(api_key=\'your_api_key\')\n\n# get usage information\nusage: UsageInfo = api.usage_info()\n\n# identify plant by image\nlatitude_longitude = (49.20340, 16.57318)\n# pass the image as a path\nimage_path = \'path/to/plant_image.jpg\'\n# make identification\nidentification: PlantIdentification = api.identify(image_path, latitude_longitude=latitude_longitude)\n\n# get identification by a token with changed views\n# this method can be used to modify additional information in identification or to get identification from database\n# also works with identification.custom_id\nidentification_with_different_views: PlantIdentification = api.get_identification(identification.access_token)\n\n# delete identification\napi.delete_identification(identification)  # also works with identification.access_token or identification.custom_id\n```\n\n## Structure\n\nSDK supports the following Kindwise systems:\n\n- [plant.id](https://web.plant.id/plant-identification-api/)\n- [insect.id](https://insect.kindwise.com)\n- [mushroom.id](https://mushroom.kindwise.com)\n- [crop.health](https://crop.kindwise.com)\n\nEach system has its class, which is used to make requests to the API. Each class has the following methods:\n\n| method                                                    | description                                                                         | return type        | plant.id           | insect.id          | mushroom.id        | crop.health        |\n|-----------------------------------------------------------|-------------------------------------------------------------------------------------|--------------------|--------------------|--------------------|--------------------|--------------------|\n| [`identify`](#identify)                                   | create new identification                                                           | `Identification`   | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| [`get_identification`](#get_identification)               | get identification by token                                                         | `Identification`   | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| [`delete_identification`](#delete_identification)         | delete identification by token                                                      | boolean            | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| [`usage_info`](#usage_info)                               | get api key usage information                                                       | `UsageInfo`        | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| [`feedback`](#feedback)                                   | send feedback for identification                                                    | boolean            | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| [`health_assessment`](#health_assessment)                 | create health assessment identification                                             | `HealthAssessment` | :white_check_mark: | :x:                | :x:                | :x:                |\n| [`get_health_assessment`](#get_health_assessment)         | get health assessment identification                                                | `HealthAssessment` | :white_check_mark: | :x:                | :x:                | :x:                |\n| [`delete_health_assessment`](#delete_health_assessment)   | delete health assessment                                                            | boolean            | :white_check_mark: | :x:                | :x:                | :x:                |\n| [`available_details`](#available_details)                 | details which can be used to specify additional information for `identify`          | dict               | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| [`available_disease_details`](#available_disease_details) | details which can be used to specify additional information for `health_assessment` | dict               | :white_check_mark: | :x:                | :x:                | :x:                |\n| [`search`](#search)                                       | search for entity by query param in our database                                    | `SearchRecord`     | :white_check_mark: | :white_check_mark: | :white_check_mark: | :x:                |\n| [`get_kb_detail`](#get_kb_detail)                         | returns information about entity                                                    | `dict`             | :white_check_mark: | :white_check_mark: | :white_check_mark: | :x:                |\n| [`ask_question`](#ask_question)                           | conversation about the identification                                               | `Conversation`     | :white_check_mark: | :x:                | :x:                | :x:                |\n| [`get_conversation`](#get_conversation)                   | retrieve the identification\'s conversation                                          | `Conversation`     | :white_check_mark: | :x:                | :x:                | :x:                |\n| [`conversation_feedback`](#conversation_feedback)         | set conversation\'s feedback                                                         | `Conversation`     | :white_check_mark: | :x:                | :x:                | :x:                |\n| [`delete_conversation`](#delete_conversation)             | deletes the conversation                                                            | `Conversation`     | :white_check_mark: | :x:                | :x:                | :x:                |\n\nDatetime objects are created by method `datetime.fromtimestamp(timestamp)`. This means that datetime objects are in\nlocal timezone.\n\n## Documentation\n\n### Identification\n\n#### available_details\n\nReturns details which can be used to specify additional information for `identify` method. `\n\n```python\nfrom kindwise import PlantApi\n\napi = PlantApi()\n\navailable_details = api.available_details()\n```\n\n#### identify\n\nCreates a new identification. In one identification, you can include up to 5 images.\n\n```python\nimport base64\nfrom datetime import datetime\n\nfrom kindwise import PlantApi, PlantIdentification, ClassificationLevel\n\napi = PlantApi(api_key=\'your_api_key\')\n# this creates one identification composed of 5 images(not 5 different identifications)\n#\n# as input image is accepted path to an image(str / pathlib.Path), base64 encoded stream(bytes/string), stream(bytes/string),\n# or file object(supports read,seek and mode methods)\n# or PIL.Image.Image object\n# or list of images\nimages = [\'path/to/image1.jpg\', \'path/to/image2.jpg\', \'path/to/image3.jpg\', \'path/to/image4.jpg\', \'path/to/image5.jpg\']\n\n# details included in identification\ndetails = [\'common_names\', \'taxonomy\', \'image\']\n\n# disease details included in health identification(only used if health=True)\n# disease_details parameter is only available for plant.id\ndisease_details = [\'local_name\', \'description\', \'treatment\', \'cause\']\n\n# specify up to 3 languages\nlanguage = [\'en\', \'cs\']\n\n# default for similar_images is True\nsimilar_images = True\n\n# where was an image taken\nlatitude_longitude = (49.20340, 16.57318)\n\n# include health assessment in your identification by specifying health=\'all\',\n# also use health=\'only\' to get HealthAssessment(health assessment only)\n# health assessment is only available for plant.id\nhealth = \'all\'\n\n# custom id is used to identify identification in your system, but can be replaced with access_token\ncustom_id = 123\n\n# when was an image taken, datetime can be specified as a datetime object, timestamp, or string in ISO format\ndate_time = datetime.now()\n\n# default image size is 1500px, can be turned off by setting max_image_size to None\n# be aware that our API has limit 25Mpx(e.g. 5000px x 5000px)\nmax_image_size = 1500\n\n# specify into what depth should be the plant classified\n# choose from ClassificationLevel.SPECIES, ClassificationLevel.GENUS, ClassificationLevel.ALL\n# default is ClassificationLevel.SPECIES\nclassification_level = ClassificationLevel.SPECIES\n# in case of need to merge results for different taxon levels yourself, set classification_raw=True\n# be aware that the result will be in type kindwise.models.RawPlantIdentification\nclassification_raw = False\n# if our api will be ahead of this sdk and you do not want to wait for update,\n# specify extra_get_params or extra_post_params\nextra_get_params = None  # default\nextra_post_params = None  # default\n\nidentification: PlantIdentification = api.identify(\n    images,\n    details=details,\n    disease_details=disease_details,\n    language=language,\n    similar_images=similar_images,\n    latitude_longitude=latitude_longitude,\n    health=health,\n    custom_id=custom_id,\n    date_time=date_time,\n    max_image_size=max_image_size,\n    classification_level=classification_level,\n    classification_raw=classification_raw,\n    extra_get_params=extra_get_params,\n    extra_post_params=extra_post_params,\n)\n\n# identification created from stream\nwith open(\'path/to/image.jpg\', \'rb\') as image:\n    identification_from_stream: PlantIdentification = api.identify(image.read())\n\n# identification created from file object\nwith open(\'path/to/image.jpg\', \'rb\') as image:\n    identification_from_file: PlantIdentification = api.identify(image)\n\n# identification created from base64 encoded image\nwith open(\'path/to/image.jpg\', \'rb\') as image:\n    image_in_base64 = base64.b64encode(image.read())\n    identification_from_base64: PlantIdentification = api.identify(image)\n\n# identification created from PIL.Image.Image object\nfrom PIL import Image\n\nimage = Image.open(\'path/to/image.jpg\')\nidentification_from_pil: PlantIdentification = api.identify(image)\n\n# identification created from image url\nimage_url = \'https://api.gbif.org/v1/image/cache/fit-in/500x/occurrence/4596837568/media/33ff3ad210e56b73ade6f9fe622c650e\'\nidentification_from_url: PlantIdentification = api.identify(image_url)\n```\n\nWhen you don\'t want to wait until the identification is finished, you can specify `asynchronous=True` and\nget `access_token`  or `custom_id` if specified and retrieve the answer later.\n\n```python\nfrom kindwise import PlantApi, PlantIdentification\n\napi = PlantApi(api_key=\'your_api_key\')\n\nimage = \'path/to/image.jpg\'\nidentification: PlantIdentification = api.identify(image, asynchronous=True)\n# now do something else\n# ...\n# and later get identification by access_token or custom_id\nidentification: PlantIdentification = api.get_identification(identification.access_token, details=[\'common_names\'])\n```\n\n#### get_identification\n\nGet identification by token. You can specify which details you want to get. We store your identifications for 6 months.\n\n```python\nfrom kindwise import PlantApi, PlantIdentification\n\napi = PlantApi(api_key=\'your_api_key\')\n\naccess_token = \'identification_access_token\'\n# details included in identification, can be different from used in identification create\ndetails = [\'common_names\', \'taxonomy\', \'image\']\n# language can also differ from used in identification create\nlanguage = \'de\'\nidentification: PlantIdentification = api.get_identification(access_token, details=details, language=language)\n```\n\n#### delete_identification\n\nDeletes identification from our database. You can specify identification by access_token or custom_id.\n\n```python\nfrom kindwise import PlantApi\n\napi = PlantApi(api_key=\'your_api_key\')\n\ncustom_id = 123  # also works with access_token or Identification object\napi.delete_identification(custom_id)\n```\n\n#### usage_info\n\nGives you information about your api key usage.\n\n```python\nfrom kindwise import PlantApi, UsageInfo\n\napi = PlantApi(api_key=\'your_api_key\')\n\nusage_info: UsageInfo = api.usage_info()\n```\n\n#### feedback\n\nSend feedback for identification. You can specify a comment(string) or rating(int) in feedback. At least one of comment\nand rating must be specified. You can specify identification by access_token or custom_id.\n\n```python\nfrom kindwise import PlantApi\n\napi = PlantApi(api_key=\'your_api_key\')\n\ncustom_id = 123  # also works with access_token or Identification object\napi.feedback(custom_id, comment=\'comment\', rating=5)\n```\n\n### Health Assessment\n\n#### available_disease_details\n\nReturns details which can be used to specify additional information for `health_assessment` method. Only available for\nplant.id.\n\n```python\nfrom kindwise import PlantApi\n\napi = PlantApi()\n\navailable_disease_details = api.available_disease_details()\n```\n\n#### health_assessment\n\nReturns only health assessment for identification. Health assessment is only available for plant.id. `health_assessment`\nmethod is similar to `identify` method, but it returns only health assessment. Details differs for each system.\n\n```python\nfrom datetime import datetime\n\nfrom kindwise import PlantApi, HealthAssessment\n\napi = PlantApi(api_key="your_api_key")\n# the same as in identify method\nimages = [\n    "path/to/image1.jpg",\n    "path/to/image2.jpg",\n    "path/to/image3.jpg",\n    "path/to/image4.jpg",\n    "path/to/image5.jpg",\n]\n\n# details included in identification\ndetails = ["local_name", "description", "treatment", "cause", "image"]\n\n# specify up to 3 languages\nlanguage = ["en", "cs"]\n\n# default for similar_images is True\nsimilar_images = True\n\n# where was an image taken\nlatitude_longitude = (49.20340, 16.57318)\n\n# custom id is used to identify identification in your system, but can be replaced with access_token\ncustom_id = 123\n\n# list of suggested diseases also contains general diseases such as "Abiotic", default is False\nfull_disease_list = True\n\n# when was an image taken, datetime can be specified as a datetime object, timestamp, or string in ISO format\ndate_time = datetime.now()\n\n# default image size is 1500px, can be turned off by setting max_image_size to None\n# be aware that our API has limit 25Mpx(e.g. 5000px x 5000px)\nmax_image_size = 1500\n\n# if our api will be ahead of this sdk and you do not want to wait for update,\n# specify extra_get_params or extra_post_params\nextra_get_params = None  # default\nextra_post_params = None  # default\n\nidentification: HealthAssessment = api.health_assessment(\n    images,\n    details=details,\n    language=language,\n    similar_images=similar_images,\n    latitude_longitude=latitude_longitude,\n    custom_id=custom_id,\n    full_disease_list=full_disease_list,\n    date_time=date_time,\n    max_image_size=max_image_size,\n)\n\n```\n\nWhen you don\'t want to wait until the identification is finished, you can specify `asynchronous=True` similar\nto [`identify`](#identify) method.\n\n#### get_health_assessment\n\nGet a health assessment for identification. You can specify which details you want to get. We store your identifications\nfor 6 months.\n\n```python\nfrom kindwise import PlantApi, HealthAssessment\n\napi = PlantApi(api_key=\'your_api_key\')\n\naccess_token = \'identification_access_token\'\n\n# details included in identification can be different from those used in identification creation\ndetails = [\'classification\', \'local_name\']\n\n# language can also differ from what is used in identification creation\nlanguage = \'de\'\n\nfull_disease_list = False\n\nidentification: HealthAssessment = api.get_health_assessment(\n    access_token,\n    details=details,\n    language=language,\n    full_disease_list=full_disease_list\n)\n```\n\n#### delete_health_assessment\n\nDelete health assessment for identification.\n\n```python\nfrom kindwise import PlantApi\n\napi = PlantApi(api_key=\'your_api_key\')\n\ncustom_id = 123  # also works with access_token or HealthAssessment object\napi.delete_health_assessment(custom_id)\n```\n\n### Knowledge Base\n\n#### search\n\nSearch for entity(e.g. `Taraxacum`) by query param in our database. You can specify language, limit and database type.\n\n```python\nfrom kindwise import PlantApi, SearchResult, PlantKBType\n\napi = PlantApi(api_key=\'your_api_key\')\nkb_type = PlantKBType.PLANTS\nlimit = 10\nsearch_result: SearchResult = api.search(\'Taraxacum\', language=\'en\', kb_type=kb_type, limit=limit)\n```\n\n#### get_kb_detail\n\nReturns information about entity(e.g. `Taraxacum`) in our database. You can specify in what language you want the\nresult.\n\n```python\nfrom kindwise import PlantApi, SearchResult\n\napi = PlantApi(api_key=\'your_api_key\')\nsearch_result: SearchResult = api.search(\'Taraxacum\', language=\'en\', limit=1)\n\n# details can also be specified as a list of strings\ndetails = \'common_names,taxonomy\'\n\nentity_details = api.get_kb_detail(search_result.entities[0].access_token, details, language=\'de\')\n```\n\n### Conversation\n\n#### ask_question\n\nAsk a question to our ChatBot. ChatBot supports multiple backends and its configuration can be modified.\n\n```python\nfrom kindwise import PlantApi, Conversation\n\napi = PlantApi(api_key="your_api_key")\n\n# Firstly you need to have an access_token of identification about which you want to ask the question\nidentification = "identification_access_token"\n\n# question is a question that you want to ask the ChatBot\nquestion = "Is this plant edible?"\n# model is a parameter that controls the model used for generating the answer. List of models can be found in the documentation.\nmodel = "gpt-3.5-turbo.demo"\n# You can specify an app name that will be used for chat-bot to specify who is he\napp_name = "my_app"\n# You can specify a prompt that will be used together with our prompt to generate the answer.\nprompt = "You are an assistant for a plant identification app. Please answer the user\'s question."\n# Temperature is a parameter that controls the randomness of the model.\n# The higher the temperature, the more random the output.\ntemperature = 0.0\n\n# The configuration parameters: model, app_name, prompt, temperature are optional\n# and can be specified only for the first question.\nconversation: Conversation = api.ask_question(\n    identification,\n    question,\n    model=model,\n    app_name=app_name,\n    prompt=prompt,\n    temperature=temperature,\n)\n\n# You can set a conversation\'s feedback(JSON)\napi.conversation_feedback(identification, {\'rating\': 5, \'comment\': \'Great conversation!\'})\n\n# You can retrieve the conversation later\n\n\n# You can also delete the conversation\napi.delete_conversation(identification)\n```\n\n#### get_conversation\n\n```python\nfrom kindwise import PlantApi, Conversation\n\napi = PlantApi(api_key=\'your_api_key\')\n\n# Firstly you need to have an access_token of identification about which you want to ask the question\nidentification = "identification_access_token"\n\nconversation: Conversation = api.get_conversation(identification)\n```\n\n#### conversation_feedback\n\n```python\nfrom kindwise import PlantApi, Conversation\n\napi = PlantApi(api_key=\'your_api_key\')\n\n# Firstly you need to have an access_token of identification about which you want to ask the question\nidentification = "identification_access_token"\n\n# You can set a conversation\'s feedback(JSON)\napi.conversation_feedback(identification, {\'rating\': 5, \'comment\': \'Great conversation!\'})\n```\n\n#### delete_conversation\n\n```python\nfrom kindwise import PlantApi, Conversation\n\napi = PlantApi(api_key=\'your_api_key\')\n\n# Firstly you need to have an access_token of identification about which you want to ask the question\nidentification = "identification_access_token"\n\n# You can also delete the conversation\napi.delete_conversation(identification)\n```\n',
    'author': 'Simon Plhak',
    'author_email': 'simon.plhak@flowerchecker.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/flowerchecker/kindwise',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
