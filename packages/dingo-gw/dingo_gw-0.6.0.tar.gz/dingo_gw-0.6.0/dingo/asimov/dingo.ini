################################################################################
## Calibration arguments
################################################################################

calibration-model=None
spline-calibration-nodes=10
spline-calibration-curves=1000
spline-calibration-envelope-dict = { {% if production.meta contains "calibration" %} {% for key, value in production.meta['calibration'].items() %} {{ key }}:{{ value }}, {% endfor %} {% endif %} }


################################################################################
## Data generation arguments
################################################################################

trigger-time= {{ production.meta['event time'] }} 
data-dict = { {% if production.meta contains "files" %} {% for key, value in production.meta['data']["files"].items() %} {{ key }}:{{ value }}, {% endfor %} {% endif %} }
channel-dict = { {% if production.meta['interferometers'] contains "H1" %}H1:{{ production.meta['data']['channels']['H1'] }},{% endif %} {% if production.meta['interferometers'] contains "L1" %}L1:{{ production.meta['data']['channels']['L1'] }},{% endif %}{% if production.meta['interferometers'] contains "V1" %}V1:{{production.meta['data']['channels']['V1'] }}{% endif %} }


################################################################################
## Detector arguments
################################################################################

detectors= [ {% if production.meta['interferometers'] contains "H1" %}H1{% endif %}{% if production.meta['interferometers'] contains "L1" %}, L1{% endif %}{% if production.meta['interferometers'] contains "V1" %}, V1{% endif %} ]
psd-length = {{production.meta["psd length"]}}

################################################################################
##  Job submission arguments
################################################################################

accounting = {{ production.meta["scheduler"]["accounting group"] }} # ligo.dev.o3.cbc.pe.dingo
accounting-user = {{ production.meta["scheduler"]["accounting user"] }}
label={{ production.name }} 
local = False
local-generation=True
outdir={{ production.rundir }} 
request-disk={{production.meta["scheduler"]["request disk"]}}
request-memory={{production.meta["scheduler"]["request memory"]}}
n-parallel= {{ production.meta["scheduler"]["n parallel"] }}
request-cpus-importance-sampling = {{ production.meta["scheduler"]["request cpus importance sampling"] }}
sampling-requirements = [TARGET.CUDAGlobalMemoryMb>{{ production.meta["scheduler"]["global CUDA memory"] }} ]
simple-submission = False

################################################################################
##  Sampler arguments
################################################################################

model = {{ production.meta['networks']['model']}}
model-init = {{ production.meta['networks']['model init']}}
recover-log-prob = true
device = 'cuda'
num-gnpe-iterations = {{ production.meta["sampler"]["num gnpe iterations"] }}
num-samples = {{ production.meta["sampler"]["num samples"] }}
batch-size = {{ production.meta["sampler"]["batch size"] }}

################################################################################
## Extra arguments
################################################################################

environment-variables={GWDATAFIND_SERVER : datafind.igwn.org} 