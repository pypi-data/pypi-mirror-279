# -*- coding: utf-8 -*-
def features(ft, data):
    data[0] = (ft.get("length") - 90.22617266187049) / 60.92023402293393
    data[1] = (ft.get("speed") - 8.338) / 0.21075103795711186
    data[2] = (ft.get("num_foes") - 6.054676258992806) / 2.530368728542543
    data[3] = (ft.get("num_lanes") - 1.0) / 1.0
    data[4] = (ft.get("junction_inc_lanes") - 3.181294964028777) / 0.47249046967264163
    data[5] = ft.get("change_speed")
    data[6] = ft.get("dir_l")
    data[7] = ft.get("dir_r")
    data[8] = ft.get("dir_s")
    data[9] = ft.get("dir_multiple_s")
    data[10] = ft.get("dir_exclusive")
    data[11] = ft.get("priority_lower")
    data[12] = ft.get("priority_equal")
    data[13] = ft.get("priority_higher")
    data[14] = ft.get("num_to_links")
    data[15] = ft.get("change_num_lanes")
    data[16] = ft.get("is_secondary_or_higher")
    data[17] = ft.get("is_primary_or_higher")
    data[18] = ft.get("is_motorway")
    data[19] = ft.get("is_link")


params = [0.9305278304345926, 0.9043229043683589, 0.8985526110903621, 0.9191080983457031, 0.8907142857142857,
          0.940893110206543, 0.884, 0.9613095238095237, 0.9228423007791429, 0.8300000000000001, 0.8943438766603578,
          0.8769191919191919, 0.9264409508645753, 0.9484851130107215, 0.9340312849353027, 0.9124578901257473,
          0.8582051282051282, 0.909797759034444, 0.9344293563579279, 0.9226230642742272, 0.951236987818383,
          0.917750933706816, 0.858125, 0.8967592592592594, 0.9086388395636742, 0.9229635143482734, 0.9413541666666668,
          0.9222546377233879, 0.9531507936507936, 0.884, 0.9232737170765741, 0.9420366908884765, 0.8543589743589742,
          0.9058668134916806, 0.8738095238095238, 0.9366928945237768, 0.86, 0.9207508674231751, 0.902090368605191,
          0.8525, 0.9387968584122431, 0.9705454545454547, 0.9141657905747677, 0.9335666107613368, 0.8948620046620046,
          0.9352028347028346, 0.8962287664795469, 0.9126794765405561, 0.9374504827323975, 0.86, 0.8985344537815128,
          0.98, 0.9234912715260929, 0.901185165083988, 0.8672172619047619, 0.8771428571428571, 0.9380861378764609,
          0.9238785164707894, 0.9038379914529914, 0.9308401447673033, 0.9036971596960651, 0.9195601851851853,
          0.8907142857142857, 0.9449098639455782, 0.9331651882924081, 0.8937773115773116, 0.9119973042830187,
          0.8885302763080541, 0.83, 0.9346947265205245, 0.9133718589362877, 0.937355790859467, 0.8887647058823529,
          0.8300000000000001, 0.9186991165034641, 0.8970945022948749, 0.8804879968516333, 0.9225565663726105,
          0.9377266325085472, 0.8951074099511598, 0.9413564497300451, 0.8849072456094779, 0.9046265735601252,
          0.8837777777777778, 0.9303421225116348, 0.9277892156862745, 0.9638080357142857, 0.9221160733206191,
          0.9445047225501771, 0.8547619047619047, 0.9026749569833273, 0.9355929043062932, 0.8971044417767108, 0.86,
          0.9075397546897547, 0.9309147201178452, 0.8998934923670057, 0.9221474519632414, 0.9345637509256911,
          0.949569130216189, 0.86, 0.98, 0.9214163729704636, 0.8639583333333333, 0.9078645868020868, 0.84,
          0.9252300192648132, 0.9377153337399736, 0.8929320309320309, 0.9321039755074404, 0.9037339153505353,
          0.9217383498854088, 0.9336417130112384, 0.9115921985815603, 0.9503561539035675, 0.8935294117647059,
          0.9270503017111714, 0.8522222222222222, 0.96, 0.8868765902687469, 0.9479472302388969, 0.9335912807562808,
          0.9060185223208942, 0.9299265911751908, 0.8956062610229277, 0.9295456775456773, 0.9033918642408219,
          0.9238201058201057, 0.905, 0.9398998078132692, 0.9082240896358543, 0.9023313797313797, 0.9359469193219193,
          0.9067863772258606, 0.8588888888888889, 0.9291570194691746, 0.9518617724867722, 0.8841058823529412,
          0.9321543507774276, 0.9127678571428571, 0.9030415850854671, 0.923777452511059, 0.9369167386012045,
          0.9491933871587849, 0.86, 0.9063899529042386, 0.932301291523647, 0.8743939393939395, 0.9100911547428562,
          0.9283333333333333, 0.9591666666666667, 0.8682142857142857, 0.9325253360629007, 0.9209195481042254,
          0.947332336523126, 0.8856660387634963, 0.9020793679922561, 0.9382138501742161, 0.9264073119617818,
          0.9534775641025638, 0.9177784002489885, 0.9124728676341581, 0.9362699437051292, 0.9087866330789074,
          0.8616666666666667, 0.9429917800453514, 0.963125, 0.84, 0.9332464645151662, 0.9336905432275509,
          0.9113936507936508, 0.9006994513923483, 0.9248823996265172, 0.8738095238095238, 0.9298310151111443,
          0.9396822787848432, 0.8984040479987849, 0.9333993081128117, 0.825, 0.9111644099710055, 0.9400266290726816,
          0.9102272727272727, 0.84, 0.9446908480980647, 0.9368222222222222, 0.8731746031746032, 0.8952777777777777,
          0.9421804004595103, 0.881712962962963, 0.9113632939482633, 0.86, 0.9362446946435916, 0.9040221947364804,
          0.9315219315854395, 0.8615432098765433, 0.9094983595636535, 0.8738095238095238, 0.86, 0.9384398451789752,
          0.8943360079074365, 0.9385057563648473, 0.893085162832337, 0.91455450967502, 0.9366619478712507, 0.91,
          0.9642476190476191, 0.9457244047619046, 0.8869013278388279, 0.9335353084415584, 0.8959724997224997,
          0.9131430444299826, 0.8738095238095238, 0.86, 0.9398375871153526, 0.8533333333333334, 0.9023309659181148,
          0.917110310307508, 0.9319668368911791, 0.9529848484848483, 0.9040661764705883]


def score(params, inputs):
    if inputs[0] <= 0.37251707911491394:
        if inputs[7] <= 0.5:
            if inputs[0] <= -0.019388840068131685:
                var0 = params[0]
            else:
                var0 = params[1]
        else:
            if inputs[0] <= -0.5582902729511261:
                var0 = params[2]
            else:
                var0 = params[3]
    else:
        if inputs[0] <= 4.441608428955078:
            if inputs[2] <= -1.0096063315868378:
                var0 = params[4]
            else:
                var0 = params[5]
        else:
            var0 = params[6]
    if inputs[0] <= -0.6265762746334076:
        if inputs[7] <= 0.5:
            if inputs[0] <= -1.1603890657424927:
                var1 = params[7]
            else:
                var1 = params[8]
        else:
            if inputs[12] <= 0.5:
                var1 = params[9]
            else:
                var1 = params[10]
    else:
        if inputs[10] <= 0.5:
            var1 = params[11]
        else:
            if inputs[0] <= 1.3471522331237793:
                var1 = params[12]
            else:
                var1 = params[13]
    if inputs[0] <= 0.1900653839111328:
        if inputs[10] <= 0.5:
            var29 = params[214]
        else:
            if inputs[0] <= -0.6038416028022766:
                var29 = params[215]
            else:
                var29 = params[216]
    else:
        if inputs[0] <= 3.6622287034988403:
            if inputs[0] <= 1.4325917959213257:
                var29 = params[217]
            else:
                var29 = params[218]
        else:
            var29 = params[219]
    return ( var0 + var1 + ...) * 0.03333333333333333


def batch_loss(params, inputs, targets):
    error = 0
    for x, y in zip(inputs, targets):
        preds = score(params, x)
        error += (preds - y) ** 2
    return error
