# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from digitaleye_msgs/ConstantsConformance.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConstantsConformance(genpy.Message):
  _md5sum = "ada2b7ef9690344965d2fdef49605c1c"
  _type = "digitaleye_msgs/ConstantsConformance"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# UAV STATE
uint32 UAV_ST_UNKNOWN=9300
uint32 UAV_ST_NOT_READY=9301
uint32 UAV_ST_READY_TO=9302 # READY TO TAKE-OFF
uint32 UAV_ST_TAKING_OFF=9303
uint32 UAV_ST_FLYING=9304
uint32 UAV_ST_HELD=9305
uint32 UAV_ST_LANDING=9306

# UAV MESSAGES
uint32 UAV_BOOKED=9100
uint32 UAV_C2_HANDOVER_BEGIN=9101
uint32 UAV_DEYE_HANDOVER_OK=9102
uint32 UAV_C2_HANDOVER_COMPLETE=9103
uint32 UAV_HOLD=9104
uint32 UAV_EXIT=9106
"""
  # Pseudo-constants
  UAV_ST_UNKNOWN = 9300
  UAV_ST_NOT_READY = 9301
  UAV_ST_READY_TO = 9302
  UAV_ST_TAKING_OFF = 9303
  UAV_ST_FLYING = 9304
  UAV_ST_HELD = 9305
  UAV_ST_LANDING = 9306
  UAV_BOOKED = 9100
  UAV_C2_HANDOVER_BEGIN = 9101
  UAV_DEYE_HANDOVER_OK = 9102
  UAV_C2_HANDOVER_COMPLETE = 9103
  UAV_HOLD = 9104
  UAV_EXIT = 9106

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConstantsConformance, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
