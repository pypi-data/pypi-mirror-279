# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint
from com.zuora.models.account_credit_card_holder import AccountCreditCardHolder

class CreditCard(BaseModel):
    """
    Default payment method associated with an account. Only credit card payment methods are supported.   # noqa: E501
    """
    card_holder_info: Optional[AccountCreditCardHolder] = Field(None, alias="cardHolderInfo")
    card_number: Optional[StrictStr] = Field(None, alias="cardNumber", description="Card number. Once set, you cannot update or query the value of this field. The value of this field is only available in masked format. For example, XXXX-XXXX-XXXX-1234 (hyphens must not be used when you set the credit card number). ")
    card_type: Optional[StrictStr] = Field(None, alias="cardType")
    expiration_month: Optional[conint(strict=True, le=12, ge=1)] = Field(None, alias="expirationMonth", description="Expiration date of the card. ")
    expiration_year: Optional[conint(strict=True, le=2500, ge=1980)] = Field(None, alias="expirationYear", description="Expiration year of the card. ")
    security_code: Optional[StrictStr] = Field(None, alias="securityCode", description="CVV or CVV2 security code of the card. To ensure PCI compliance, Zuora does not store the value of this field. ")
    __properties = ["cardHolderInfo", "cardNumber", "cardType", "expirationMonth", "expirationYear", "securityCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreditCard:
        """Create an instance of CreditCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card_holder_info
        if self.card_holder_info:
            _dict['cardHolderInfo'] = self.card_holder_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreditCard:
        """Create an instance of CreditCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreditCard.parse_obj(obj)

        _obj = CreditCard.parse_obj({
            "card_holder_info": AccountCreditCardHolder.from_dict(obj.get("cardHolderInfo")) if obj.get("cardHolderInfo") is not None else None,
            "card_number": obj.get("cardNumber"),
            "card_type": obj.get("cardType"),
            "expiration_month": obj.get("expirationMonth"),
            "expiration_year": obj.get("expirationYear"),
            "security_code": obj.get("securityCode")
        })
        return _obj


