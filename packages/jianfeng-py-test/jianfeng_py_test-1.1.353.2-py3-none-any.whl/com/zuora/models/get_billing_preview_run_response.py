# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class GetBillingPreviewRunResponse(BaseModel):
    """
    get billingPreviewRun response  # noqa: E501
    """
    run_number: Optional[StrictStr] = Field(None, alias="runNumber", description="The run number of the billing preview run. ")
    assume_renewal: Optional[StrictStr] = Field(None, alias="assumeRenewal")
    batch: Optional[StrictStr] = Field(None, description="The customer batch included in the billing preview run.         **Note**: This field is not available if you set the `zuora-version` request header to `314.0` or later. ")
    batches: Optional[StrictStr] = Field(None, description="The customer batches included in the billing preview run.   **Note**: This field is only available if you set the `zuora-version` request header to `314.0` or later. ")
    charge_type_to_exclude: Optional[StrictStr] = Field(None, alias="chargeTypeToExclude", description="The charge types excluded from the forecast run. ")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the user who created the billing preview run. ")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the billing preview run was created. ")
    start_date: Optional[StrictStr] = Field(None, alias="startDate", description="The date and time when the billing preview run starts. ")
    end_date: Optional[StrictStr] = Field(None, alias="endDate", description="The date and time when the billing preview run completes. ")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage", description="The error message generated by a failed billing preview run. ")
    including_draft_items: Optional[StrictBool] = Field(None, alias="includingDraftItems", description="Whether draft document items are included in the billing preview run. By default, draft document items are not included. ")
    including_evergreen_subscription: Optional[StrictBool] = Field(None, alias="includingEvergreenSubscription", description="Indicates if evergreen subscriptions are included in the billing preview run. ")
    result_file_url: Optional[StrictStr] = Field(None, alias="resultFileUrl", description="The URL of the zipped CSV result file generated by the billing preview run. This file contains the preview invoice item data and credit memo item data for the specified customers.  If the value of `storageOption` field is `Database`, the returned `resultFileUrl` field is null.  **Note:** The credit memo item data is only available if you have Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. ")
    status: Optional[StrictStr] = Field(None, description="The status of the >billing preview run.  **Possible values:**   * 0: Pending * 1: Processing * 2: Completed * 3: Error * 4: Canceled ")
    storage_option: Optional[StrictStr] = Field(None, alias="storageOption")
    succeeded_accounts: Optional[StrictInt] = Field(None, alias="succeededAccounts", description="The number of accounts for which preview invoice item data and credit memo item data was successfully generated during the billing preview run.  **Note:** The credit memo item data is only available if you have Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. ")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully.")
    target_date: Optional[date] = Field(None, alias="targetDate", description="The target date for the billing preview run.           ")
    total_accounts: Optional[StrictInt] = Field(None, alias="totalAccounts", description="The total number of accounts in the billing preview run. ")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the user who last updated the billing preview run. ")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the billing preview run was last updated. ")
    __properties = ["runNumber", "assumeRenewal", "batch", "batches", "chargeTypeToExclude", "createdById", "createdDate", "startDate", "endDate", "errorMessage", "includingDraftItems", "includingEvergreenSubscription", "resultFileUrl", "status", "storageOption", "succeededAccounts", "success", "targetDate", "totalAccounts", "updatedById", "updatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetBillingPreviewRunResponse:
        """Create an instance of GetBillingPreviewRunResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetBillingPreviewRunResponse:
        """Create an instance of GetBillingPreviewRunResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetBillingPreviewRunResponse.parse_obj(obj)

        _obj = GetBillingPreviewRunResponse.parse_obj({
            "run_number": obj.get("runNumber"),
            "assume_renewal": obj.get("assumeRenewal"),
            "batch": obj.get("batch"),
            "batches": obj.get("batches"),
            "charge_type_to_exclude": obj.get("chargeTypeToExclude"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "error_message": obj.get("errorMessage"),
            "including_draft_items": obj.get("includingDraftItems"),
            "including_evergreen_subscription": obj.get("includingEvergreenSubscription"),
            "result_file_url": obj.get("resultFileUrl"),
            "status": obj.get("status"),
            "storage_option": obj.get("storageOption"),
            "succeeded_accounts": obj.get("succeededAccounts"),
            "success": obj.get("success"),
            "target_date": obj.get("targetDate"),
            "total_accounts": obj.get("totalAccounts"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate")
        })
        return _obj


