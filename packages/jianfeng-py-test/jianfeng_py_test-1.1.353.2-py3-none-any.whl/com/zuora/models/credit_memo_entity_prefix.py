# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class CreditMemoEntityPrefix(BaseModel):
    """
    Container for the prefix and starting document number of credit memos.  **Note:** This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   # noqa: E501
    """
    prefix: Optional[StrictStr] = Field(None, description="The prefix of credit memos. ")
    start_number: Optional[StrictInt] = Field(None, alias="startNumber", description="The starting document number of credit memos. ")
    __properties = ["prefix", "startNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreditMemoEntityPrefix:
        """Create an instance of CreditMemoEntityPrefix from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreditMemoEntityPrefix:
        """Create an instance of CreditMemoEntityPrefix from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreditMemoEntityPrefix.parse_obj(obj)

        _obj = CreditMemoEntityPrefix.parse_obj({
            "prefix": obj.get("prefix"),
            "start_number": obj.get("startNumber")
        })
        return _obj


