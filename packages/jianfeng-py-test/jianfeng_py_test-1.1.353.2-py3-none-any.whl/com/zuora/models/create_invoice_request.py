# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from com.zuora.models.billing_document_status import BillingDocumentStatus
from com.zuora.models.create_account_contact import CreateAccountContact
from com.zuora.models.create_invoice_item import CreateInvoiceItem
from com.zuora.models.custom_rates import CustomRates
from com.zuora.models.transferred_to_accounting_status import TransferredToAccountingStatus

class CreateInvoiceRequest(BaseModel):
    """
    CreateInvoiceRequest
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the account associated with the invoice.   You must specify either `accountNumber` or `accountId` for a customer account. If both of them are specified, they must refer to the same customer account. ")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The Number of the account associated with the invoice. You must specify either `accountNumber` or `accountId` for a customer account. If both of them are specified, they must refer to the same customer account.")
    auto_pay: Optional[StrictBool] = Field(False, alias="autoPay", description="Whether invoices are automatically picked up for processing in the corresponding payment run.")
    comments: Optional[StrictStr] = Field(None, description="Comments about the invoice.")
    custom_rates: Optional[conlist(CustomRates, max_items=2)] = Field(None, alias="customRates", description="It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item or Reporting currency item or both).        **Note**: The API custom rate feature is permission controlled. ")
    due_date: Optional[date] = Field(None, alias="dueDate", description="The date by which the payment for this invoice is due, in `yyyy-mm-dd` format. ")
    invoice_date: date = Field(..., alias="invoiceDate", description="The date that appears on the invoice being created, in `yyyy-mm-dd` format. The value cannot fall in a closed accounting period.")
    invoice_items: conlist(CreateInvoiceItem) = Field(..., alias="invoiceItems", description="Container for invoice items. The maximum number of invoice items is 1,000.")
    invoice_number: Optional[StrictStr] = Field(None, alias="invoiceNumber", description="A customized invoice number with the following format requirements: - Max length: 32 characters - Acceptable characters: a-z,A-Z,0-9,-,_,  The value must be unique in the system, otherwise it may cause issues with bill runs and subscribe/amend. Check out [things to note and troubleshooting steps](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/IA_Invoices/Unified_Invoicing/Import_external_invoices_as_standalone_invoices?#Customizing_invoice_number).  ")
    status: Optional[StrictStr] = None
    bill_to_contact_id: Optional[StrictStr] = Field(None, alias="billToContactId", description="The ID of the bill-to contact associated with the invoice.")
    payment_term: Optional[StrictStr] = Field(None, alias="paymentTerm", description="The name of payment term associated with the invoice.")
    sequence_set: Optional[StrictStr] = Field(None, alias="sequenceSet", description="The ID or name of the sequence set associated with the invoice.")
    sold_to_contact_id: Optional[StrictStr] = Field(None, alias="soldToContactId", description="The ID of the sold-to contact associated with the invoice.")
    bill_to_contact: Optional[CreateAccountContact] = Field(None, alias="billToContact")
    sold_to_contact: Optional[CreateAccountContact] = Field(None, alias="soldToContact")
    sold_to_same_as_bill_to: Optional[StrictBool] = Field(None, alias="soldToSameAsBillTo", description="Whether the sold-to contact and bill-to contact are the same entity.  The created invoice has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body: - This field is set to `true`.  - A bill-to contact is specified. - No sold-to contact is specified. ")
    template_id: Optional[StrictStr] = Field(None, alias="templateId", description="The ID of the invoice template. **Note**: This field requires Flexible Billing Attribute.")
    transferred_to_accounting: Optional[StrictStr] = Field(None, alias="transferredToAccounting")
    additional_properties: Dict[str, Any] = {}
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "accountId", "accountNumber", "autoPay", "comments", "customRates", "dueDate", "invoiceDate", "invoiceItems", "invoiceNumber", "status", "billToContactId", "paymentTerm", "sequenceSet", "soldToContactId", "billToContact", "soldToContact", "soldToSameAsBillTo", "templateId", "transferredToAccounting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateInvoiceRequest:
        """Create an instance of CreateInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in custom_rates (list)
        _items = []
        if self.custom_rates:
            for _item in self.custom_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item in self.invoice_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoiceItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact
        if self.sold_to_contact:
            _dict['soldToContact'] = self.sold_to_contact.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateInvoiceRequest:
        """Create an instance of CreateInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateInvoiceRequest.parse_obj(obj)

        _obj = CreateInvoiceRequest.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "auto_pay": obj.get("autoPay") if obj.get("autoPay") is not None else False,
            "comments": obj.get("comments"),
            "custom_rates": [CustomRates.from_dict(_item) for _item in obj.get("customRates")] if obj.get("customRates") is not None else None,
            "due_date": obj.get("dueDate"),
            "invoice_date": obj.get("invoiceDate"),
            "invoice_items": [CreateInvoiceItem.from_dict(_item) for _item in obj.get("invoiceItems")] if obj.get("invoiceItems") is not None else None,
            "invoice_number": obj.get("invoiceNumber"),
            "status": obj.get("status"),
            "bill_to_contact_id": obj.get("billToContactId"),
            "payment_term": obj.get("paymentTerm"),
            "sequence_set": obj.get("sequenceSet"),
            "sold_to_contact_id": obj.get("soldToContactId"),
            "bill_to_contact": CreateAccountContact.from_dict(obj.get("billToContact")) if obj.get("billToContact") is not None else None,
            "sold_to_contact": CreateAccountContact.from_dict(obj.get("soldToContact")) if obj.get("soldToContact") is not None else None,
            "sold_to_same_as_bill_to": obj.get("soldToSameAsBillTo"),
            "template_id": obj.get("templateId"),
            "transferred_to_accounting": obj.get("transferredToAccounting")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


