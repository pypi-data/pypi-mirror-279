# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from com.zuora.models.preview_existing_subscription_discount_details import PreviewExistingSubscriptionDiscountDetails

class PreviewExistingSubscriptionCreditMemoItemResult(BaseModel):
    """
    PreviewExistingSubscriptionCreditMemoItemResult
    """
    service_start_date: Optional[date] = Field(None, alias="serviceStartDate", description="Service start date as yyyy-mm-dd. If the charge is a one-time fee, this is the date of that charge.")
    service_end_date: Optional[date] = Field(None, alias="serviceEndDate", description="End date of the service period for this item, i.e., the last day of the period, as yyyy-mm-dd.")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="Credit memo amount minus tax.")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="The tax amount of the credit memo item.")
    charge_description: Optional[StrictStr] = Field(None, alias="chargeDescription", description="Description of the charge.")
    charge_name: Optional[StrictStr] = Field(None, alias="chargeName", description="Name of the charge.")
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="Available when the chargeNumber was specified in the request or when the order is amending an existing subscription.")
    product_name: Optional[StrictStr] = Field(None, alias="productName", description="Name of the product.")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="productRatePlanChargeId", description="The ID of the product rate plan charge.")
    processing_type: Optional[StrictStr] = Field(None, alias="processingType")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unitPrice", description="The unit price of the charge.")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The quantity of the charge.")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="unitOfMeasure", description="The unit of measure of the charge.")
    discount_details: Optional[conlist(PreviewExistingSubscriptionDiscountDetails)] = Field(None, alias="discountDetails", description="Container for discount details.")
    __properties = ["serviceStartDate", "serviceEndDate", "amountWithoutTax", "taxAmount", "chargeDescription", "chargeName", "chargeNumber", "productName", "productRatePlanChargeId", "processingType", "unitPrice", "quantity", "unitOfMeasure", "discountDetails"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewExistingSubscriptionCreditMemoItemResult:
        """Create an instance of PreviewExistingSubscriptionCreditMemoItemResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in discount_details (list)
        _items = []
        if self.discount_details:
            for _item in self.discount_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['discountDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewExistingSubscriptionCreditMemoItemResult:
        """Create an instance of PreviewExistingSubscriptionCreditMemoItemResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewExistingSubscriptionCreditMemoItemResult.parse_obj(obj)

        _obj = PreviewExistingSubscriptionCreditMemoItemResult.parse_obj({
            "service_start_date": obj.get("serviceStartDate"),
            "service_end_date": obj.get("serviceEndDate"),
            "amount_without_tax": obj.get("amountWithoutTax"),
            "tax_amount": obj.get("taxAmount"),
            "charge_description": obj.get("chargeDescription"),
            "charge_name": obj.get("chargeName"),
            "charge_number": obj.get("chargeNumber"),
            "product_name": obj.get("productName"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "processing_type": obj.get("processingType"),
            "unit_price": obj.get("unitPrice"),
            "quantity": obj.get("quantity"),
            "unit_of_measure": obj.get("unitOfMeasure"),
            "discount_details": [PreviewExistingSubscriptionDiscountDetails.from_dict(_item) for _item in obj.get("discountDetails")] if obj.get("discountDetails") is not None else None
        })
        return _obj


