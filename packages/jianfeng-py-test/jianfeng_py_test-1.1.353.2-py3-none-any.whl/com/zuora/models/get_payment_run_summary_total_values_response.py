# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class GetPaymentRunSummaryTotalValuesResponse(BaseModel):
    """
    GetPaymentRunSummaryTotalValuesResponse
    """
    total_value_of_credit_balance: Optional[StrictStr] = Field(None, alias="totalValueOfCreditBalance", description="**Note:** This field is only available if you have the Credit Balance feature enabled.  The total amount of credit balance after the payment run is completed. ")
    total_value_of_credit_memos: Optional[StrictStr] = Field(None, alias="totalValueOfCreditMemos", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total amount of credit memos that are successfully processed in the payment run. ")
    total_value_of_debit_memos: Optional[StrictStr] = Field(None, alias="totalValueOfDebitMemos", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total amount of debit memos that are picked up for processing in the payment run. ")
    total_value_of_errors: Optional[StrictStr] = Field(None, alias="totalValueOfErrors", description="The total amount of receivables associated with the payments with the status of `Error` and `Processing`. ")
    total_value_of_invoices: Optional[StrictStr] = Field(None, alias="totalValueOfInvoices", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total amount of invoices that are picked up for processing in the payment run. ")
    total_value_of_payments: Optional[StrictStr] = Field(None, alias="totalValueOfPayments", description="The total amount of payments that are successfully processed in the payment run. ")
    total_value_of_receivables: Optional[StrictStr] = Field(None, alias="totalValueOfReceivables", description="The total amount of receivables associated with the payment run.  The value of this field is the sum of the value of the `totalValueOfInvoices` field and that of the `totalValueOfDebitMemos` field. ")
    total_value_of_unapplied_payments: Optional[StrictStr] = Field(None, alias="totalValueOfUnappliedPayments", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total amount of unapplied payments that are successfully processed in the payment run. ")
    total_value_of_unprocessed_debit_memos: Optional[StrictStr] = Field(None, alias="totalValueOfUnprocessedDebitMemos", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total amount of debit memos with remaining positive balances after the payment run is completed. ")
    total_value_of_unprocessed_invoices: Optional[StrictStr] = Field(None, alias="totalValueOfUnprocessedInvoices", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total amount of invoices with remaining positive balances after the payment run is completed. ")
    total_value_of_unprocessed_receivables: Optional[StrictStr] = Field(None, alias="totalValueOfUnprocessedReceivables", description="The total amount of receivables with remaining positive balances after the payment run is completed. ")
    __properties = ["totalValueOfCreditBalance", "totalValueOfCreditMemos", "totalValueOfDebitMemos", "totalValueOfErrors", "totalValueOfInvoices", "totalValueOfPayments", "totalValueOfReceivables", "totalValueOfUnappliedPayments", "totalValueOfUnprocessedDebitMemos", "totalValueOfUnprocessedInvoices", "totalValueOfUnprocessedReceivables"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetPaymentRunSummaryTotalValuesResponse:
        """Create an instance of GetPaymentRunSummaryTotalValuesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPaymentRunSummaryTotalValuesResponse:
        """Create an instance of GetPaymentRunSummaryTotalValuesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetPaymentRunSummaryTotalValuesResponse.parse_obj(obj)

        _obj = GetPaymentRunSummaryTotalValuesResponse.parse_obj({
            "total_value_of_credit_balance": obj.get("totalValueOfCreditBalance"),
            "total_value_of_credit_memos": obj.get("totalValueOfCreditMemos"),
            "total_value_of_debit_memos": obj.get("totalValueOfDebitMemos"),
            "total_value_of_errors": obj.get("totalValueOfErrors"),
            "total_value_of_invoices": obj.get("totalValueOfInvoices"),
            "total_value_of_payments": obj.get("totalValueOfPayments"),
            "total_value_of_receivables": obj.get("totalValueOfReceivables"),
            "total_value_of_unapplied_payments": obj.get("totalValueOfUnappliedPayments"),
            "total_value_of_unprocessed_debit_memos": obj.get("totalValueOfUnprocessedDebitMemos"),
            "total_value_of_unprocessed_invoices": obj.get("totalValueOfUnprocessedInvoices"),
            "total_value_of_unprocessed_receivables": obj.get("totalValueOfUnprocessedReceivables")
        })
        return _obj


