# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CreateAccountCreditCardHolderInfo(BaseModel):
    """
    Container for cardholder information.   # noqa: E501
    """
    address_line1: StrictStr = Field(..., alias="addressLine1", description="First address line, 255 characters or less. ")
    address_line2: Optional[StrictStr] = Field(None, alias="addressLine2", description="Second address line, 255 characters or less. ")
    card_holder_name: StrictStr = Field(..., alias="cardHolderName", description="The card holder's full name as it appears on the card, e.g., \"John J Smith\", 50 characters or less. ")
    city: StrictStr = Field(..., description="City, 40 characters or less. It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    country: StrictStr = Field(..., description="Country; must be a valid country name or abbreviation. It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    email: Optional[StrictStr] = Field(None, description="Card holder's email address, 80 characters or less. ")
    phone: Optional[StrictStr] = Field(None, description="Phone number, 40 characters or less. ")
    state: StrictStr = Field(..., description="State; must be a valid state name or 2-character abbreviation. ")
    zip_code: StrictStr = Field(..., alias="zipCode", description="Zip code, 20 characters or less. ")
    __properties = ["addressLine1", "addressLine2", "cardHolderName", "city", "country", "email", "phone", "state", "zipCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAccountCreditCardHolderInfo:
        """Create an instance of CreateAccountCreditCardHolderInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAccountCreditCardHolderInfo:
        """Create an instance of CreateAccountCreditCardHolderInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAccountCreditCardHolderInfo.parse_obj(obj)

        _obj = CreateAccountCreditCardHolderInfo.parse_obj({
            "address_line1": obj.get("addressLine1"),
            "address_line2": obj.get("addressLine2"),
            "card_holder_name": obj.get("cardHolderName"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "zip_code": obj.get("zipCode")
        })
        return _obj


