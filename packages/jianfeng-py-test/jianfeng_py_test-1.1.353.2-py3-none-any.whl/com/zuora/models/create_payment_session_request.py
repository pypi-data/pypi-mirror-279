# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class CreatePaymentSessionRequest(BaseModel):
    """
    CreatePaymentSessionRequest
    """
    account_id: StrictStr = Field(..., alias="accountId", description="The ID of the customer account in Zuora that is associated with this payment method. ")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount of the payment.  This field is required if `processPayment` is `true`. ")
    auth_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="authAmount", description="The authorization amount for the payment method. Specify a value greater than 0.  This field is required if `processPayment` is false. ")
    currency: StrictStr = Field(..., description="The currency of the payment in the format of the three-character ISO currency code. ")
    payment_gateway: StrictStr = Field(..., alias="paymentGateway", description="The ID of the payment gateway instance configured in Zuora that will process the payment, such as `e884322ab8c711edab030242ac120004`. ")
    process_payment: StrictBool = Field(..., alias="processPayment", description="Indicate whether a payment should be processed after creating the payment method.  If this field is set to `true`, you must specify the `amount` field.  If this field is set to `false`, you must specify the `authAmount` field. The payment method will be verified through the payment gateway instance specified in the `paymentGateway` field. ")
    __properties = ["accountId", "amount", "authAmount", "currency", "paymentGateway", "processPayment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePaymentSessionRequest:
        """Create an instance of CreatePaymentSessionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePaymentSessionRequest:
        """Create an instance of CreatePaymentSessionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePaymentSessionRequest.parse_obj(obj)

        _obj = CreatePaymentSessionRequest.parse_obj({
            "account_id": obj.get("accountId"),
            "amount": obj.get("amount"),
            "auth_amount": obj.get("authAmount"),
            "currency": obj.get("currency"),
            "payment_gateway": obj.get("paymentGateway"),
            "process_payment": obj.get("processPayment")
        })
        return _obj


