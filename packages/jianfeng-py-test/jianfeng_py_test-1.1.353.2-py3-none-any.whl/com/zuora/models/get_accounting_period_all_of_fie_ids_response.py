# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class GetAccountingPeriodAllOfFieIdsResponse(BaseModel):
    """
    File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://www.zuora.com/developer/api-references/api/operation/Get_Files) REST API call.   # noqa: E501
    """
    accounts_receivable_account_aging_detail_export_file_id: Optional[StrictStr] = Field(None, alias="accountsReceivableAccountAgingDetailExportFileId", description="File ID of the Accounts Receivable Aging Account Detail report. ")
    accounts_receivable_invoice_aging_detail_export_file_id: Optional[StrictStr] = Field(None, alias="accountsReceivableInvoiceAgingDetailExportFileId", description="File ID of the Accounts Receivable Aging Invoice Detail report. ")
    ar_roll_forward_detail_export_file_id: Optional[StrictStr] = Field(None, alias="arRollForwardDetailExportFileId", description="File ID of the Accounts Receivable Detail report. ")
    fx_realized_gain_and_loss_detail_export_file_id: Optional[StrictStr] = Field(None, alias="fxRealizedGainAndLossDetailExportFileId", description="File ID of the Realized Gain and Loss Detail report.  Returned only if you have Foreign Currency Conversion enabled. ")
    fx_unrealized_gain_and_loss_detail_export_file_id: Optional[StrictStr] = Field(None, alias="fxUnrealizedGainAndLossDetailExportFileId", description="File ID of the Unrealized Gain and Loss Detail report.  Returned only if you have Foreign Currency Conversion enabled ")
    revenue_detail_csv_file_id: Optional[StrictStr] = Field(None, alias="revenueDetailCsvFileId", description="File ID of the Revenue Detail report in CSV format. ")
    revenue_detail_excel_file_id: Optional[StrictStr] = Field(None, alias="revenueDetailExcelFileId", description="File ID of the Revenue Detail report in XLSX format. ")
    unprocessed_charges_file_id: Optional[StrictStr] = Field(None, alias="unprocessedChargesFileId", description="File ID of a report containing all unprocessed charges for the accounting period. ")
    __properties = ["accountsReceivableAccountAgingDetailExportFileId", "accountsReceivableInvoiceAgingDetailExportFileId", "arRollForwardDetailExportFileId", "fxRealizedGainAndLossDetailExportFileId", "fxUnrealizedGainAndLossDetailExportFileId", "revenueDetailCsvFileId", "revenueDetailExcelFileId", "unprocessedChargesFileId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAccountingPeriodAllOfFieIdsResponse:
        """Create an instance of GetAccountingPeriodAllOfFieIdsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAccountingPeriodAllOfFieIdsResponse:
        """Create an instance of GetAccountingPeriodAllOfFieIdsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetAccountingPeriodAllOfFieIdsResponse.parse_obj(obj)

        _obj = GetAccountingPeriodAllOfFieIdsResponse.parse_obj({
            "accounts_receivable_account_aging_detail_export_file_id": obj.get("accountsReceivableAccountAgingDetailExportFileId"),
            "accounts_receivable_invoice_aging_detail_export_file_id": obj.get("accountsReceivableInvoiceAgingDetailExportFileId"),
            "ar_roll_forward_detail_export_file_id": obj.get("arRollForwardDetailExportFileId"),
            "fx_realized_gain_and_loss_detail_export_file_id": obj.get("fxRealizedGainAndLossDetailExportFileId"),
            "fx_unrealized_gain_and_loss_detail_export_file_id": obj.get("fxUnrealizedGainAndLossDetailExportFileId"),
            "revenue_detail_csv_file_id": obj.get("revenueDetailCsvFileId"),
            "revenue_detail_excel_file_id": obj.get("revenueDetailExcelFileId"),
            "unprocessed_charges_file_id": obj.get("unprocessedChargesFileId")
        })
        return _obj


