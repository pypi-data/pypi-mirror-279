# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class SettingValueResponse(BaseModel):
    """
    SettingValueResponse
    """
    body: Optional[Dict[str, Any]] = Field(None, description="Response body if the request is executed successfully.")
    error_messages: Optional[conlist(StrictStr)] = Field(None, alias="errorMessages", description="An array of error messages if errors occur when executing the request. ")
    status: Optional[StrictStr] = Field(None, description="User readable response status, for example, 502 BAD_GATEWAY. ")
    __properties = ["body", "errorMessages", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SettingValueResponse:
        """Create an instance of SettingValueResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SettingValueResponse:
        """Create an instance of SettingValueResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SettingValueResponse.parse_obj(obj)

        _obj = SettingValueResponse.parse_obj({
            "body": obj.get("body"),
            "error_messages": obj.get("errorMessages"),
            "status": obj.get("status")
        })
        return _obj


