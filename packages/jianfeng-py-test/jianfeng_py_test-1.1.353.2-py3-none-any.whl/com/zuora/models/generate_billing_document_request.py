# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class GenerateBillingDocumentRequest(BaseModel):
    """
    GenerateBillingDocumentRequest
    """
    auto_post: Optional[StrictBool] = Field(False, alias="autoPost", description="Whether to automatically post the billing documents after the draft billing documents are generated.   If an error occurs during posting billing documents, the draft billing documents are not generated too. ")
    auto_renew: Optional[StrictBool] = Field(False, alias="autoRenew", description="Whether to automatically renew the subscriptions with **Auto Renew** set to **Yes**.  ")
    charge_type_to_exclude: Optional[conlist(StrictStr)] = Field(None, alias="chargeTypeToExclude", description="The types of the charges to be excluded from the generation of billing documents. The field values are case insensitive. Supported values include `onetime`, `recurring`, and `usage`.  ")
    credit_memo_reason_code: Optional[StrictStr] = Field(None, alias="creditMemoReasonCode", description="A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="The date on which to generate the billing documents, in `yyyy-mm-dd` format. ")
    subscription_ids: Optional[conlist(StrictStr)] = Field(None, alias="subscriptionIds", description="The IDs of the subscriptions that you want to create the billing documents for. Each value must be the ID of the latest version of an active subscription. ")
    target_date: Optional[date] = Field(None, alias="targetDate", description="The date used to determine which charges are to be billed, in `yyyy-mm-dd` format. ")
    __properties = ["autoPost", "autoRenew", "chargeTypeToExclude", "creditMemoReasonCode", "effectiveDate", "subscriptionIds", "targetDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GenerateBillingDocumentRequest:
        """Create an instance of GenerateBillingDocumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GenerateBillingDocumentRequest:
        """Create an instance of GenerateBillingDocumentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GenerateBillingDocumentRequest.parse_obj(obj)

        _obj = GenerateBillingDocumentRequest.parse_obj({
            "auto_post": obj.get("autoPost") if obj.get("autoPost") is not None else False,
            "auto_renew": obj.get("autoRenew") if obj.get("autoRenew") is not None else False,
            "charge_type_to_exclude": obj.get("chargeTypeToExclude"),
            "credit_memo_reason_code": obj.get("creditMemoReasonCode"),
            "effective_date": obj.get("effectiveDate"),
            "subscription_ids": obj.get("subscriptionIds"),
            "target_date": obj.get("targetDate")
        })
        return _obj


