# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from com.zuora.models.change_plan_rate_plan_override import ChangePlanRatePlanOverride

class OrderActionChangePlan(BaseModel):
    """
    Information about an order action of type `ChangePlan`.  **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.   # noqa: E501
    """
    effective_policy: Optional[StrictStr] = Field(None, alias="effectivePolicy")
    new_product_rate_plan: Optional[ChangePlanRatePlanOverride] = Field(None, alias="newProductRatePlan")
    product_rate_plan_id: Optional[StrictStr] = Field(None, alias="productRatePlanId", description="ID of the rate plan to remove. This can be the latest version or any history version of ID. ")
    product_rate_plan_number: Optional[StrictStr] = Field(None, alias="productRatePlanNumber", description="Number of a product rate plan for this subscription. ")
    rate_plan_id: Optional[StrictStr] = Field(None, alias="ratePlanId", description="ID of the rate plan to remove. This can be the latest version or any history version of ID. ")
    sub_type: Optional[StrictStr] = Field(None, alias="subType")
    subscription_rate_plan_number: Optional[StrictStr] = Field(None, alias="subscriptionRatePlanNumber", description="Number of a rate plan for this subscription. ")
    __properties = ["effectivePolicy", "newProductRatePlan", "productRatePlanId", "productRatePlanNumber", "ratePlanId", "subType", "subscriptionRatePlanNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderActionChangePlan:
        """Create an instance of OrderActionChangePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of new_product_rate_plan
        if self.new_product_rate_plan:
            _dict['newProductRatePlan'] = self.new_product_rate_plan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderActionChangePlan:
        """Create an instance of OrderActionChangePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderActionChangePlan.parse_obj(obj)

        _obj = OrderActionChangePlan.parse_obj({
            "effective_policy": obj.get("effectivePolicy"),
            "new_product_rate_plan": ChangePlanRatePlanOverride.from_dict(obj.get("newProductRatePlan")) if obj.get("newProductRatePlan") is not None else None,
            "product_rate_plan_id": obj.get("productRatePlanId"),
            "product_rate_plan_number": obj.get("productRatePlanNumber"),
            "rate_plan_id": obj.get("ratePlanId"),
            "sub_type": obj.get("subType"),
            "subscription_rate_plan_number": obj.get("subscriptionRatePlanNumber")
        })
        return _obj


