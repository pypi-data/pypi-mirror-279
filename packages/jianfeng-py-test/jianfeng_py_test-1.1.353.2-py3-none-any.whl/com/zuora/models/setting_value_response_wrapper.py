# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from com.zuora.models.setting_value_response import SettingValueResponse

class SettingValueResponseWrapper(BaseModel):
    """
    SettingValueResponseWrapper
    """
    id: Optional[StrictStr] = Field(None, description="The Id of the corresponding request. ")
    method: Optional[StrictStr] = None
    response: Optional[SettingValueResponse] = None
    url: Optional[StrictStr] = Field(None, description="The url as specified in the corresponding request. ")
    __properties = ["id", "method", "response", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SettingValueResponseWrapper:
        """Create an instance of SettingValueResponseWrapper from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SettingValueResponseWrapper:
        """Create an instance of SettingValueResponseWrapper from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SettingValueResponseWrapper.parse_obj(obj)

        _obj = SettingValueResponseWrapper.parse_obj({
            "id": obj.get("id"),
            "method": obj.get("method"),
            "response": SettingValueResponse.from_dict(obj.get("response")) if obj.get("response") is not None else None,
            "url": obj.get("url")
        })
        return _obj


