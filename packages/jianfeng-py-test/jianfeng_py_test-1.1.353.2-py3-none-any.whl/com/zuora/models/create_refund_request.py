# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, constr
from com.zuora.models.gateway_options import GatewayOptions
from com.zuora.models.payment_with_custom_rates import PaymentWithCustomRates
from com.zuora.models.refund_request_finance_information import RefundRequestFinanceInformation

class CreateRefundRequest(BaseModel):
    """
    CreateRefundRequest
    """
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Comments about the refund. ")
    custom_rates: Optional[conlist(PaymentWithCustomRates, max_items=2)] = Field(None, alias="customRates", description="It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item, Reporting currency item, or both).  **Note**: The API custom rate feature is permission controlled. ")
    finance_information: Optional[RefundRequestFinanceInformation] = Field(None, alias="financeInformation")
    gateway_options: Optional[GatewayOptions] = Field(None, alias="gatewayOptions")
    method_type: Optional[StrictStr] = Field(None, alias="methodType")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. ")
    reference_id: Optional[constr(strict=True, max_length=100, min_length=0)] = Field(None, alias="referenceId", description="The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments. ")
    refund_date: Optional[StrictStr] = Field(None, alias="refundDate", description="The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds. ")
    second_refund_reference_id: Optional[constr(strict=True, max_length=100, min_length=0)] = Field(None, alias="secondRefundReferenceId", description="The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments. ")
    soft_descriptor: Optional[constr(strict=True, max_length=35)] = Field(None, alias="softDescriptor", description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.")
    soft_descriptor_phone: Optional[constr(strict=True, max_length=20)] = Field(None, alias="softDescriptorPhone", description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.")
    total_amount: Union[StrictFloat, StrictInt] = Field(..., alias="totalAmount", description="The total amount of the refund. The amount cannot exceed the unapplied amount of the associated payment. If the original payment was applied to one or more invoices or debit memos, you have to unapply a full or partial payment from the invoices or debit memos, and then refund the full or partial unapplied payment to your customers.  ")
    type: StrictStr = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["comment", "customRates", "financeInformation", "gatewayOptions", "methodType", "reasonCode", "referenceId", "refundDate", "secondRefundReferenceId", "softDescriptor", "softDescriptorPhone", "totalAmount", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateRefundRequest:
        """Create an instance of CreateRefundRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in custom_rates (list)
        _items = []
        if self.custom_rates:
            for _item in self.custom_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_options
        if self.gateway_options:
            _dict['gatewayOptions'] = self.gateway_options.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateRefundRequest:
        """Create an instance of CreateRefundRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateRefundRequest.parse_obj(obj)

        _obj = CreateRefundRequest.parse_obj({
            "comment": obj.get("comment"),
            "custom_rates": [PaymentWithCustomRates.from_dict(_item) for _item in obj.get("customRates")] if obj.get("customRates") is not None else None,
            "finance_information": RefundRequestFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "gateway_options": GatewayOptions.from_dict(obj.get("gatewayOptions")) if obj.get("gatewayOptions") is not None else None,
            "method_type": obj.get("methodType"),
            "reason_code": obj.get("reasonCode"),
            "reference_id": obj.get("referenceId"),
            "refund_date": obj.get("refundDate"),
            "second_refund_reference_id": obj.get("secondRefundReferenceId"),
            "soft_descriptor": obj.get("softDescriptor"),
            "soft_descriptor_phone": obj.get("softDescriptorPhone"),
            "total_amount": obj.get("totalAmount"),
            "type": obj.get("type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


