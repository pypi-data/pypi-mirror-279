# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.create_journal_run_request_transaction_type import CreateJournalRunRequestTransactionType
from com.zuora.models.organization_label import OrganizationLabel

class CreateJournalRunRequest(BaseModel):
    """
    CreateJournalRunRequest
    """
    accounting_period_name: Optional[StrictStr] = Field(None, alias="accountingPeriodName", description="Name of the accounting period.  This field determines the target start and end dates of the journal run.  Required if you do not include `targetStartDate` and `targetEndDate`. ")
    journal_entry_date: date = Field(..., alias="journalEntryDate", description="Date of the journal entry. ")
    target_end_date: Optional[date] = Field(None, alias="targetEndDate", description="The target end date of the journal run.  If you include `accountingPeriodName`, the `targetEndDate` must be empty or the same as the end date of the accounting period specified in `accountingPeriodName`. ")
    target_start_date: Optional[date] = Field(None, alias="targetStartDate", description="The target start date of the journal run.  Required if you include targetEndDate.  If you include `accountingPeriodName`, the `targetStartDate` must be empty or the same as the start date of the accounting period specified in `accountingPeriodName`. ")
    organization_labels: Optional[conlist(OrganizationLabel)] = Field(None, alias="organizationLabels", description="Organization labels. ")
    transaction_types: conlist(CreateJournalRunRequestTransactionType) = Field(..., alias="transactionTypes", description="Transaction types included in the journal run.  You can include one or more transaction types. ")
    __properties = ["accountingPeriodName", "journalEntryDate", "targetEndDate", "targetStartDate", "organizationLabels", "transactionTypes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateJournalRunRequest:
        """Create an instance of CreateJournalRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in organization_labels (list)
        _items = []
        if self.organization_labels:
            for _item in self.organization_labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizationLabels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transaction_types (list)
        _items = []
        if self.transaction_types:
            for _item in self.transaction_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transactionTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateJournalRunRequest:
        """Create an instance of CreateJournalRunRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateJournalRunRequest.parse_obj(obj)

        _obj = CreateJournalRunRequest.parse_obj({
            "accounting_period_name": obj.get("accountingPeriodName"),
            "journal_entry_date": obj.get("journalEntryDate"),
            "target_end_date": obj.get("targetEndDate"),
            "target_start_date": obj.get("targetStartDate"),
            "organization_labels": [OrganizationLabel.from_dict(_item) for _item in obj.get("organizationLabels")] if obj.get("organizationLabels") is not None else None,
            "transaction_types": [CreateJournalRunRequestTransactionType.from_dict(_item) for _item in obj.get("transactionTypes")] if obj.get("transactionTypes") is not None else None
        })
        return _obj


