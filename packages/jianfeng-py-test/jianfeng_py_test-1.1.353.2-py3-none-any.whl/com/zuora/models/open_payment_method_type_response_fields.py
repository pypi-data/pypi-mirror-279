# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class OpenPaymentMethodTypeResponseFields(BaseModel):
    """
    OpenPaymentMethodTypeResponseFields
    """
    checksum: Optional[StrictBool] = Field(None, description="The checksum value of a payment method is used to identify if this payment method is the same as another one, or if this payment method is altered to another new payment method.  For example, if you select the credit card number and expiration date as the checksum fields for the CreditCard payment method type, when you modified the expiration date, Zuora considers this payment method as a different payment method compared to the original one. ")
    default_value: Optional[StrictStr] = Field(None, alias="defaultValue", description="The default value of the field. ")
    description: Optional[StrictStr] = Field(None, description="An explanation of this field. ")
    editable: Optional[StrictBool] = Field(None, description="Specify `true` if this field can be updated through PUT API or UI.  Note: If `editable` is set to `false`, you can specify the value of this field in the UI and POST API when creating a payment method. However, after you created the payment method, you cannot edit this field through PUT API or UI. ")
    index: Optional[StrictInt] = Field(None, description="The order of the field in this type, starting from 1. ")
    label: Optional[StrictStr] = Field(None, description="The label that is used to refer to this field in the Zuora UI. ")
    max_length: Optional[StrictInt] = Field(None, alias="maxLength", description="A maximum length limitation of the field value. ")
    min_length: Optional[StrictInt] = Field(None, alias="minLength", description="A minimal length limitation of the field value. ")
    name: Optional[StrictStr] = Field(None, description="The API name of this field. It must be uinique. ")
    representer: Optional[StrictBool] = Field(None, description="This flag determines whether this field will be used for identifying this payment method in the Zuora UI. The field will be shown in the Payment Method field in the UI. ")
    required: Optional[StrictBool] = Field(None, description="Specify whether this field is required. ")
    type: Optional[StrictStr] = None
    visible: Optional[StrictBool] = Field(None, description="Specify `true` if this field can be retrieved through GET API or UI for displaying payment method details.  Notes:    - If `visible` is set to `false`, you can still specify the value of this field in the UI and POST API when creating the payment method.   - If `visible` is set to `false` and `editable` is set to `true`, this field is not accessible through GET API or UI for displaying details, but you can still see it and edit the value in the UI and PUT API when updating this payment method. ")
    __properties = ["checksum", "defaultValue", "description", "editable", "index", "label", "maxLength", "minLength", "name", "representer", "required", "type", "visible"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenPaymentMethodTypeResponseFields:
        """Create an instance of OpenPaymentMethodTypeResponseFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenPaymentMethodTypeResponseFields:
        """Create an instance of OpenPaymentMethodTypeResponseFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenPaymentMethodTypeResponseFields.parse_obj(obj)

        _obj = OpenPaymentMethodTypeResponseFields.parse_obj({
            "checksum": obj.get("checksum"),
            "default_value": obj.get("defaultValue"),
            "description": obj.get("description"),
            "editable": obj.get("editable"),
            "index": obj.get("index"),
            "label": obj.get("label"),
            "max_length": obj.get("maxLength"),
            "min_length": obj.get("minLength"),
            "name": obj.get("name"),
            "representer": obj.get("representer"),
            "required": obj.get("required"),
            "type": obj.get("type"),
            "visible": obj.get("visible")
        })
        return _obj


