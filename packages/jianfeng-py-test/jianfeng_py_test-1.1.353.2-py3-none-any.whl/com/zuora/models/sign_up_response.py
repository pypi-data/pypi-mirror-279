# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from com.zuora.models.sign_up_response_reasons import SignUpResponseReasons

class SignUpResponse(BaseModel):
    """
    SignUpResponse
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The account id for the order.")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The account number for the order.")
    credit_memo_id: Optional[StrictStr] = Field(None, alias="creditMemoId", description="An array of the credit memo id generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.")
    credit_memo_number: Optional[StrictStr] = Field(None, alias="creditMemoNumber", description="An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.")
    invoice_id: Optional[StrictStr] = Field(None, alias="invoiceId", description="The invoice id generated in this order request")
    invoice_number: Optional[StrictStr] = Field(None, alias="invoiceNumber", description="The invoice number generated in this order request")
    order_number: Optional[StrictStr] = Field(None, alias="orderNumber", description="The order number of the order created.")
    paid_amount: Optional[StrictStr] = Field(None, alias="paidAmount", description="The total amount collected in this order request.")
    payment_id: Optional[StrictStr] = Field(None, alias="paymentId", description="The payment id that is collected in this order request.")
    payment_number: Optional[StrictStr] = Field(None, alias="paymentNumber", description="The payment number that is collected in this order request.")
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handles the operation. ")
    reasons: Optional[conlist(SignUpResponseReasons)] = None
    status: Optional[StrictStr] = None
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId", description="The subscription id of the order.")
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber", description="The subscription number of the order.")
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    __properties = ["accountId", "accountNumber", "creditMemoId", "creditMemoNumber", "invoiceId", "invoiceNumber", "orderNumber", "paidAmount", "paymentId", "paymentNumber", "processId", "reasons", "status", "subscriptionId", "subscriptionNumber", "success"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignUpResponse:
        """Create an instance of SignUpResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignUpResponse:
        """Create an instance of SignUpResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignUpResponse.parse_obj(obj)

        _obj = SignUpResponse.parse_obj({
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "credit_memo_id": obj.get("creditMemoId"),
            "credit_memo_number": obj.get("creditMemoNumber"),
            "invoice_id": obj.get("invoiceId"),
            "invoice_number": obj.get("invoiceNumber"),
            "order_number": obj.get("orderNumber"),
            "paid_amount": obj.get("paidAmount"),
            "payment_id": obj.get("paymentId"),
            "payment_number": obj.get("paymentNumber"),
            "process_id": obj.get("processId"),
            "reasons": [SignUpResponseReasons.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "status": obj.get("status"),
            "subscription_id": obj.get("subscriptionId"),
            "subscription_number": obj.get("subscriptionNumber"),
            "success": obj.get("success")
        })
        return _obj


