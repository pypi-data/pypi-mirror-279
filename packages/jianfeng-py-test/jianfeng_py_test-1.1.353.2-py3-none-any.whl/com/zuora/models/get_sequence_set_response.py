# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from com.zuora.models.credit_memo_entity_prefix import CreditMemoEntityPrefix
from com.zuora.models.debit_memo_entity_prefix import DebitMemoEntityPrefix
from com.zuora.models.invoice_entity_prefix import InvoiceEntityPrefix
from com.zuora.models.payment_entity_prefix import PaymentEntityPrefix
from com.zuora.models.refund_entity_prefix import RefundEntityPrefix

class GetSequenceSetResponse(BaseModel):
    """
      # noqa: E501
    """
    credit_memo: Optional[CreditMemoEntityPrefix] = Field(None, alias="creditMemo")
    debit_memo: Optional[DebitMemoEntityPrefix] = Field(None, alias="debitMemo")
    id: Optional[StrictStr] = Field(None, description="The unique ID of the sequence set. For example, 402892c74c9193cd014c96bbe7c101f9. ")
    invoice: Optional[InvoiceEntityPrefix] = None
    name: Optional[StrictStr] = Field(None, description="The name of the sequence set. ")
    payment: Optional[PaymentEntityPrefix] = None
    refund: Optional[RefundEntityPrefix] = None
    __properties = ["creditMemo", "debitMemo", "id", "invoice", "name", "payment", "refund"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetSequenceSetResponse:
        """Create an instance of GetSequenceSetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of credit_memo
        if self.credit_memo:
            _dict['creditMemo'] = self.credit_memo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debit_memo
        if self.debit_memo:
            _dict['debitMemo'] = self.debit_memo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment
        if self.payment:
            _dict['payment'] = self.payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund
        if self.refund:
            _dict['refund'] = self.refund.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetSequenceSetResponse:
        """Create an instance of GetSequenceSetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetSequenceSetResponse.parse_obj(obj)

        _obj = GetSequenceSetResponse.parse_obj({
            "credit_memo": CreditMemoEntityPrefix.from_dict(obj.get("creditMemo")) if obj.get("creditMemo") is not None else None,
            "debit_memo": DebitMemoEntityPrefix.from_dict(obj.get("debitMemo")) if obj.get("debitMemo") is not None else None,
            "id": obj.get("id"),
            "invoice": InvoiceEntityPrefix.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "name": obj.get("name"),
            "payment": PaymentEntityPrefix.from_dict(obj.get("payment")) if obj.get("payment") is not None else None,
            "refund": RefundEntityPrefix.from_dict(obj.get("refund")) if obj.get("refund") is not None else None
        })
        return _obj


