# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from com.zuora.models.get_workflow_response_tasks import GetWorkflowResponseTasks

class GetWorkflowResponse(BaseModel):
    """
    GetWorkflowResponse
    """
    cpu_time: Optional[StrictStr] = Field(None, alias="cpuTime", description="The overall CPU time for the execution of the workflow. ")
    created_at: Optional[StrictStr] = Field(None, alias="createdAt", description="The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.. ")
    finished_at: Optional[StrictStr] = Field(None, alias="finishedAt", description="The date and time when the execution of the workflow completes, in the `YYYY-MM-DD HH:MM:SS` format. ")
    id: Optional[StrictInt] = Field(None, description="The unique ID of the workflow. ")
    messages: Optional[Dict[str, Any]] = Field(None, description="Messages from tasks.   **Note:** This field is only returned in Production. ")
    name: Optional[StrictStr] = Field(None, description="The unique run number of the workflow. ")
    original_workflow_id: Optional[StrictStr] = Field(None, alias="originalWorkflowId", description="The ID of the workflow setup. ")
    run_time: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="runTime", description="The execution time of the workflow including the waiting time, in seconds. ")
    status: Optional[StrictStr] = None
    tasks: Optional[GetWorkflowResponseTasks] = None
    type: Optional[StrictStr] = Field(None, description="The type of the current workflow. Possible values:   - `Workflow::Setup`: The workflow is a setup and is used for creating workflow instances.   - `Workflow::Instance`: The workflow is an execution that has data. ")
    updated_at: Optional[StrictStr] = Field(None, alias="updatedAt", description="The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format. ")
    __properties = ["cpuTime", "createdAt", "finishedAt", "id", "messages", "name", "originalWorkflowId", "runTime", "status", "tasks", "type", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetWorkflowResponse:
        """Create an instance of GetWorkflowResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tasks
        if self.tasks:
            _dict['tasks'] = self.tasks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetWorkflowResponse:
        """Create an instance of GetWorkflowResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetWorkflowResponse.parse_obj(obj)

        _obj = GetWorkflowResponse.parse_obj({
            "cpu_time": obj.get("cpuTime"),
            "created_at": obj.get("createdAt"),
            "finished_at": obj.get("finishedAt"),
            "id": obj.get("id"),
            "messages": obj.get("messages"),
            "name": obj.get("name"),
            "original_workflow_id": obj.get("originalWorkflowId"),
            "run_time": obj.get("runTime"),
            "status": obj.get("status"),
            "tasks": GetWorkflowResponseTasks.from_dict(obj.get("tasks")) if obj.get("tasks") is not None else None,
            "type": obj.get("type"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


