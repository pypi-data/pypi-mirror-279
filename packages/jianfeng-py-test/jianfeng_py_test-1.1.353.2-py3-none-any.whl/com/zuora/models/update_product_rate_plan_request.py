# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, constr
from com.zuora.models.product_rate_plan_object_ns_fields_billing_period_ns import ProductRatePlanObjectNSFieldsBillingPeriodNS
from com.zuora.models.product_rate_plan_object_ns_fields_include_children_ns import ProductRatePlanObjectNSFieldsIncludeChildrenNS
from com.zuora.models.product_rate_plan_object_ns_fields_item_type_ns import ProductRatePlanObjectNSFieldsItemTypeNS

class UpdateProductRatePlanRequest(BaseModel):
    """
    UpdateProductRatePlanRequest
    """
    billing_period__ns: Optional[StrictStr] = Field(None, alias="BillingPeriod__NS")
    class__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Class__NS", description="Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    department__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Department__NS", description="Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    include_children__ns: Optional[StrictStr] = Field(None, alias="IncludeChildren__NS")
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the product rate plan's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    item_type__ns: Optional[StrictStr] = Field(None, alias="ItemType__NS")
    location__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Location__NS", description="Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    multi_currency_price__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="MultiCurrencyPrice__NS", description="Multi-currency price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    price__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Price__NS", description="Price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    subsidiary__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Subsidiary__NS", description="Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the product rate plan was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    product_rate_plan_number: Optional[constr(strict=True, max_length=100)] = Field(None, alias="ProductRatePlanNumber", description="The natural key of the product rate plan.   For existing Product Rate Plan objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).  **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later. ")
    name: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Name", description="The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product. ")
    product_id: Optional[constr(strict=True, max_length=32)] = Field(None, alias="ProductId", description="The ID of the product that contains the product rate plan. ")
    active_currencies: Optional[conlist(StrictStr)] = Field(None, alias="ActiveCurrencies", description="A list of 3-letter currency codes representing active currencies for the product rate plan. Use a comma to separate each currency code.  If the request body contains this field, the value of this field must contain the desired list of active currencies. The new list can never have more than four differences from the existing list.  This field cannot be used to modify the status of more than four currencies in a single request. For example, in a single request, you can only activate four currencies, or deactivate four currencies, or activate two and deactivate two. Making more than four changes to currencies always requires more than one call.  When specifying this field in the update request, you must provide the full list of active currencies you want, not just incremental changes. For each active currency update, provide the following currencies in the list:  Current active currencies + at most four changes (additions or deletions) ")
    description: Optional[constr(strict=True, max_length=500)] = Field(None, alias="Description", description="A description of the product rate plan. ")
    effective_start_date: Optional[date] = Field(None, alias="EffectiveStartDate", description="The date when the product rate plan becomes available and can be subscribed to, in `yyyy-mm-dd` format. ")
    effective_end_date: Optional[date] = Field(None, alias="EffectiveEndDate", description="The date when the product rate plan expires and can't be subscribed to, in `yyyy-mm-dd` format. ")
    grade: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Grade", description="The grade that is assigned for the product rate plan. The value of this field must be a positive integer. The greater the value, the higher the grade.  A product rate plan to be added to a Grading catalog group must have one grade. You can specify a grade for a product rate plan in this request or update the product rate plan individually.  **Notes**:    - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `116` or later. Otherwise, an error occurs.   - This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/). ")
    __properties = ["BillingPeriod__NS", "Class__NS", "Department__NS", "IncludeChildren__NS", "IntegrationId__NS", "IntegrationStatus__NS", "ItemType__NS", "Location__NS", "MultiCurrencyPrice__NS", "Price__NS", "Subsidiary__NS", "SyncDate__NS", "ProductRatePlanNumber", "Name", "ProductId", "ActiveCurrencies", "Description", "EffectiveStartDate", "EffectiveEndDate", "Grade"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateProductRatePlanRequest:
        """Create an instance of UpdateProductRatePlanRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateProductRatePlanRequest:
        """Create an instance of UpdateProductRatePlanRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateProductRatePlanRequest.parse_obj(obj)

        _obj = UpdateProductRatePlanRequest.parse_obj({
            "billing_period__ns": obj.get("BillingPeriod__NS"),
            "class__ns": obj.get("Class__NS"),
            "department__ns": obj.get("Department__NS"),
            "include_children__ns": obj.get("IncludeChildren__NS"),
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "item_type__ns": obj.get("ItemType__NS"),
            "location__ns": obj.get("Location__NS"),
            "multi_currency_price__ns": obj.get("MultiCurrencyPrice__NS"),
            "price__ns": obj.get("Price__NS"),
            "subsidiary__ns": obj.get("Subsidiary__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "product_rate_plan_number": obj.get("ProductRatePlanNumber"),
            "name": obj.get("Name"),
            "product_id": obj.get("ProductId"),
            "active_currencies": obj.get("ActiveCurrencies"),
            "description": obj.get("Description"),
            "effective_start_date": obj.get("EffectiveStartDate"),
            "effective_end_date": obj.get("EffectiveEndDate"),
            "grade": obj.get("Grade")
        })
        return _obj


