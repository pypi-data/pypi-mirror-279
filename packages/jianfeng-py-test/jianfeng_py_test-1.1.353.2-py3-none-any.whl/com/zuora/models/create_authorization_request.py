# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from com.zuora.models.gateway_options import GatewayOptions

class CreateAuthorizationRequest(BaseModel):
    """
    CreateAuthorizationRequest
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the customer account. Either `accountId` or `accountNumber` is required.")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The number of the customer account. Either `accountNumber` or `accountId` is required.")
    amount: Union[StrictFloat, StrictInt] = Field(..., description="The amount of the trasaction.")
    gateway_options: Optional[GatewayOptions] = Field(None, alias="gatewayOptions")
    gateway_order_id: StrictStr = Field(..., alias="gatewayOrderId", description="The order ID for the specific gateway.  The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field. ")
    mit_transaction_source: Optional[StrictStr] = Field(None, alias="mitTransactionSource")
    payment_gateway_id: Optional[StrictStr] = Field(None, alias="paymentGatewayId", description="The ID of the payment gateway instance.")
    soft_descriptor: Optional[StrictStr] = Field(None, alias="softDescriptor", description="A text, rendered on a cardholderâ€™s statement, describing a particular product or service purchased by the cardholder.")
    soft_descriptor_phone: Optional[StrictStr] = Field(None, alias="softDescriptorPhone", description="The phone number that relates to the soft descriptor, usually the phone number of customer service.")
    __properties = ["accountId", "accountNumber", "amount", "gatewayOptions", "gatewayOrderId", "mitTransactionSource", "paymentGatewayId", "softDescriptor", "softDescriptorPhone"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAuthorizationRequest:
        """Create an instance of CreateAuthorizationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gateway_options
        if self.gateway_options:
            _dict['gatewayOptions'] = self.gateway_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAuthorizationRequest:
        """Create an instance of CreateAuthorizationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAuthorizationRequest.parse_obj(obj)

        _obj = CreateAuthorizationRequest.parse_obj({
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "amount": obj.get("amount"),
            "gateway_options": GatewayOptions.from_dict(obj.get("gatewayOptions")) if obj.get("gatewayOptions") is not None else None,
            "gateway_order_id": obj.get("gatewayOrderId"),
            "mit_transaction_source": obj.get("mitTransactionSource"),
            "payment_gateway_id": obj.get("paymentGatewayId"),
            "soft_descriptor": obj.get("softDescriptor"),
            "soft_descriptor_phone": obj.get("softDescriptorPhone")
        })
        return _obj


