# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class PaymentTransactionLogResponse(BaseModel):
    """
    PaymentTransactionLogResponse
    """
    avs_response_code: Optional[StrictStr] = Field(None, alias="AVSResponseCode", description="The response code returned by the payment gateway referring to the AVS international response of the payment transaction. ")
    batch_id: Optional[StrictStr] = Field(None, alias="BatchId", description="The ID of the batch used to send the transaction if the request was sent in a batch. ")
    cvv_response_code: Optional[StrictStr] = Field(None, alias="CVVResponseCode", description="The response code returned by the payment gateway referring to the CVV international response of the payment transaction. ")
    gateway: Optional[StrictStr] = Field(None, alias="Gateway", description="The name of the payment gateway used to transact the current payment transaction log. ")
    gateway_reason_code: Optional[StrictStr] = Field(None, alias="GatewayReasonCode", description="The code returned by the payment gateway for the payment. This code is gateway-dependent. ")
    gateway_reason_code_description: Optional[StrictStr] = Field(None, alias="GatewayReasonCodeDescription", description="The message returned by the payment gateway for the payment. This message is gateway-dependent.  ")
    gateway_state: Optional[StrictStr] = Field(None, alias="GatewayState")
    gateway_transaction_type: Optional[StrictStr] = Field(None, alias="GatewayTransactionType")
    id: Optional[StrictStr] = Field(None, alias="Id", description="The ID of the payment transaction log. ")
    payment_id: Optional[StrictStr] = Field(None, alias="PaymentId", description="The ID of the payment wherein the payment transaction log was recorded.  ")
    request_string: Optional[StrictStr] = Field(None, alias="RequestString", description="The payment transaction request string sent to the payment gateway.  ")
    response_string: Optional[StrictStr] = Field(None, alias="ResponseString", description="The payment transaction response string returned by the payment gateway.  ")
    transaction_date: Optional[datetime] = Field(None, alias="TransactionDate", description="The transaction date when the payment was performed.  ")
    transaction_id: Optional[StrictStr] = Field(None, alias="TransactionId", description="The transaction ID returned by the payment gateway. This field is used to reconcile payment transactions between the payment gateway and records in Zuora. ")
    __properties = ["AVSResponseCode", "BatchId", "CVVResponseCode", "Gateway", "GatewayReasonCode", "GatewayReasonCodeDescription", "GatewayState", "GatewayTransactionType", "Id", "PaymentId", "RequestString", "ResponseString", "TransactionDate", "TransactionId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentTransactionLogResponse:
        """Create an instance of PaymentTransactionLogResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentTransactionLogResponse:
        """Create an instance of PaymentTransactionLogResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentTransactionLogResponse.parse_obj(obj)

        _obj = PaymentTransactionLogResponse.parse_obj({
            "avs_response_code": obj.get("AVSResponseCode"),
            "batch_id": obj.get("BatchId"),
            "cvv_response_code": obj.get("CVVResponseCode"),
            "gateway": obj.get("Gateway"),
            "gateway_reason_code": obj.get("GatewayReasonCode"),
            "gateway_reason_code_description": obj.get("GatewayReasonCodeDescription"),
            "gateway_state": obj.get("GatewayState"),
            "gateway_transaction_type": obj.get("GatewayTransactionType"),
            "id": obj.get("Id"),
            "payment_id": obj.get("PaymentId"),
            "request_string": obj.get("RequestString"),
            "response_string": obj.get("ResponseString"),
            "transaction_date": obj.get("TransactionDate"),
            "transaction_id": obj.get("TransactionId")
        })
        return _obj


