# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from com.zuora.models.create_authorization_response_payment_gateway import CreateAuthorizationResponsePaymentGateway
from com.zuora.models.create_authorization_response_reasons import CreateAuthorizationResponseReasons

class CreateAuthorizationResponse(BaseModel):
    """
    CreateAuthorizationResponse
    """
    gateway_order_id: Optional[StrictStr] = Field(None, alias="gatewayOrderId", description="The order ID for the specific gateway.  The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field. ")
    payment_gateway_response: Optional[CreateAuthorizationResponsePaymentGateway] = Field(None, alias="paymentGatewayResponse")
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The ID of the running process when the exception occurs. This field is available only if the `success` field is `false`. ")
    reasons: Optional[conlist(CreateAuthorizationResponseReasons)] = Field(None, description="The container of the error code and message. This field is available only if the `success` field is `false`. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="The ID of the request. This field is available only if the `success` field is `false` ")
    result_code: Optional[StrictStr] = Field(None, alias="resultCode", description="The result code of the request.   0 indicates that the request succeeded, and the following values indicate that the request failed:   - 1: The request is declined.   - 7: The field format is not correct.   - 10: Client connection has timed out.   - 11: Host connection has timed out.   - 12: Processor connection has timed out.   - 13: Gateway server is busy.   - 20: The card type is not supported.   - 21: The merchant account information is invalid.   - 22: A generic error occurred on the processor.   - 40: The card type has not been set up yet.   - 41: The limit for a single transaction is exceeded.   - 42: Address checking failed.   - 43: Card security code checking failed.   - 44: Failed due to the gateway security setting.   - 45: Fraud protection is declined.   - 46: Address checking or card security code checking failed (for Authorize.net gateway only).   - 47: The maximum amount is exceeded (for Authorize.net gateway only).   - 48: The IP address is blocked by the gateway (for Authorize.net gateway only).   - 49: Card security code checking failed (for Authorize.net gateway only).   - 60: User authentication failed.   - 61: The currency code is invalid.   - 62: The transaction ID is invalid.   - 63: The credit card number is invalid.   - 64: The card expiration date is invalid.   - 65: The transaction is duplicated.   - 66: Credit transaction error.   - 67: Void transaction error.   - 90: A valid amount is required.   - 91: The BA code is invalid.   - 92: The account number is invalid.   - 93: The ACH transaction is not accepted by the merchant.   - 94: An error occurred for the ACH transaction.   - 95: The version parameter is invalid.   - 96: The transaction type is invalid.   - 97: The transaction method is invalid.   - 98: The bank account type is invalid.   - 99: The authorization code is invalid.   - 200: General transaction error.   - 500: The transaction is queued for submission.   - 999: Unknown error.   - -1: An error occurred in gateway communication.   - -2: Idempotency is not supported.   - -3: Inquiry call is not supported. ")
    result_message: Optional[StrictStr] = Field(None, alias="resultMessage", description="The corresponding request ID.")
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded.")
    transaction_id: Optional[StrictStr] = Field(None, alias="transactionId", description="The ID of the transaction.")
    __properties = ["gatewayOrderId", "paymentGatewayResponse", "processId", "reasons", "requestId", "resultCode", "resultMessage", "success", "transactionId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAuthorizationResponse:
        """Create an instance of CreateAuthorizationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_gateway_response
        if self.payment_gateway_response:
            _dict['paymentGatewayResponse'] = self.payment_gateway_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAuthorizationResponse:
        """Create an instance of CreateAuthorizationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAuthorizationResponse.parse_obj(obj)

        _obj = CreateAuthorizationResponse.parse_obj({
            "gateway_order_id": obj.get("gatewayOrderId"),
            "payment_gateway_response": CreateAuthorizationResponsePaymentGateway.from_dict(obj.get("paymentGatewayResponse")) if obj.get("paymentGatewayResponse") is not None else None,
            "process_id": obj.get("processId"),
            "reasons": [CreateAuthorizationResponseReasons.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "request_id": obj.get("requestId"),
            "result_code": obj.get("resultCode"),
            "result_message": obj.get("resultMessage"),
            "success": obj.get("success"),
            "transaction_id": obj.get("transactionId")
        })
        return _obj


