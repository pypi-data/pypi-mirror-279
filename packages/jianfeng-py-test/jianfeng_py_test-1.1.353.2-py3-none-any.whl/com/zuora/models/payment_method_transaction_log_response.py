# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class PaymentMethodTransactionLogResponse(BaseModel):
    """
    PaymentMethodTransactionLogResponse
    """
    gateway: Optional[StrictStr] = Field(None, alias="Gateway")
    gateway_reason_code: Optional[StrictStr] = Field(None, alias="GatewayReasonCode")
    gateway_reason_code_description: Optional[StrictStr] = Field(None, alias="GatewayReasonCodeDescription")
    gateway_transaction_type: Optional[StrictStr] = Field(None, alias="GatewayTransactionType")
    id: Optional[StrictStr] = Field(None, alias="Id", description="Object identifier.")
    payment_method_id: Optional[StrictStr] = Field(None, alias="PaymentMethodId")
    payment_method_type: Optional[StrictStr] = Field(None, alias="PaymentMethodType")
    request_string: Optional[StrictStr] = Field(None, alias="RequestString")
    response_string: Optional[StrictStr] = Field(None, alias="ResponseString")
    transaction_date: Optional[datetime] = Field(None, alias="TransactionDate")
    transaction_id: Optional[StrictStr] = Field(None, alias="TransactionId")
    __properties = ["Gateway", "GatewayReasonCode", "GatewayReasonCodeDescription", "GatewayTransactionType", "Id", "PaymentMethodId", "PaymentMethodType", "RequestString", "ResponseString", "TransactionDate", "TransactionId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentMethodTransactionLogResponse:
        """Create an instance of PaymentMethodTransactionLogResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentMethodTransactionLogResponse:
        """Create an instance of PaymentMethodTransactionLogResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentMethodTransactionLogResponse.parse_obj(obj)

        _obj = PaymentMethodTransactionLogResponse.parse_obj({
            "gateway": obj.get("Gateway"),
            "gateway_reason_code": obj.get("GatewayReasonCode"),
            "gateway_reason_code_description": obj.get("GatewayReasonCodeDescription"),
            "gateway_transaction_type": obj.get("GatewayTransactionType"),
            "id": obj.get("Id"),
            "payment_method_id": obj.get("PaymentMethodId"),
            "payment_method_type": obj.get("PaymentMethodType"),
            "request_string": obj.get("RequestString"),
            "response_string": obj.get("ResponseString"),
            "transaction_date": obj.get("TransactionDate"),
            "transaction_id": obj.get("TransactionId")
        })
        return _obj


