# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from com.zuora.models.deleted_record import DeletedRecord

class CreateBatchQueryRequest(BaseModel):
    """
    CreateBatchQueryRequest
    """
    api_version: Optional[StrictStr] = Field(None, alias="apiVersion", description="The API version for the query. If an API version is not specified, the latest version is used by default. Using the latest WSDL version is most useful for reporting use cases. For integration purposes, specify the WSDL version to ensure consistent query behavior, that is, what is supported and included in the response returned by the API.  **Note**: As of API version 69 and later, Zuora changed the format of certain fields. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/G_SOAP_API/AB_Getting_started_with_the__SOAP_API/C_Date_Field_Changes_in_the_SOAP_API\" target=\"_blank\">Date Field Changes in the SOAP API</a> for more information and a list of affected fields. ")
    convert_to_currencies: Optional[StrictStr] = Field(None, alias="convertToCurrencies", description="The currencies that you want to convert transaction amounts into. You can specify any number of currencies. Specify the currencies using their <a href=\"https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/D_Currencies_and_Their_3-Letter_Codes\" target=\"_blank\">ISO currency codes</a> and separate each currency with a comma, for example, \"EUR,GBP,JPY\".  See <a href=\"https://knowledgecenter.zuora.com/Zuora_Collect/Zuora_Finance/D_Finance_Settings/F_Foreign_Currency_Conversion/Foreign_Currency_Conversion_for_Data_Source_Exports#Creating_the_Data_Source_Export_Using_the_AQuA_API\" target=\"_blank\">Convert Transaction Amounts Into Any Currency</a> for more information and examples.  To use this field, you must have <a href=\"https://knowledgecenter.zuora.com/Zuora_Collect/Zuora_Finance/D_Finance_Settings/F_Foreign_Currency_Conversion\" target=\"_blank\">Foreign Currency Conversion</a> enabled and you must be using API version 78 or later. ")
    deleted: Optional[DeletedRecord] = None
    name: Optional[StrictStr] = Field(None, description="The query name that can uniquely identify the query in this API request. ")
    query: Optional[StrictStr] = Field(None, description="A valid ZOQL query or Export ZOQL query statement. ")
    type: Optional[StrictStr] = None
    __properties = ["apiVersion", "convertToCurrencies", "deleted", "name", "query", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateBatchQueryRequest:
        """Create an instance of CreateBatchQueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of deleted
        if self.deleted:
            _dict['deleted'] = self.deleted.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateBatchQueryRequest:
        """Create an instance of CreateBatchQueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateBatchQueryRequest.parse_obj(obj)

        _obj = CreateBatchQueryRequest.parse_obj({
            "api_version": obj.get("apiVersion"),
            "convert_to_currencies": obj.get("convertToCurrencies"),
            "deleted": DeletedRecord.from_dict(obj.get("deleted")) if obj.get("deleted") is not None else None,
            "name": obj.get("name"),
            "query": obj.get("query"),
            "type": obj.get("type")
        })
        return _obj


