# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CollectDebitMemoRequestPayment(BaseModel):
    """
    Some detail info that would be used to processed an electronic payment. The info would only effect when `collect` set to `true`.   # noqa: E501
    """
    gateway_id: Optional[StrictStr] = Field(None, alias="gatewayId", description="The ID of the gateway instance that processes the payment. The ID must be a valid gateway instance ID and this gateway must support the specific payment method. If no gateway ID is specified in the request body, the default gateway for the customer account is used automatically, if this default one is not configured, the default gateway of the tenant would be used. ")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="The unique ID of the payment method that the customer used to make the payment. If no payment method ID is specified in the request body, the default payment method for the customer account is used automatically. If the default payment method is different from the type of payments that you want to create, an error occurs. ")
    __properties = ["gatewayId", "paymentMethodId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CollectDebitMemoRequestPayment:
        """Create an instance of CollectDebitMemoRequestPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CollectDebitMemoRequestPayment:
        """Create an instance of CollectDebitMemoRequestPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CollectDebitMemoRequestPayment.parse_obj(obj)

        _obj = CollectDebitMemoRequestPayment.parse_obj({
            "gateway_id": obj.get("gatewayId"),
            "payment_method_id": obj.get("paymentMethodId")
        })
        return _obj


