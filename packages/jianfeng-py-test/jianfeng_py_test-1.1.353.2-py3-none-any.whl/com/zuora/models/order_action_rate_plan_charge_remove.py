# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class OrderActionRatePlanChargeRemove(BaseModel):
    """
    The JSON object containing the information for a charge update(custom fields only) in the 'RemoveProduct' type order action. A custom field of rate plan charge can be updated from a subscription through one order action. - If you update customFields of a charge while removing a rate plan, specify the following fields:   - `chargeNumber`   - `productRatePlanChargeId`   - `productRatePlanNumber`   - `uniqueToken`   - `customFields`  # noqa: E501
    """
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="Read only. Identifies the charge to be updated. ")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="productRatePlanChargeId", description="Identifier of the rate plan that was updated. ")
    product_rate_plan_number: Optional[StrictStr] = Field(None, alias="productRatePlanNumber", description="Number of a product rate plan for this subscription. ")
    unique_token: Optional[StrictStr] = Field(None, alias="uniqueToken", description="A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions. ")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of a Rate Plan Charge object. ")
    __properties = ["chargeNumber", "productRatePlanChargeId", "productRatePlanNumber", "uniqueToken", "customFields"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderActionRatePlanChargeRemove:
        """Create an instance of OrderActionRatePlanChargeRemove from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderActionRatePlanChargeRemove:
        """Create an instance of OrderActionRatePlanChargeRemove from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderActionRatePlanChargeRemove.parse_obj(obj)

        _obj = OrderActionRatePlanChargeRemove.parse_obj({
            "charge_number": obj.get("chargeNumber"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "product_rate_plan_number": obj.get("productRatePlanNumber"),
            "unique_token": obj.get("uniqueToken"),
            "custom_fields": obj.get("customFields")
        })
        return _obj


