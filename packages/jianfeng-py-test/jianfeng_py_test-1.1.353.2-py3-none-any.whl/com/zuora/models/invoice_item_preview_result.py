# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from com.zuora.models.invoice_item_preview_result_additional_info import InvoiceItemPreviewResultAdditionalInfo
from com.zuora.models.invoice_item_preview_result_taxation_items import InvoiceItemPreviewResultTaxationItems

class InvoiceItemPreviewResult(BaseModel):
    """
    InvoiceItemPreviewResult
    """
    additional_info: Optional[InvoiceItemPreviewResultAdditionalInfo] = Field(None, alias="additionalInfo")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax")
    applied_to_charge_number: Optional[StrictStr] = Field(None, alias="appliedToChargeNumber", description="Available when the chargeNumber of the charge that discount applies to was specified in the request or when the order is amending an existing subscription.")
    charge_description: Optional[StrictStr] = Field(None, alias="chargeDescription")
    charge_name: Optional[StrictStr] = Field(None, alias="chargeName")
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="Available when the chargeNumber was specified in the request or when the order is amending an existing subscription.")
    order_line_item_number: Optional[StrictStr] = Field(None, alias="orderLineItemNumber", description="A sequential number auto-assigned for each of order line items in a order, used as an index, for example, \"1\".")
    processing_type: Optional[StrictStr] = Field(None, alias="processingType")
    product_name: Optional[StrictStr] = Field(None, alias="productName")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="productRatePlanChargeId")
    service_end_date: Optional[date] = Field(None, alias="serviceEndDate")
    service_start_date: Optional[date] = Field(None, alias="serviceStartDate")
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount")
    taxation_items: Optional[conlist(InvoiceItemPreviewResultTaxationItems)] = Field(None, alias="taxationItems", description="List of taxation items.  **Note**: This field is only available if you set the `zuora-version` request header to `309.0` or later. ")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unitPrice", description="The per-unit price of the invoice item. ")
    __properties = ["additionalInfo", "amountWithoutTax", "appliedToChargeNumber", "chargeDescription", "chargeName", "chargeNumber", "orderLineItemNumber", "processingType", "productName", "productRatePlanChargeId", "serviceEndDate", "serviceStartDate", "subscriptionNumber", "taxAmount", "taxationItems", "unitPrice"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InvoiceItemPreviewResult:
        """Create an instance of InvoiceItemPreviewResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of additional_info
        if self.additional_info:
            _dict['additionalInfo'] = self.additional_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taxation_items (list)
        _items = []
        if self.taxation_items:
            for _item in self.taxation_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxationItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InvoiceItemPreviewResult:
        """Create an instance of InvoiceItemPreviewResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InvoiceItemPreviewResult.parse_obj(obj)

        _obj = InvoiceItemPreviewResult.parse_obj({
            "additional_info": InvoiceItemPreviewResultAdditionalInfo.from_dict(obj.get("additionalInfo")) if obj.get("additionalInfo") is not None else None,
            "amount_without_tax": obj.get("amountWithoutTax"),
            "applied_to_charge_number": obj.get("appliedToChargeNumber"),
            "charge_description": obj.get("chargeDescription"),
            "charge_name": obj.get("chargeName"),
            "charge_number": obj.get("chargeNumber"),
            "order_line_item_number": obj.get("orderLineItemNumber"),
            "processing_type": obj.get("processingType"),
            "product_name": obj.get("productName"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "service_end_date": obj.get("serviceEndDate"),
            "service_start_date": obj.get("serviceStartDate"),
            "subscription_number": obj.get("subscriptionNumber"),
            "tax_amount": obj.get("taxAmount"),
            "taxation_items": [InvoiceItemPreviewResultTaxationItems.from_dict(_item) for _item in obj.get("taxationItems")] if obj.get("taxationItems") is not None else None,
            "unit_price": obj.get("unitPrice")
        })
        return _obj


