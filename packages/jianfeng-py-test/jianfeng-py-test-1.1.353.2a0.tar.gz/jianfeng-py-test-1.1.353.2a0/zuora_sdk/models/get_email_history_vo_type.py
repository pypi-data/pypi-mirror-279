# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetEmailHistoryVOType(BaseModel):
    """
    GetEmailHistoryVOType
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="ID of an account. ", alias="accountId")
    bcc: Optional[StrictStr] = Field(default=None, description="Blind carbon copy recipients of the email. ")
    cc: Optional[StrictStr] = Field(default=None, description="Carbon Copy recipients of the email. ")
    error_message: Optional[StrictStr] = Field(default=None, description="null if the content of result is \"OK\". A description of the error if the content of result is not \"OK\". ", alias="errorMessage")
    event_category: Optional[StrictStr] = Field(default=None, description="The event category of the email. ", alias="eventCategory")
    from_email: Optional[StrictStr] = Field(default=None, description="The sender of the email. ", alias="fromEmail")
    notification: Optional[StrictStr] = Field(default=None, description="The name of the notification. ")
    reply_to: Optional[StrictStr] = Field(default=None, description="The reply-to address as configured in the email template. ", alias="replyTo")
    result: Optional[StrictStr] = Field(default=None, description="The result from the mail server of sending the email. ")
    send_time: Optional[StrictStr] = Field(default=None, description="The date and time the email was sent. ", alias="sendTime")
    subject: Optional[StrictStr] = Field(default=None, description="The subject of the email. ")
    to_email: Optional[StrictStr] = Field(default=None, description="The intended recipient of the email. ", alias="toEmail")
    __properties: ClassVar[List[str]] = ["accountId", "bcc", "cc", "errorMessage", "eventCategory", "fromEmail", "notification", "replyTo", "result", "sendTime", "subject", "toEmail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEmailHistoryVOType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEmailHistoryVOType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "bcc": obj.get("bcc"),
            "cc": obj.get("cc"),
            "errorMessage": obj.get("errorMessage"),
            "eventCategory": obj.get("eventCategory"),
            "fromEmail": obj.get("fromEmail"),
            "notification": obj.get("notification"),
            "replyTo": obj.get("replyTo"),
            "result": obj.get("result"),
            "sendTime": obj.get("sendTime"),
            "subject": obj.get("subject"),
            "toEmail": obj.get("toEmail")
        })
        return _obj


