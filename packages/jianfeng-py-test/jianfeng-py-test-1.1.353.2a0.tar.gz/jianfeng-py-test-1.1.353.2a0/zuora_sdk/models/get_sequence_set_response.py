# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.credit_memo_entity_prefix import CreditMemoEntityPrefix
from zuora_sdk.models.debit_memo_entity_prefix import DebitMemoEntityPrefix
from zuora_sdk.models.invoice_entity_prefix import InvoiceEntityPrefix
from zuora_sdk.models.payment_entity_prefix import PaymentEntityPrefix
from zuora_sdk.models.refund_entity_prefix import RefundEntityPrefix
from typing import Optional, Set
from typing_extensions import Self

class GetSequenceSetResponse(BaseModel):
    """
    
    """ # noqa: E501
    credit_memo: Optional[CreditMemoEntityPrefix] = Field(default=None, alias="creditMemo")
    debit_memo: Optional[DebitMemoEntityPrefix] = Field(default=None, alias="debitMemo")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the sequence set. For example, 402892c74c9193cd014c96bbe7c101f9. ")
    invoice: Optional[InvoiceEntityPrefix] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the sequence set. ")
    payment: Optional[PaymentEntityPrefix] = None
    refund: Optional[RefundEntityPrefix] = None
    __properties: ClassVar[List[str]] = ["creditMemo", "debitMemo", "id", "invoice", "name", "payment", "refund"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSequenceSetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credit_memo
        if self.credit_memo:
            _dict['creditMemo'] = self.credit_memo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debit_memo
        if self.debit_memo:
            _dict['debitMemo'] = self.debit_memo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment
        if self.payment:
            _dict['payment'] = self.payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund
        if self.refund:
            _dict['refund'] = self.refund.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSequenceSetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creditMemo": CreditMemoEntityPrefix.from_dict(obj["creditMemo"]) if obj.get("creditMemo") is not None else None,
            "debitMemo": DebitMemoEntityPrefix.from_dict(obj["debitMemo"]) if obj.get("debitMemo") is not None else None,
            "id": obj.get("id"),
            "invoice": InvoiceEntityPrefix.from_dict(obj["invoice"]) if obj.get("invoice") is not None else None,
            "name": obj.get("name"),
            "payment": PaymentEntityPrefix.from_dict(obj["payment"]) if obj.get("payment") is not None else None,
            "refund": RefundEntityPrefix.from_dict(obj["refund"]) if obj.get("refund") is not None else None
        })
        return _obj


