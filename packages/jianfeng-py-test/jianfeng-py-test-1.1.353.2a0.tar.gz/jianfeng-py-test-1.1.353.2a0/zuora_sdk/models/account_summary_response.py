# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.account_summary_basic_info import AccountSummaryBasicInfo
from zuora_sdk.models.account_summary_invoice import AccountSummaryInvoice
from zuora_sdk.models.account_summary_payment import AccountSummaryPayment
from zuora_sdk.models.account_summary_subscription import AccountSummarySubscription
from zuora_sdk.models.account_summary_usage import AccountSummaryUsage
from zuora_sdk.models.contact import Contact
from zuora_sdk.models.tax_info import TaxInfo
from typing import Optional, Set
from typing_extensions import Self

class AccountSummaryResponse(BaseModel):
    """
    AccountSummaryResponse
    """ # noqa: E501
    basic_info: Optional[AccountSummaryBasicInfo] = Field(default=None, alias="basicInfo")
    bill_to_contact: Optional[Contact] = Field(default=None, alias="billToContact")
    invoices: Optional[List[AccountSummaryInvoice]] = Field(default=None, description="Container for invoices. Only returns the last 6 invoices. ")
    payments: Optional[List[AccountSummaryPayment]] = Field(default=None, description="Container for payments. Only returns the last 6 payments. ")
    sold_to_contact: Optional[Contact] = Field(default=None, alias="soldToContact")
    subscriptions: Optional[List[AccountSummarySubscription]] = Field(default=None, description="Container for subscriptions. ")
    success: Optional[StrictBool] = Field(default=None, description="Returns `true` if the request was processed successfully. ")
    tax_info: Optional[TaxInfo] = Field(default=None, alias="taxInfo")
    usage: Optional[List[AccountSummaryUsage]] = Field(default=None, description="Container for usage data. Only returns the last 6 months of usage.  **Note:** If the Active Rating feature is enabled, no usage data is returned in the response body field. ")
    __properties: ClassVar[List[str]] = ["basicInfo", "billToContact", "invoices", "payments", "soldToContact", "subscriptions", "success", "taxInfo", "usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSummaryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_info
        if self.basic_info:
            _dict['basicInfo'] = self.basic_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item in self.invoices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item in self.payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact
        if self.sold_to_contact:
            _dict['soldToContact'] = self.sold_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of tax_info
        if self.tax_info:
            _dict['taxInfo'] = self.tax_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in usage (list)
        _items = []
        if self.usage:
            for _item in self.usage:
                if _item:
                    _items.append(_item.to_dict())
            _dict['usage'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSummaryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basicInfo": AccountSummaryBasicInfo.from_dict(obj["basicInfo"]) if obj.get("basicInfo") is not None else None,
            "billToContact": Contact.from_dict(obj["billToContact"]) if obj.get("billToContact") is not None else None,
            "invoices": [AccountSummaryInvoice.from_dict(_item) for _item in obj["invoices"]] if obj.get("invoices") is not None else None,
            "payments": [AccountSummaryPayment.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "soldToContact": Contact.from_dict(obj["soldToContact"]) if obj.get("soldToContact") is not None else None,
            "subscriptions": [AccountSummarySubscription.from_dict(_item) for _item in obj["subscriptions"]] if obj.get("subscriptions") is not None else None,
            "success": obj.get("success"),
            "taxInfo": TaxInfo.from_dict(obj["taxInfo"]) if obj.get("taxInfo") is not None else None,
            "usage": [AccountSummaryUsage.from_dict(_item) for _item in obj["usage"]] if obj.get("usage") is not None else None
        })
        return _obj


