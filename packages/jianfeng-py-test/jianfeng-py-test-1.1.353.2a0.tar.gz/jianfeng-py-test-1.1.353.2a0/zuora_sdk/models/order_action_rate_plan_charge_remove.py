# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderActionRatePlanChargeRemove(BaseModel):
    """
    The JSON object containing the information for a charge update(custom fields only) in the 'RemoveProduct' type order action. A custom field of rate plan charge can be updated from a subscription through one order action. - If you update customFields of a charge while removing a rate plan, specify the following fields:   - `chargeNumber`   - `productRatePlanChargeId`   - `productRatePlanNumber`   - `uniqueToken`   - `customFields`
    """ # noqa: E501
    charge_number: Optional[StrictStr] = Field(default=None, description="Read only. Identifies the charge to be updated. ", alias="chargeNumber")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(default=None, description="Identifier of the rate plan that was updated. ", alias="productRatePlanChargeId")
    product_rate_plan_number: Optional[StrictStr] = Field(default=None, description="Number of a product rate plan for this subscription. ", alias="productRatePlanNumber")
    unique_token: Optional[StrictStr] = Field(default=None, description="A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions. ", alias="uniqueToken")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Container for custom fields of a Rate Plan Charge object. ", alias="customFields")
    __properties: ClassVar[List[str]] = ["chargeNumber", "productRatePlanChargeId", "productRatePlanNumber", "uniqueToken", "customFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderActionRatePlanChargeRemove from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderActionRatePlanChargeRemove from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chargeNumber": obj.get("chargeNumber"),
            "productRatePlanChargeId": obj.get("productRatePlanChargeId"),
            "productRatePlanNumber": obj.get("productRatePlanNumber"),
            "uniqueToken": obj.get("uniqueToken"),
            "customFields": obj.get("customFields")
        })
        return _obj


