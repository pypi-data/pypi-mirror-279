# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from zuora_sdk.models.charge_tier import ChargeTier
from zuora_sdk.models.price_change_option import PriceChangeOption
from typing import Optional, Set
from typing_extensions import Self

class UsageTieredWithOveragePricingOverride(BaseModel):
    """
    Pricing information about a usage charge that uses the \"tiered with overage\" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier. 
    """ # noqa: E501
    price_change_option: Optional[StrictStr] = Field(default=None, alias="priceChangeOption")
    price_increase_percentage: Optional[Union[Annotated[float, Field(strict=True, ge=-100)], Annotated[int, Field(strict=True, ge=-100)]]] = Field(default=None, description="Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`. ", alias="priceIncreasePercentage")
    number_of_periods: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Number of periods that Zuora considers when calculating overage charges with overage smoothing. ", alias="numberOfPeriods")
    overage_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price per overage unit consumed. ", alias="overagePrice")
    overage_unused_units_credit_option: Optional[StrictStr] = Field(default=None, description="Specifies whether to credit the customer for unused units.  If the value of this field is `CreditBySpecificRate`, use the `unusedUnitsCreditRates` field to specify the rate at which to credit the customer for unused units. ", alias="overageUnusedUnitsCreditOption")
    tiers: Optional[List[ChargeTier]] = Field(default=None, description="List of cumulative pricing tiers in the charge. ")
    unused_units_credit_rates: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Per-unit rate at which to credit the customer for unused units. Only applicable if the value of the `overageUnusedUnitsCreditOption` field is `CreditBySpecificRate`. ", alias="unusedUnitsCreditRates")
    __properties: ClassVar[List[str]] = ["priceChangeOption", "priceIncreasePercentage", "numberOfPeriods", "overagePrice", "overageUnusedUnitsCreditOption", "tiers", "unusedUnitsCreditRates"]

    @field_validator('overage_unused_units_credit_option')
    def overage_unused_units_credit_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NoCredit', 'CreditBySpecificRate']):
            raise ValueError("must be one of enum values ('NoCredit', 'CreditBySpecificRate')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageTieredWithOveragePricingOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageTieredWithOveragePricingOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "priceChangeOption": obj.get("priceChangeOption"),
            "priceIncreasePercentage": obj.get("priceIncreasePercentage"),
            "numberOfPeriods": obj.get("numberOfPeriods"),
            "overagePrice": obj.get("overagePrice"),
            "overageUnusedUnitsCreditOption": obj.get("overageUnusedUnitsCreditOption"),
            "tiers": [ChargeTier.from_dict(_item) for _item in obj["tiers"]] if obj.get("tiers") is not None else None,
            "unusedUnitsCreditRates": obj.get("unusedUnitsCreditRates")
        })
        return _obj


