# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.callout_auth import CalloutAuth
from typing import Optional, Set
from typing_extensions import Self

class PutPublicNotificationDefinitionRequestCallout(BaseModel):
    """
    PutPublicNotificationDefinitionRequestCallout
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=True, description="The status of the callout. The default value is `true`.")
    callout_auth: Optional[CalloutAuth] = Field(default=None, alias="calloutAuth")
    callout_baseurl: Annotated[str, Field(min_length=10, strict=True)] = Field(description="The callout URL. It must start with 'https://'", alias="calloutBaseurl")
    callout_params: Optional[Dict[str, StrictStr]] = Field(default=None, description="A key-value map of merge fields of this callout. ", alias="calloutParams")
    callout_retry: Optional[StrictBool] = Field(default=True, description="Specified whether to retry the callout when the callout fails. The default value is `true`.", alias="calloutRetry")
    description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Description for the callout.")
    http_method: StrictStr = Field(alias="httpMethod")
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="The name of the created callout.")
    required_auth: StrictBool = Field(description="Specifies whether the callout requires auth.", alias="requiredAuth")
    __properties: ClassVar[List[str]] = ["active", "calloutAuth", "calloutBaseurl", "calloutParams", "calloutRetry", "description", "httpMethod", "name", "requiredAuth"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutPublicNotificationDefinitionRequestCallout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of callout_auth
        if self.callout_auth:
            _dict['calloutAuth'] = self.callout_auth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutPublicNotificationDefinitionRequestCallout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active") if obj.get("active") is not None else True,
            "calloutAuth": CalloutAuth.from_dict(obj["calloutAuth"]) if obj.get("calloutAuth") is not None else None,
            "calloutBaseurl": obj.get("calloutBaseurl"),
            "calloutParams": obj.get("calloutParams"),
            "calloutRetry": obj.get("calloutRetry") if obj.get("calloutRetry") is not None else True,
            "description": obj.get("description"),
            "httpMethod": obj.get("httpMethod"),
            "name": obj.get("name"),
            "requiredAuth": obj.get("requiredAuth")
        })
        return _obj


