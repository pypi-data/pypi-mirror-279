# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateAccountCreditCardHolderInfo(BaseModel):
    """
    Container for cardholder information. 
    """ # noqa: E501
    address_line1: StrictStr = Field(description="First address line, 255 characters or less. ", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="Second address line, 255 characters or less. ", alias="addressLine2")
    card_holder_name: StrictStr = Field(description="The card holder's full name as it appears on the card, e.g., \"John J Smith\", 50 characters or less. ", alias="cardHolderName")
    city: StrictStr = Field(description="City, 40 characters or less. It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    country: StrictStr = Field(description="Country; must be a valid country name or abbreviation. It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    email: Optional[StrictStr] = Field(default=None, description="Card holder's email address, 80 characters or less. ")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number, 40 characters or less. ")
    state: StrictStr = Field(description="State; must be a valid state name or 2-character abbreviation. ")
    zip_code: StrictStr = Field(description="Zip code, 20 characters or less. ", alias="zipCode")
    __properties: ClassVar[List[str]] = ["addressLine1", "addressLine2", "cardHolderName", "city", "country", "email", "phone", "state", "zipCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAccountCreditCardHolderInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAccountCreditCardHolderInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "cardHolderName": obj.get("cardHolderName"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "zipCode": obj.get("zipCode")
        })
        return _obj


