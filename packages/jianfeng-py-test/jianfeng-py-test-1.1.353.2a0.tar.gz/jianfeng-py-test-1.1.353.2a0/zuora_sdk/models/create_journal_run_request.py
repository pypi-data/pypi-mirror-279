# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.create_journal_run_request_transaction_type import CreateJournalRunRequestTransactionType
from zuora_sdk.models.organization_label import OrganizationLabel
from typing import Optional, Set
from typing_extensions import Self

class CreateJournalRunRequest(BaseModel):
    """
    CreateJournalRunRequest
    """ # noqa: E501
    accounting_period_name: Optional[StrictStr] = Field(default=None, description="Name of the accounting period.  This field determines the target start and end dates of the journal run.  Required if you do not include `targetStartDate` and `targetEndDate`. ", alias="accountingPeriodName")
    journal_entry_date: date = Field(description="Date of the journal entry. ", alias="journalEntryDate")
    target_end_date: Optional[date] = Field(default=None, description="The target end date of the journal run.  If you include `accountingPeriodName`, the `targetEndDate` must be empty or the same as the end date of the accounting period specified in `accountingPeriodName`. ", alias="targetEndDate")
    target_start_date: Optional[date] = Field(default=None, description="The target start date of the journal run.  Required if you include targetEndDate.  If you include `accountingPeriodName`, the `targetStartDate` must be empty or the same as the start date of the accounting period specified in `accountingPeriodName`. ", alias="targetStartDate")
    organization_labels: Optional[List[OrganizationLabel]] = Field(default=None, description="Organization labels. ", alias="organizationLabels")
    transaction_types: List[CreateJournalRunRequestTransactionType] = Field(description="Transaction types included in the journal run.  You can include one or more transaction types. ", alias="transactionTypes")
    __properties: ClassVar[List[str]] = ["accountingPeriodName", "journalEntryDate", "targetEndDate", "targetStartDate", "organizationLabels", "transactionTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateJournalRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in organization_labels (list)
        _items = []
        if self.organization_labels:
            for _item in self.organization_labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizationLabels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transaction_types (list)
        _items = []
        if self.transaction_types:
            for _item in self.transaction_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transactionTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateJournalRunRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountingPeriodName": obj.get("accountingPeriodName"),
            "journalEntryDate": obj.get("journalEntryDate"),
            "targetEndDate": obj.get("targetEndDate"),
            "targetStartDate": obj.get("targetStartDate"),
            "organizationLabels": [OrganizationLabel.from_dict(_item) for _item in obj["organizationLabels"]] if obj.get("organizationLabels") is not None else None,
            "transactionTypes": [CreateJournalRunRequestTransactionType.from_dict(_item) for _item in obj["transactionTypes"]] if obj.get("transactionTypes") is not None else None
        })
        return _obj


