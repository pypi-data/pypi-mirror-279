# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zuora_sdk.models.create_order_charge_update import CreateOrderChargeUpdate

class TestCreateOrderChargeUpdate(unittest.TestCase):
    """CreateOrderChargeUpdate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateOrderChargeUpdate:
        """Test CreateOrderChargeUpdate
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateOrderChargeUpdate`
        """
        model = CreateOrderChargeUpdate()
        if include_optional:
            return CreateOrderChargeUpdate(
                billing = zuora_sdk.models.billing_update.BillingUpdate(
                    billing_period_alignment = 'AlignToCharge', ),
                charge_number = '',
                product_rate_plan_charge_number = '',
                product_rate_plan_charge_id = '',
                custom_fields = {
                    'key' : None
                    },
                description = '',
                effective_date = {"specificTriggerDate":"2000-01-23","triggerEvent":"ContractEffective"},
                prepaid_quantity = 1.337,
                pricing = zuora_sdk.models.create_order_pricing_update.CreateOrderPricingUpdate(
                    charge_model_data = zuora_sdk.models.charge_model_data.chargeModelData(), 
                    discount = zuora_sdk.models.discount.discount(), 
                    recurring_delivery_based = zuora_sdk.models.recurring_delivery_based.recurringDeliveryBased(), 
                    recurring_flat_fee = zuora_sdk.models.recurring_flat_fee.recurringFlatFee(), 
                    recurring_per_unit = zuora_sdk.models.recurring_per_unit.recurringPerUnit(), 
                    recurring_tiered = zuora_sdk.models.recurring_tiered.recurringTiered(), 
                    recurring_volume = zuora_sdk.models.recurring_volume.recurringVolume(), 
                    usage_flat_fee = zuora_sdk.models.usage_flat_fee.usageFlatFee(), 
                    usage_overage = zuora_sdk.models.usage_overage.usageOverage(), 
                    usage_per_unit = zuora_sdk.models.usage_per_unit.usagePerUnit(), 
                    usage_tiered = zuora_sdk.models.usage_tiered.usageTiered(), 
                    usage_tiered_with_overage = zuora_sdk.models.usage_tiered_with_overage.usageTieredWithOverage(), 
                    usage_volume = zuora_sdk.models.usage_volume.usageVolume(), ),
                unique_token = ''
            )
        else:
            return CreateOrderChargeUpdate(
        )
        """

    def testCreateOrderChargeUpdate(self):
        """Test CreateOrderChargeUpdate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
