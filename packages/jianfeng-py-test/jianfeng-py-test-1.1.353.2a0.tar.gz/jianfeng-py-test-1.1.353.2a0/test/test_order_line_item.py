# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zuora_sdk.models.order_line_item import OrderLineItem

class TestOrderLineItem(unittest.TestCase):
    """OrderLineItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrderLineItem:
        """Test OrderLineItem
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrderLineItem`
        """
        model = OrderLineItem()
        if include_optional:
            return OrderLineItem(
                id = '',
                amended_by_order_on = '',
                currency = '',
                amount = 1.337,
                amount_without_tax = 1.337,
                item_number = '',
                uom = '',
                amount_per_unit = 1.337,
                bill_target_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                bill_to = '',
                bill_to_snapshot_id = '',
                billing_rule = 'TriggerWithoutFulfillment',
                accounting_code = '',
                adjustment_liability_accounting_code = '',
                adjustment_revenue_accounting_code = '',
                contract_asset_accounting_code = '',
                contract_liability_accounting_code = '',
                contract_recognized_revenue_accounting_code = '',
                deferred_revenue_accounting_code = '',
                custom_fields = {
                    'key' : None
                    },
                description = '',
                discount = 1.337,
                exclude_item_billing_from_revenue_accounting = True,
                exclude_item_booking_from_revenue_accounting = True,
                revenue_recognition_timing = '',
                revenue_amortization_method = '',
                inline_discount_per_unit = 1.337,
                inline_discount_type = 'Percentage',
                invoice_group_number = '',
                invoice_owner_account_id = '',
                invoice_owner_account_name = '',
                invoice_owner_account_number = '',
                is_allocation_eligible = True,
                is_unbilled = True,
                item_category = 'Sales',
                item_name = '',
                item_state = 'Executing',
                item_type = 'Product',
                list_price = 1.337,
                list_price_per_unit = 1.337,
                original_order_id = '',
                original_order_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                original_order_line_item_id = '',
                original_order_line_item_number = '',
                original_order_number = '',
                owner_account_id = '',
                owner_account_name = '',
                owner_account_number = '',
                product_code = '',
                product_rate_plan_charge_id = '',
                purchase_order_number = '',
                quantity = 1.337,
                quantity_available_for_return = 1.337,
                quantity_fulfilled = 1.337,
                quantity_pending_fulfillment = 1.337,
                recognized_revenue_accounting_code = '',
                related_subscription_number = '',
                requires_fulfillment = True,
                revenue_recognition_rule = '',
                sequence_set_id = '',
                sold_to = '',
                sold_to_snapshot_id = '',
                tax_code = '',
                tax_mode = 'TaxInclusive',
                transaction_end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                transaction_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                unbilled_receivables_accounting_code = ''
            )
        else:
            return OrderLineItem(
        )
        """

    def testOrderLineItem(self):
        """Test OrderLineItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
