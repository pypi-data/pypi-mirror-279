# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zuora_sdk.models.subscription_rate_plan import SubscriptionRatePlan

class TestSubscriptionRatePlan(unittest.TestCase):
    """SubscriptionRatePlan unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionRatePlan:
        """Test SubscriptionRatePlan
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionRatePlan`
        """
        model = SubscriptionRatePlan()
        if include_optional:
            return SubscriptionRatePlan(
                id = '',
                subscription_rate_plan_number = '',
                is_from_external_catalog = True,
                last_change_type = 'Add',
                product_id = '',
                product_name = '',
                product_sku = '',
                product_rate_plan_id = '',
                product_rate_plan_number = '',
                rate_plan_name = '',
                subscription_product_features = [
                    { }
                    ],
                externally_managed_plan_id = '',
                contracted_mrr = 1.337,
                contracted_net_mrr = 1.337,
                as_of_day_gross_mrr = 1.337,
                as_of_day_net_mrr = 1.337,
                rate_plan_charges = [
                    zuora_sdk.models.get_subscription_rate_plan_charges_with_all_segments.GetSubscriptionRatePlanChargesWithAllSegments(
                        billing_day = '', 
                        billing_period = 'Month', 
                        billing_period_alignment = 'AlignToCharge', 
                        billing_timing = 'IN_ADVANCE', 
                        charge_segments = [
                            { }
                            ], 
                        exclude_item_billing_from_revenue_accounting = True, 
                        exclude_item_booking_from_revenue_accounting = True, 
                        invoice_schedule_id = '', 
                        is_allocation_eligible = True, 
                        is_unbilled = True, 
                        list_price_base = 'Per_Billing_Period', 
                        model = 'FlatFee', 
                        name = '', 
                        number = '', 
                        number_of_periods = 56, 
                        original_charge_id = '', 
                        overage_calculation_option = 'EndOfSmoothingPeriod', 
                        overage_unused_units_credit_option = 'NoCredit', 
                        product_category = 'Base Products', 
                        product_class = '', 
                        product_family = '', 
                        product_line = '', 
                        product_rate_plan_charge_id = '', 
                        product_rate_plan_charge_number = '', 
                        rating_group = 'ByBillingPeriod', 
                        smoothing_model = 'RollingWindow', 
                        specific_billing_period = 56, 
                        specific_list_price_base = 1, 
                        type = 'OneTime', 
                        unused_units_credit_rates = 1.337, 
                        uom = '', 
                        usage_record_rating_option = 'EndOfBillingPeriod', 
                        version = 56, 
                        amended_by_order_on = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        apply_discount_to = 'ONETIME', 
                        charge_function = 'Standard', 
                        charge_model_configuration = zuora_sdk.models.charge_model_configuration.chargeModelConfiguration(
                            custom_field_per_unit_rate = '', 
                            custom_field_total_amount = '', 
                            formula = '', ), 
                        charged_through_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        commitment_type = 'UNIT', 
                        prepaid_committed_amount = '', 
                        product_charge_definition_id = '', 
                        is_stacked_discount = True, 
                        reflect_discount_in_net_amount = True, 
                        centralized_price = True, 
                        number_of_deliveries = 1.337, 
                        credit_option = 'TimeBased', 
                        currency = '', 
                        delivery_schedule = zuora_sdk.models.delivery_schedule.DeliverySchedule(
                            frequency = 'Weekly', 
                            monday = True, 
                            tuesday = True, 
                            wednesday = True, 
                            thursday = True, 
                            friday = True, 
                            saturday = True, 
                            sunday = True, ), 
                        description = '', 
                        discount_amount = 1.337, 
                        discount_apply_details = [
                            zuora_sdk.models.discount_apply_details.discountApplyDetails(
                                applied_product_rate_plan_id = '', 
                                applied_product_rate_plan_charge_id = '', 
                                applied_product_name = '', 
                                applied_product_rate_plan_name = '', 
                                applied_product_rate_plan_charge_name = '', )
                            ], 
                        discount_class = '', 
                        discount_level = 'rateplan', 
                        discount_percentage = 1.337, 
                        apply_to_billing_period_partially = True, 
                        dmrc = '', 
                        done = True, 
                        drawdown_rate = '', 
                        drawdown_uom = '', 
                        dtcv = '', 
                        effective_end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        effective_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        end_date_condition = 'Subscription_End', 
                        id = '', 
                        included_units = 1.337, 
                        overage_price = 1.337, 
                        input_argument_id = '', 
                        is_committed = True, 
                        is_prepaid = True, 
                        is_rollover = True, 
                        mrr = '', 
                        original_order_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        prepaid_operation_type = 'topup', 
                        prepaid_quantity = '', 
                        prepaid_total_quantity = '', 
                        prepaid_uom = '', 
                        quantity = 1.337, 
                        price = 1.337, 
                        price_change_option = 'NoChange', 
                        price_increase_percentage = 1.337, 
                        pricing_summary = '', 
                        processed_through_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        rollover_apply = 'ApplyFirst', 
                        rollover_period_length = 56, 
                        rollover_periods = 56, 
                        proration_option = '', 
                        segment = 56, 
                        specific_end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        subscription_charge_interval_pricing = [
                            zuora_sdk.models.interval_pricing.IntervalPricing(
                                sequence = 56, 
                                duration = 56, 
                                price = 1.337, 
                                subscription_charge_interval_price_tiers = null, )
                            ], 
                        tcv = '', 
                        tiers = [
                            zuora_sdk.models.tiers.tiers(
                                tier = 56, 
                                starting_unit = 1.337, 
                                ending_unit = 1.337, 
                                price = 1.337, 
                                price_format = 'FlatFee', )
                            ], 
                        trigger_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        trigger_event = 'ContractEffective', 
                        upsell_origin_charge_number = '', 
                        up_to_periods = 56, 
                        up_to_periods_type = 'Days', 
                        validity_period_type = 'SUBSCRIPTION_TERM', 
                        price_upsell_quantity_stacked = True, 
                        pob_policy = 'Placeholder', 
                        sales_price = 1.337, )
                    ]
            )
        else:
            return SubscriptionRatePlan(
        )
        """

    def testSubscriptionRatePlan(self):
        """Test SubscriptionRatePlan"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
