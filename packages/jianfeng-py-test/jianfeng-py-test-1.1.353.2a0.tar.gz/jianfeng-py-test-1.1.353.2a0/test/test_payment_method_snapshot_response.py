# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zuora_sdk.models.payment_method_snapshot_response import PaymentMethodSnapshotResponse

class TestPaymentMethodSnapshotResponse(unittest.TestCase):
    """PaymentMethodSnapshotResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentMethodSnapshotResponse:
        """Test PaymentMethodSnapshotResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentMethodSnapshotResponse`
        """
        model = PaymentMethodSnapshotResponse()
        if include_optional:
            return PaymentMethodSnapshotResponse(
                account_id = '',
                ach_aba_code = '',
                ach_account_name = '',
                ach_account_number_mask = '',
                ach_account_type = 'BusinessChecking',
                ach_bank_name = '',
                bank_branch_code = '',
                bank_check_digit = '',
                bank_city = '',
                bank_code = '',
                bank_identification_number = '',
                bank_name = '',
                bank_postal_code = '',
                bank_street_name = '',
                bank_street_number = '',
                bank_transfer_account_name = '',
                bank_transfer_account_number_mask = '',
                bank_transfer_account_type = '',
                bank_transfer_type = 'AutomatischIncasso',
                business_identification_code = '',
                city = '',
                company_name = '',
                country = '',
                credit_card_address1 = '',
                credit_card_address2 = '',
                credit_card_city = '',
                credit_card_country = '',
                credit_card_expiration_month = 56,
                credit_card_expiration_year = 56,
                credit_card_holder_name = '',
                credit_card_mask_number = '',
                credit_card_postal_code = '',
                credit_card_state = '',
                credit_card_type = 'AmericanExpress',
                device_session_id = '',
                email = '',
                existing_mandate = 'Yes',
                first_name = '',
                iban = '',
                ip_address = '',
                id = '',
                identity_number = '',
                is_company = True,
                last_failed_sale_transaction_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_name = '',
                last_transaction_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_transaction_status = '',
                mandate_creation_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                mandate_id = '',
                mandate_received = '',
                mandate_update_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                max_consecutive_payment_failures = 56,
                name = '',
                num_consecutive_failures = 56,
                payment_method_id = '',
                payment_method_status = 'Active',
                payment_retry_window = 56,
                paypal_baid = '',
                paypal_email = '',
                paypal_preapproval_key = '',
                paypal_type = 'ExpressCheckout',
                phone = '',
                postal_code = '',
                second_token_id = '',
                state = '',
                street_name = '',
                street_number = '',
                token_id = '',
                total_number_of_error_payments = 56,
                total_number_of_processed_payments = 56,
                type = 'ACH',
                use_default_retry_rule = True
            )
        else:
            return PaymentMethodSnapshotResponse(
        )
        """

    def testPaymentMethodSnapshotResponse(self):
        """Test PaymentMethodSnapshotResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
