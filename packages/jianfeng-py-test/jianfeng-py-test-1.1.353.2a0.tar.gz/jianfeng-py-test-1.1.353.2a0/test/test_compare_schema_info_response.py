# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zuora_sdk.models.compare_schema_info_response import CompareSchemaInfoResponse

class TestCompareSchemaInfoResponse(unittest.TestCase):
    """CompareSchemaInfoResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CompareSchemaInfoResponse:
        """Test CompareSchemaInfoResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CompareSchemaInfoResponse`
        """
        model = CompareSchemaInfoResponse()
        if include_optional:
            return CompareSchemaInfoResponse(
                custom_fields = [
                    {"segregationKeys":["segregationKeys","segregationKeys"],"response":[{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"},{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"}],"difference":{"key":["difference","difference"]}}
                    ],
                custom_objects = [
                    {"segregationKeys":["segregationKeys","segregationKeys"],"response":[{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"},{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"}],"difference":{"key":["difference","difference"]}}
                    ],
                data_access_control = [
                    {"segregationKeys":["segregationKeys","segregationKeys"],"response":[{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"},{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"}],"difference":{"key":["difference","difference"]}}
                    ],
                meta_data = zuora_sdk.models.json_node.JsonNode(),
                notifications = [
                    {"segregationKeys":["segregationKeys","segregationKeys"],"response":[{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"},{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"}],"difference":{"key":["difference","difference"]}}
                    ],
                product_catalog = [
                    {"segregationKeys":["segregationKeys","segregationKeys"],"response":[{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"},{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"}],"difference":{"key":["difference","difference"]}}
                    ],
                settings = [
                    {"segregationKeys":["segregationKeys","segregationKeys"],"response":[{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"},{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"}],"difference":{"key":["difference","difference"]}}
                    ],
                workflows = [
                    {"segregationKeys":["segregationKeys","segregationKeys"],"response":[{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"},{"componentType":"componentType","currentTargetResponse":"{}","errorMessage":"errorMessage","httpMethods":"httpMethods","description":"description","sourceResponse":"{}","segregationKey":"segregationKey","result":"result","migrationId":"migrationId","migratedOn":"2000-01-23T04:56:07.000+00:00","updateStatus":"updateStatus","disabled":"disabled","attribute":"attribute","id":"id","pathPattern":"pathPattern","previousTargetResponse":"{}","key":"key","status":"status"}],"difference":{"key":["difference","difference"]}}
                    ]
            )
        else:
            return CompareSchemaInfoResponse(
        )
        """

    def testCompareSchemaInfoResponse(self):
        """Test CompareSchemaInfoResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
