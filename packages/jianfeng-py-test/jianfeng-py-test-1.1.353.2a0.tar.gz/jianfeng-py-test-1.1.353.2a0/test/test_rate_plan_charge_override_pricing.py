# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zuora_sdk.models.rate_plan_charge_override_pricing import RatePlanChargeOverridePricing

class TestRatePlanChargeOverridePricing(unittest.TestCase):
    """RatePlanChargeOverridePricing unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RatePlanChargeOverridePricing:
        """Test RatePlanChargeOverridePricing
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RatePlanChargeOverridePricing`
        """
        model = RatePlanChargeOverridePricing()
        if include_optional:
            return RatePlanChargeOverridePricing(
                charge_model_data = zuora_sdk.models.charge_model_data.chargeModelData(
                    charge_model_configuration = zuora_sdk.models.charge_model_configuration.chargeModelConfiguration(
                        custom_field_per_unit_rate = '', 
                        custom_field_total_amount = '', 
                        formula = '', ), 
                    tiers = [
                        {"endingUnit":2.027123023002322,"price":4.145608029883936,"priceFormat":"FlatFee","startingUnit":7.386281948385884,"tier":1}
                        ], ),
                discount = {"applyDiscountTo":"ONETIME","discountAmount":1.0246457001441578,"discountLevel":"rateplan","discountPercentage":1.4894159098541704,"priceChangeOption":"NoChange"},
                one_time_flat_fee = {"listPrice":6.84685269835264},
                one_time_per_unit = {"quantity":0.11730742509559433,"listPrice":7.457744773683766},
                one_time_tiered = {"tiers":[{"priceFormat":"FlatFee","tier":1,"endingUnit":2.027123023002322,"price":4.145608029883936,"startingUnit":7.386281948385884},{"priceFormat":"FlatFee","tier":1,"endingUnit":2.027123023002322,"price":4.145608029883936,"startingUnit":7.386281948385884}],"quantity":0.4965218492984954},
                one_time_volume = {"tiers":[{"priceFormat":"FlatFee","tier":1,"endingUnit":2.027123023002322,"price":4.145608029883936,"startingUnit":7.386281948385884},{"priceFormat":"FlatFee","tier":1,"endingUnit":2.027123023002322,"price":4.145608029883936,"startingUnit":7.386281948385884}],"quantity":0.5025004791520294},
                recurring_delivery = None,
                recurring_flat_fee = None,
                recurring_per_unit = None,
                recurring_tiered = None,
                recurring_volume = None,
                usage_flat_fee = None,
                usage_overage = None,
                usage_per_unit = None,
                usage_tiered = None,
                usage_tiered_with_overage = None,
                usage_volume = None
            )
        else:
            return RatePlanChargeOverridePricing(
        )
        """

    def testRatePlanChargeOverridePricing(self):
        """Test RatePlanChargeOverridePricing"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
