# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class OrderActionRatePlanAmendment(BaseModel):
    """
    The amendment that is related to the subscription rate plan.   # noqa: E501
    """
    code: Optional[StrictStr] = Field(None, description="The amendment code. ")
    contract_effective_date: Optional[date] = Field(None, alias="contractEffectiveDate", description="The date when the amendment becomes effective for billing purposes, as `yyyy-mm-dd`. ")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="The ID of the user who created this amendment. ")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The time that the amendment gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.")
    customer_acceptance_date: Optional[date] = Field(None, alias="customerAcceptanceDate", description="The date when the customer accepts the amendment changes to the subscription, as `yyyy-mm-dd`. ")
    description: Optional[StrictStr] = Field(None, description="Description of the amendment. ")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="The date when the amendment changes take effective.  ")
    id: Optional[StrictStr] = Field(None, description="The amendment ID. ")
    name: Optional[StrictStr] = Field(None, description="The name of the amendment. ")
    service_activation_date: Optional[date] = Field(None, alias="serviceActivationDate", description="The date when service is activated, as `yyyy-mm-dd`. ")
    type: Optional[StrictStr] = Field(None, description="Type of the amendment. Possible values are:   - NewProduct - RemoveProduct - UpdateProduct ")
    updated_by: Optional[StrictStr] = Field(None, alias="updatedBy", description="The ID of the user who updated this amendment.")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The time that the amendment gets updated in the system, in the `YYYY-MM-DD HH:MM:SS` format.")
    __properties = ["code", "contractEffectiveDate", "createdBy", "createdDate", "customerAcceptanceDate", "description", "effectiveDate", "id", "name", "serviceActivationDate", "type", "updatedBy", "updatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderActionRatePlanAmendment:
        """Create an instance of OrderActionRatePlanAmendment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderActionRatePlanAmendment:
        """Create an instance of OrderActionRatePlanAmendment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderActionRatePlanAmendment.parse_obj(obj)

        _obj = OrderActionRatePlanAmendment.parse_obj({
            "code": obj.get("code"),
            "contract_effective_date": obj.get("contractEffectiveDate"),
            "created_by": obj.get("createdBy"),
            "created_date": obj.get("createdDate"),
            "customer_acceptance_date": obj.get("customerAcceptanceDate"),
            "description": obj.get("description"),
            "effective_date": obj.get("effectiveDate"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "service_activation_date": obj.get("serviceActivationDate"),
            "type": obj.get("type"),
            "updated_by": obj.get("updatedBy"),
            "updated_date": obj.get("updatedDate")
        })
        return _obj


