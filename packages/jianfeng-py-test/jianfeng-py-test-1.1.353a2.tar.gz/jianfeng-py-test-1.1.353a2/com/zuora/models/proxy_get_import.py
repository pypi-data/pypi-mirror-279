# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ProxyGetImport(BaseModel):
    """
    ProxyGetImport
    """
    created_by_id: Optional[StrictStr] = Field(None, alias="CreatedById", description=" The user ID of the person who created the import.  **Character limit**: 32  **Values**: automatically generated ")
    created_date: Optional[datetime] = Field(None, alias="CreatedDate", description=" The date when the import was created.  **Character limit**: 29  **Values**: automatically generated ")
    id: Optional[StrictStr] = Field(None, alias="Id", description="Object identifier.")
    import_type: Optional[StrictStr] = Field(None, alias="ImportType", description=" The type of item imported.  **Character limit**: 7  **Values**: Usage ")
    imported_count: Optional[StrictInt] = Field(None, alias="ImportedCount", description="The number of records successfully imported.  **Values**: automatically generated ")
    md5: Optional[StrictStr] = Field(None, alias="Md5", description=" A check to validate the import file's integrity.  **Character limit:** 32  **System-generated:** no  **Values**: a string of 32 characters or fewer ")
    name: Optional[StrictStr] = Field(None, alias="Name", description=" A descriptive name for the import.  **Character limit:** 100  **Values:** one of the following:  - a string of 100 characters or fewer - if NULL default is: `import <ImportType_value>` ")
    original_resource_url: Optional[StrictStr] = Field(None, alias="OriginalResourceUrl", description=" The URL for your import file, which contains your records for upload. When you upload the file, Zuora assigns it to this address.  **Values:** automatic dynamically-generated URL ")
    result_resource_url: Optional[StrictStr] = Field(None, alias="ResultResourceUrl", description=" The URL for the import result file, which is a zipped CSV file.  **Values**: automatic dynamically-generated URL ")
    status: Optional[StrictStr] = Field(None, alias="Status", description="The status of the import process.  **Values**: automatically generated using one of the following values:  - Pending - Processing - Completed - Failed ")
    status_reason: Optional[StrictStr] = Field(None, alias="StatusReason", description=" The reason for the system-generated status. Use this information if the import fails.  **Character limit**: 2000  **Values**: automatically generated error message ")
    total_count: Optional[StrictInt] = Field(None, alias="TotalCount", description=" The number of records in the import file.  **Character limit**:  **Values**: automatically generated ")
    updated_by_id: Optional[StrictStr] = Field(None, alias="UpdatedById", description=" The ID of the user who last updated the import.  **Character limit**: 32  **Values**: automatically generated ")
    updated_date: Optional[datetime] = Field(None, alias="UpdatedDate", description=" The date when the import was last updated. **Character limit**: 29 **Values**: automatically generated ")
    __properties = ["CreatedById", "CreatedDate", "Id", "ImportType", "ImportedCount", "Md5", "Name", "OriginalResourceUrl", "ResultResourceUrl", "Status", "StatusReason", "TotalCount", "UpdatedById", "UpdatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProxyGetImport:
        """Create an instance of ProxyGetImport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProxyGetImport:
        """Create an instance of ProxyGetImport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProxyGetImport.parse_obj(obj)

        _obj = ProxyGetImport.parse_obj({
            "created_by_id": obj.get("CreatedById"),
            "created_date": obj.get("CreatedDate"),
            "id": obj.get("Id"),
            "import_type": obj.get("ImportType"),
            "imported_count": obj.get("ImportedCount"),
            "md5": obj.get("Md5"),
            "name": obj.get("Name"),
            "original_resource_url": obj.get("OriginalResourceUrl"),
            "result_resource_url": obj.get("ResultResourceUrl"),
            "status": obj.get("Status"),
            "status_reason": obj.get("StatusReason"),
            "total_count": obj.get("TotalCount"),
            "updated_by_id": obj.get("UpdatedById"),
            "updated_date": obj.get("UpdatedDate")
        })
        return _obj


