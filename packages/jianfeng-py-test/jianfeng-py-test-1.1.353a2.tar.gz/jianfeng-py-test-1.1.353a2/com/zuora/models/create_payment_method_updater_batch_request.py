# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class CreatePaymentMethodUpdaterBatchRequest(BaseModel):
    """
    CreatePaymentMethodUpdaterBatchRequest
    """
    billing_cycle_day: StrictInt = Field(..., alias="billingCycleDay", description="The billing cycle day. The allowed value is an integer in the range of 1 - 31.  The payment methods from accounts where the billing cycle day is the specified value in this field will be included in the updates. ")
    updater_account_id: StrictStr = Field(..., alias="updaterAccountId", description="The ID (UUID) of the PMU account. This field must be a string of 32 characters consisting of digits and letters a - f. ")
    __properties = ["billingCycleDay", "updaterAccountId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePaymentMethodUpdaterBatchRequest:
        """Create an instance of CreatePaymentMethodUpdaterBatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePaymentMethodUpdaterBatchRequest:
        """Create an instance of CreatePaymentMethodUpdaterBatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePaymentMethodUpdaterBatchRequest.parse_obj(obj)

        _obj = CreatePaymentMethodUpdaterBatchRequest.parse_obj({
            "billing_cycle_day": obj.get("billingCycleDay"),
            "updater_account_id": obj.get("updaterAccountId")
        })
        return _obj


