# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class ConfigurationTemplateContent(BaseModel):
    """
    It contains information about template schemas with segregation keys.  # noqa: E501
    """
    component_type: Optional[StrictStr] = Field(None, alias="componentType", description="Type of Component.")
    error: Optional[StrictStr] = Field(None, description="Error Information.")
    id: Optional[StrictStr] = Field(None, description="Id of Each component.")
    key: Optional[StrictStr] = Field(None, description="Key value of fields inside component.")
    method: Optional[StrictStr] = Field(None, description="Http method which is used to retrieve the particular component.")
    payload: Optional[Dict[str, Any]] = Field(None, description="Json node object contains metadata.")
    result: Optional[StrictStr] = Field(None, description="Contains the response of details fetched regarding selected component.")
    segregation_key: Optional[StrictStr] = Field(None, alias="segregationKey", description="Gives the difference between components and sub components.")
    template_id: Optional[StrictStr] = Field(None, alias="templateId", description="Id of the Template.")
    url: Optional[StrictStr] = Field(None, description="Metadata is retrieved from this URL.")
    __properties = ["componentType", "error", "id", "key", "method", "payload", "result", "segregationKey", "templateId", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigurationTemplateContent:
        """Create an instance of ConfigurationTemplateContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigurationTemplateContent:
        """Create an instance of ConfigurationTemplateContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigurationTemplateContent.parse_obj(obj)

        _obj = ConfigurationTemplateContent.parse_obj({
            "component_type": obj.get("componentType"),
            "error": obj.get("error"),
            "id": obj.get("id"),
            "key": obj.get("key"),
            "method": obj.get("method"),
            "payload": obj.get("payload"),
            "result": obj.get("result"),
            "segregation_key": obj.get("segregationKey"),
            "template_id": obj.get("templateId"),
            "url": obj.get("url")
        })
        return _obj


