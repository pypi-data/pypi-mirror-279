# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, conlist

class Task(BaseModel):
    """
    A task.   # noqa: E501
    """
    action_type: Optional[StrictStr] = Field(None, description="The type of task. ")
    call_type: Optional[StrictStr] = Field(None, description="The type of the API used. ")
    concurrent_limit: Optional[conint(strict=True, le=9999999, ge=1)] = Field(None, description="The maximum number of this task that can run concurrently. ")
    id: StrictInt = Field(..., description="The unique ID of the task. ")
    name: Optional[StrictStr] = Field(None, description="The name of the task. ")
    object: Optional[StrictStr] = Field(None, description="The selected object for the task. ")
    object_id: Optional[StrictStr] = Field(None, description="The ID of the selected object of the task. ")
    status: Optional[StrictStr] = None
    tags: Optional[conlist(StrictStr)] = Field(None, description="The array of filter tags. ")
    workflow_id: Optional[StrictInt] = Field(None, description="The ID of the workflow the task belongs to. ")
    __properties = ["action_type", "call_type", "concurrent_limit", "id", "name", "object", "object_id", "status", "tags", "workflow_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Task:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Task:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Task.parse_obj(obj)

        _obj = Task.parse_obj({
            "action_type": obj.get("action_type"),
            "call_type": obj.get("call_type"),
            "concurrent_limit": obj.get("concurrent_limit"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "object": obj.get("object"),
            "object_id": obj.get("object_id"),
            "status": obj.get("status"),
            "tags": obj.get("tags"),
            "workflow_id": obj.get("workflow_id")
        })
        return _obj


