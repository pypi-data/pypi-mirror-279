# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class PaymentMethodResponseBankTransfer(BaseModel):
    """
    PaymentMethodResponseBankTransfer
    """
    iban: Optional[StrictStr] = Field(None, alias="IBAN", description="The International Bank Account Number used to create the SEPA payment method. The value is masked. ")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The number of the customer's bank account and it is masked. ")
    bank_code: Optional[StrictStr] = Field(None, alias="bankCode", description="The sort code or number that identifies the bank. This is also known as the sort code.          ")
    bank_transfer_type: Optional[StrictStr] = Field(None, alias="bankTransferType", description="The type of the Bank Transfer payment method. For example, `SEPA`. ")
    branch_code: Optional[StrictStr] = Field(None, alias="branchCode", description="The branch code of the bank used for Direct Debit.           ")
    business_identification_code: Optional[StrictStr] = Field(None, alias="businessIdentificationCode", description="The BIC code used for SEPA. The value is masked.        ")
    identity_number: Optional[StrictStr] = Field(None, alias="identityNumber", description="The identity number of the customer. ")
    __properties = ["IBAN", "accountNumber", "bankCode", "bankTransferType", "branchCode", "businessIdentificationCode", "identityNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentMethodResponseBankTransfer:
        """Create an instance of PaymentMethodResponseBankTransfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentMethodResponseBankTransfer:
        """Create an instance of PaymentMethodResponseBankTransfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentMethodResponseBankTransfer.parse_obj(obj)

        _obj = PaymentMethodResponseBankTransfer.parse_obj({
            "iban": obj.get("IBAN"),
            "account_number": obj.get("accountNumber"),
            "bank_code": obj.get("bankCode"),
            "bank_transfer_type": obj.get("bankTransferType"),
            "branch_code": obj.get("branchCode"),
            "business_identification_code": obj.get("businessIdentificationCode"),
            "identity_number": obj.get("identityNumber")
        })
        return _obj


