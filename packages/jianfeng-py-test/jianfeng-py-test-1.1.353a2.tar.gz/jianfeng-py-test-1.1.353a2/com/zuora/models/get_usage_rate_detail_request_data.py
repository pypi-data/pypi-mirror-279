# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class GetUsageRateDetailRequestData(BaseModel):
    """
    Contains usage rate details for the invoice item as specified in the request.   # noqa: E501
    """
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="The amount of the invoice item without tax. ")
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="The unique number of the product rate plan charge associated with the invoice item. ")
    invoice_id: Optional[StrictStr] = Field(None, alias="invoiceId", description="The unique ID of the invoice. ")
    invoice_item_id: Optional[StrictStr] = Field(None, alias="invoiceItemId", description="The unique ID of the invoice item. ")
    invoice_number: Optional[StrictStr] = Field(None, alias="invoiceNumber", description="The unique number of the invoice. ")
    list_price: Optional[StrictStr] = Field(None, alias="listPrice", description="The list price of the product rate plan charge associated with the invoice item. For example, if the product rate plan charge uses the tiered charge model, its list price could be:   Tier / From / To / List Price / Price Format\\n1 / 0 / 9 / 0.00 / Per Unit\\n2 / 10 / 20 / 1.00 / Per Unit\\n3 / 21 / 30 / 2.00 / Flat Fee\\n4 / 31 /   / 3.00 / Per Unit\\n ")
    quantity: Optional[StrictStr] = Field(None, description="The quantity of the invoice item. ")
    rate_detail: Optional[StrictStr] = Field(None, alias="rateDetail", description="The rate detail of the invoice item. It shows how the total amount is calculated. For example, if the product rate plan charge uses the tiered charge model, the rate detail for the associated invoice item could be:   Tier 1: 0-9, 9 Each(s) x $0.00/Each = $0.00\\nTier 2: 10-20, 11 Each(s) x $1.00/Each = $11.00\\nTier 3: 21-30, $2.00 Flat Fee\\nTier 4: >=31, 15 Each(s) x $3.00/Each = $45.00\\nTotal = $58.00.   The rate detail retrieved from this REST API operation is the same as the [Rate Detail presented on PDF invoices](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/IA_Invoices/Create_a_custom_invoice_template/DD_Display_Usage_Charge_Breakdown#How_UsageSummary.RateDetail_is_displayed_on_invoices).  ")
    service_period: Optional[StrictStr] = Field(None, alias="servicePeriod", description="The service period of the invoice item. ")
    uom: Optional[StrictStr] = Field(None, description="The unit of measurement of the invoice item. ")
    __properties = ["amountWithoutTax", "chargeNumber", "invoiceId", "invoiceItemId", "invoiceNumber", "listPrice", "quantity", "rateDetail", "servicePeriod", "uom"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetUsageRateDetailRequestData:
        """Create an instance of GetUsageRateDetailRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetUsageRateDetailRequestData:
        """Create an instance of GetUsageRateDetailRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetUsageRateDetailRequestData.parse_obj(obj)

        _obj = GetUsageRateDetailRequestData.parse_obj({
            "amount_without_tax": obj.get("amountWithoutTax"),
            "charge_number": obj.get("chargeNumber"),
            "invoice_id": obj.get("invoiceId"),
            "invoice_item_id": obj.get("invoiceItemId"),
            "invoice_number": obj.get("invoiceNumber"),
            "list_price": obj.get("listPrice"),
            "quantity": obj.get("quantity"),
            "rate_detail": obj.get("rateDetail"),
            "service_period": obj.get("servicePeriod"),
            "uom": obj.get("uom")
        })
        return _obj


