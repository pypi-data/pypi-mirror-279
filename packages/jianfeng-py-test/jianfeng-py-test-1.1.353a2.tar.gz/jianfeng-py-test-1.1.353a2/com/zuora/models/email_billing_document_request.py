# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class EmailBillingDocumentRequest(BaseModel):
    """
    EmailBillingDocumentRequest
    """
    email_addresses: Optional[StrictStr] = Field(None, alias="emailAddresses", description="The valid email addresses you want to email a billing document to. Use commas to separate email addresses.  **Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`. ")
    include_additional_email_addresses: Optional[StrictBool] = Field(False, alias="includeAdditionalEmailAddresses", description="Indicates whether to send a billing document to the additional email addresses of the memo account.    You can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information. ")
    pdf_file_id: Optional[StrictStr] = Field(None, alias="pdfFileId", description="The ID of the PDF file that you want to send in the email.   If you do not specify any PDF file ID, the latest PDF file generated for the billing document is sent in the email. ")
    use_email_template_setting: Optional[StrictBool] = Field(False, alias="useEmailTemplateSetting", description="Indicates whether to email a billing document based on the email template setting.   If you set this field to `true`, the billing document is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template. ")
    __properties = ["emailAddresses", "includeAdditionalEmailAddresses", "pdfFileId", "useEmailTemplateSetting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EmailBillingDocumentRequest:
        """Create an instance of EmailBillingDocumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EmailBillingDocumentRequest:
        """Create an instance of EmailBillingDocumentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EmailBillingDocumentRequest.parse_obj(obj)

        _obj = EmailBillingDocumentRequest.parse_obj({
            "email_addresses": obj.get("emailAddresses"),
            "include_additional_email_addresses": obj.get("includeAdditionalEmailAddresses") if obj.get("includeAdditionalEmailAddresses") is not None else False,
            "pdf_file_id": obj.get("pdfFileId"),
            "use_email_template_setting": obj.get("useEmailTemplateSetting") if obj.get("useEmailTemplateSetting") is not None else False
        })
        return _obj


