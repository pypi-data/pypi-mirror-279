# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class GetBillingDocumentsResponse(BaseModel):
    """
    GetBillingDocumentsResponse
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the customer account associated with the billing document.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The total amount of the billing document.")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The balance of the billing document.")
    document_date: Optional[date] = Field(None, alias="documentDate", description="The date of the billing document. The date can be the invoice date for invoices, credit memo date for credit memos, or debit memo date for debit memos.")
    document_number: Optional[StrictStr] = Field(None, alias="documentNumber", description="The number of the billing document.")
    document_type: Optional[StrictStr] = Field(None, alias="documentType")
    id: Optional[StrictStr] = Field(None, description="The ID of the billing document.")
    status: Optional[StrictStr] = None
    currency: Optional[StrictStr] = Field(None, description="The currency of the billing document.")
    __properties = ["accountId", "amount", "balance", "documentDate", "documentNumber", "documentType", "id", "status", "currency"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetBillingDocumentsResponse:
        """Create an instance of GetBillingDocumentsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetBillingDocumentsResponse:
        """Create an instance of GetBillingDocumentsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetBillingDocumentsResponse.parse_obj(obj)

        _obj = GetBillingDocumentsResponse.parse_obj({
            "account_id": obj.get("accountId"),
            "amount": obj.get("amount"),
            "balance": obj.get("balance"),
            "document_date": obj.get("documentDate"),
            "document_number": obj.get("documentNumber"),
            "document_type": obj.get("documentType"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "currency": obj.get("currency")
        })
        return _obj


