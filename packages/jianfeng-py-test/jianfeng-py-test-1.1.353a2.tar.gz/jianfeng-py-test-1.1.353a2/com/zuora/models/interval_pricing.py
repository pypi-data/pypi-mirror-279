# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator
from com.zuora.models.interval_pricing_tier import IntervalPricingTier

class IntervalPricing(BaseModel):
    """
    IntervalPricing
    """
    sequence: Optional[StrictInt] = None
    type: Optional[StrictStr] = None
    duration: Optional[StrictInt] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    subscription_charge_interval_price_tiers: Optional[IntervalPricingTier] = Field(None, alias="subscriptionChargeIntervalPriceTiers")
    __properties = ["sequence", "type", "duration", "price", "subscriptionChargeIntervalPriceTiers"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Day', 'Month', 'Infinity'):
            raise ValueError("must be one of enum values ('Day', 'Month', 'Infinity')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntervalPricing:
        """Create an instance of IntervalPricing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of subscription_charge_interval_price_tiers
        if self.subscription_charge_interval_price_tiers:
            _dict['subscriptionChargeIntervalPriceTiers'] = self.subscription_charge_interval_price_tiers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntervalPricing:
        """Create an instance of IntervalPricing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntervalPricing.parse_obj(obj)

        _obj = IntervalPricing.parse_obj({
            "sequence": obj.get("sequence"),
            "type": obj.get("type"),
            "duration": obj.get("duration"),
            "price": obj.get("price"),
            "subscription_charge_interval_price_tiers": IntervalPricingTier.from_dict(obj.get("subscriptionChargeIntervalPriceTiers")) if obj.get("subscriptionChargeIntervalPriceTiers") is not None else None
        })
        return _obj


