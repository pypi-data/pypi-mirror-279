# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr

class PutPublicEmailTemplateRequest(BaseModel):
    """
    PutPublicEmailTemplateRequest
    """
    active: Optional[StrictBool] = Field(None, description="The status of the email template.")
    bcc_email_address: Optional[StrictStr] = Field(None, alias="bccEmailAddress", description="Email bcc address.")
    cc_email_address: Optional[StrictStr] = Field(None, alias="ccEmailAddress", description="Email cc address.")
    cc_email_type: Optional[StrictStr] = Field(None, alias="ccEmailType")
    description: Optional[constr(strict=True, max_length=255)] = Field(None, description="The description of the email template.")
    email_body: Optional[StrictStr] = Field(None, alias="emailBody", description="The email body. You can add merge fields in the email object using angle brackets.  User can also embed html tags if `isHtml` is `true`.")
    email_subject: Optional[StrictStr] = Field(None, alias="emailSubject", description="The email subject. You can add merge fields in the email subject using angle brackets.")
    encoding_type: Optional[StrictStr] = Field(None, alias="encodingType")
    from_email_address: Optional[StrictStr] = Field(None, alias="fromEmailAddress", description="If fromEmailType is SpecificEmail, this field is required")
    from_email_type: Optional[StrictStr] = Field(None, alias="fromEmailType")
    from_name: Optional[StrictStr] = Field(None, alias="fromName", description="The name of email sender.")
    is_html: Optional[StrictBool] = Field(None, alias="isHtml", description="Indicates whether the style of email body is HTML.")
    name: Optional[constr(strict=True, max_length=255)] = Field(None, description="The name of the email template.")
    reply_to_email_address: Optional[StrictStr] = Field(None, alias="replyToEmailAddress", description="If replyToEmailType is SpecificEmail, this field is required.")
    reply_to_email_type: Optional[StrictStr] = Field(None, alias="replyToEmailType")
    to_email_address: Optional[StrictStr] = Field(None, alias="toEmailAddress", description="If toEmailType is SpecificEmail, this field is required.")
    to_email_type: Optional[StrictStr] = Field(None, alias="toEmailType")
    __properties = ["active", "bccEmailAddress", "ccEmailAddress", "ccEmailType", "description", "emailBody", "emailSubject", "encodingType", "fromEmailAddress", "fromEmailType", "fromName", "isHtml", "name", "replyToEmailAddress", "replyToEmailType", "toEmailAddress", "toEmailType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PutPublicEmailTemplateRequest:
        """Create an instance of PutPublicEmailTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PutPublicEmailTemplateRequest:
        """Create an instance of PutPublicEmailTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PutPublicEmailTemplateRequest.parse_obj(obj)

        _obj = PutPublicEmailTemplateRequest.parse_obj({
            "active": obj.get("active"),
            "bcc_email_address": obj.get("bccEmailAddress"),
            "cc_email_address": obj.get("ccEmailAddress"),
            "cc_email_type": obj.get("ccEmailType"),
            "description": obj.get("description"),
            "email_body": obj.get("emailBody"),
            "email_subject": obj.get("emailSubject"),
            "encoding_type": obj.get("encodingType"),
            "from_email_address": obj.get("fromEmailAddress"),
            "from_email_type": obj.get("fromEmailType"),
            "from_name": obj.get("fromName"),
            "is_html": obj.get("isHtml"),
            "name": obj.get("name"),
            "reply_to_email_address": obj.get("replyToEmailAddress"),
            "reply_to_email_type": obj.get("replyToEmailType"),
            "to_email_address": obj.get("toEmailAddress"),
            "to_email_type": obj.get("toEmailType")
        })
        return _obj


