# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class ProxyCreateTaxationItemRequest(BaseModel):
    """
    ProxyCreateTaxationItemRequest
    """
    accounting_code: Optional[StrictStr] = Field(None, alias="AccountingCode", description=" The Chart of Accounts ")
    exempt_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="ExemptAmount", description=" The calculated tax amount excluded due to the exemption. **Character limit**: 16 **Values**: a decimal value ")
    invoice_item_id: StrictStr = Field(..., alias="InvoiceItemId", description=" The ID of the specific invoice item that the taxation information applies to. **Character limit**: 32 **Values**: a valid invoice item ID ")
    jurisdiction: StrictStr = Field(..., alias="Jurisdiction", description=" The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city. **Character limit**: 32 **Values**: a string of 32 characterrs or fewer ")
    location_code: Optional[StrictStr] = Field(None, alias="LocationCode", description=" The identifier for the location based on the value of the `TaxCode` field. **Character limit**: 32 **Values**: automatically generated ")
    name: StrictStr = Field(..., alias="Name", description=" The name of the tax rate, such as sales tax or GST. This name is displayed on invoices. **Character limit**: 128 **Values**: a string of 128 characters or fewer ")
    tax_amount: Union[StrictFloat, StrictInt] = Field(..., alias="TaxAmount", description=" The amount of the tax applied to the charge. **Character limit**: 16 **Values**: a decimal value ")
    tax_code: Optional[StrictStr] = Field(None, alias="TaxCode", description=" The tax code identifies which tax rules and tax rates to apply to a specific charge. **Character limit**: 32 **Values**: a string of 32 characters or fewer ")
    tax_code_description: Optional[StrictStr] = Field(None, alias="TaxCodeDescription", description=" The description for the tax code. **Character limit**: 255 **Values**: a string of 255 characters or fewer ")
    tax_date: date = Field(..., alias="TaxDate", description=" The date that the tax is applied to the charge, in `yyyy-mm-dd` format. **Character limit**: 29 ")
    tax_rate: Union[StrictFloat, StrictInt] = Field(..., alias="TaxRate", description=" The tax rate applied to the charge. **Character limit**: 16 **Values**: a valid decimal value ")
    tax_rate_description: Optional[StrictStr] = Field(None, alias="TaxRateDescription", description=" The description of the tax rate. **Character limit**: 255 **Values**: a string of 255 characters or fewer ")
    tax_rate_type: StrictStr = Field(..., alias="TaxRateType", description=" The type of the tax rate applied to the charge. **Character limit**: 10 **Values**: `Percentage`, `FlatFee` ")
    __properties = ["AccountingCode", "ExemptAmount", "InvoiceItemId", "Jurisdiction", "LocationCode", "Name", "TaxAmount", "TaxCode", "TaxCodeDescription", "TaxDate", "TaxRate", "TaxRateDescription", "TaxRateType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProxyCreateTaxationItemRequest:
        """Create an instance of ProxyCreateTaxationItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProxyCreateTaxationItemRequest:
        """Create an instance of ProxyCreateTaxationItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProxyCreateTaxationItemRequest.parse_obj(obj)

        _obj = ProxyCreateTaxationItemRequest.parse_obj({
            "accounting_code": obj.get("AccountingCode"),
            "exempt_amount": obj.get("ExemptAmount"),
            "invoice_item_id": obj.get("InvoiceItemId"),
            "jurisdiction": obj.get("Jurisdiction"),
            "location_code": obj.get("LocationCode"),
            "name": obj.get("Name"),
            "tax_amount": obj.get("TaxAmount"),
            "tax_code": obj.get("TaxCode"),
            "tax_code_description": obj.get("TaxCodeDescription"),
            "tax_date": obj.get("TaxDate"),
            "tax_rate": obj.get("TaxRate"),
            "tax_rate_description": obj.get("TaxRateDescription"),
            "tax_rate_type": obj.get("TaxRateType")
        })
        return _obj


