# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator
from com.zuora.models.get_subscription_rate_plan_charges_with_all_segments import GetSubscriptionRatePlanChargesWithAllSegments
from com.zuora.models.subscription_product_feature import SubscriptionProductFeature

class GetSubscriptionRatePlan(BaseModel):
    """
    GetSubscriptionRatePlan
    """
    id: Optional[StrictStr] = Field(None, description="Rate plan ID. ")
    subscription_rate_plan_number: Optional[StrictStr] = Field(None, alias="subscriptionRatePlanNumber")
    is_from_external_catalog: Optional[StrictBool] = Field(None, alias="isFromExternalCatalog")
    last_change_type: Optional[StrictStr] = Field(None, alias="lastChangeType", description="The last amendment on the rate plan.    **Note:** If a subscription is created through an order, this field is only available if multiple orders are created on the subscription.   Possible Values:   * `Add`   * `Update`   * `Remove` ")
    product_id: Optional[StrictStr] = Field(None, alias="productId")
    product_name: Optional[StrictStr] = Field(None, alias="productName")
    product_sku: Optional[StrictStr] = Field(None, alias="productSku", description="The unique SKU for the product.")
    product_rate_plan_id: Optional[StrictStr] = Field(None, alias="productRatePlanId")
    product_rate_plan_number: Optional[StrictStr] = Field(None, alias="productRatePlanNumber")
    rate_plan_name: Optional[StrictStr] = Field(None, alias="ratePlanName", description="Name of the rate plan.")
    subscription_product_features: Optional[conlist(SubscriptionProductFeature)] = Field(None, alias="subscriptionProductFeatures", description="Container for one or more features.   Only available when the following settings are enabled:  * The Entitlements feature in your tenant.  * The Enable Feature Specification in Product and Subscriptions setting in Zuora Billing Settings")
    externally_managed_plan_id: Optional[StrictStr] = Field(None, alias="externallyManagedPlanId", description="Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores. ")
    contracted_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="contractedMrr", description="Monthly recurring revenue of the subscription rate plan exclusive of all the discounts applicable. ")
    contracted_net_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="contractedNetMrr", description="Monthly recurring revenue of the subscription rate plan inclusive of all the discounts applicable, including the fixed-amount discounts and percentage discounts. ")
    as_of_day_gross_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="asOfDayGrossMrr", description="Monthly recurring revenue of the subscription rate plan exclusive of any discounts applicable as of specified day. ")
    as_of_day_net_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="asOfDayNetMrr", description="Monthly recurring revenue of the subscription rate plan inclusive of all the discounts applicable, including the fixed-amount discounts and percentage discounts as of specified day. ")
    rate_plan_charges: Optional[conlist(GetSubscriptionRatePlanChargesWithAllSegments)] = Field(None, alias="ratePlanCharges", description="Container for one or more charges.")
    __properties = ["id", "subscriptionRatePlanNumber", "isFromExternalCatalog", "lastChangeType", "productId", "productName", "productSku", "productRatePlanId", "productRatePlanNumber", "ratePlanName", "subscriptionProductFeatures", "externallyManagedPlanId", "contractedMrr", "contractedNetMrr", "asOfDayGrossMrr", "asOfDayNetMrr", "ratePlanCharges"]

    @validator('last_change_type')
    def last_change_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Add', 'Update', 'Remove'):
            raise ValueError("must be one of enum values ('Add', 'Update', 'Remove')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetSubscriptionRatePlan:
        """Create an instance of GetSubscriptionRatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_product_features (list)
        _items = []
        if self.subscription_product_features:
            for _item in self.subscription_product_features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptionProductFeatures'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rate_plan_charges (list)
        _items = []
        if self.rate_plan_charges:
            for _item in self.rate_plan_charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ratePlanCharges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetSubscriptionRatePlan:
        """Create an instance of GetSubscriptionRatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetSubscriptionRatePlan.parse_obj(obj)

        _obj = GetSubscriptionRatePlan.parse_obj({
            "id": obj.get("id"),
            "subscription_rate_plan_number": obj.get("subscriptionRatePlanNumber"),
            "is_from_external_catalog": obj.get("isFromExternalCatalog"),
            "last_change_type": obj.get("lastChangeType"),
            "product_id": obj.get("productId"),
            "product_name": obj.get("productName"),
            "product_sku": obj.get("productSku"),
            "product_rate_plan_id": obj.get("productRatePlanId"),
            "product_rate_plan_number": obj.get("productRatePlanNumber"),
            "rate_plan_name": obj.get("ratePlanName"),
            "subscription_product_features": [SubscriptionProductFeature.from_dict(_item) for _item in obj.get("subscriptionProductFeatures")] if obj.get("subscriptionProductFeatures") is not None else None,
            "externally_managed_plan_id": obj.get("externallyManagedPlanId"),
            "contracted_mrr": obj.get("contractedMrr"),
            "contracted_net_mrr": obj.get("contractedNetMrr"),
            "as_of_day_gross_mrr": obj.get("asOfDayGrossMrr"),
            "as_of_day_net_mrr": obj.get("asOfDayNetMrr"),
            "rate_plan_charges": [GetSubscriptionRatePlanChargesWithAllSegments.from_dict(_item) for _item in obj.get("ratePlanCharges")] if obj.get("ratePlanCharges") is not None else None
        })
        return _obj


