# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr
from com.zuora.models.contact_info import ContactInfo
from com.zuora.models.sign_up_payment_method import SignUpPaymentMethod
from com.zuora.models.sign_up_tax_info import SignUpTaxInfo

class AccountData(BaseModel):
    """
    The information of the account that you are to create through the \"Sign up\" operation.   # noqa: E501
    """
    account_number: Optional[constr(strict=True, max_length=70)] = Field(None, alias="accountNumber")
    auto_pay: Optional[StrictBool] = Field(None, alias="autoPay", description="Specifies whether future payments are to be automatically billed when they are due. Possible values are `true`, `false`.")
    batch: Optional[StrictStr] = None
    bill_cycle_day: conint(strict=True, le=31, ge=0) = Field(..., alias="billCycleDay", description="Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".")
    bill_to_contact: ContactInfo = Field(..., alias="billToContact")
    communication_profile_id: Optional[StrictStr] = Field(None, alias="communicationProfileId")
    credit_memo_template_id: Optional[StrictStr] = Field(None, alias="creditMemoTemplateId", description="**Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b. ")
    crm_id: Optional[constr(strict=True, max_length=100)] = Field(None, alias="crmId")
    currency: StrictStr = Field(..., description="3 uppercase character currency code.  For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used. ")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields. ")
    debit_memo_template_id: Optional[StrictStr] = Field(None, alias="debitMemoTemplateId", description="**Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2. ")
    invoice_template_id: Optional[StrictStr] = Field(None, alias="invoiceTemplateId")
    name: constr(strict=True, max_length=255) = Field(...)
    notes: Optional[constr(strict=True, max_length=65535)] = None
    payment_method: Optional[SignUpPaymentMethod] = Field(None, alias="paymentMethod")
    payment_term: Optional[StrictStr] = Field(None, alias="paymentTerm")
    purchase_order_number: Optional[constr(strict=True, max_length=100)] = Field(None, alias="purchaseOrderNumber", description="The number of the purchase order associated with this account. Purchase order information generally comes from customers. ")
    sequence_set_id: Optional[StrictStr] = Field(None, alias="sequenceSetId", description="The ID of the billing document sequence set to assign to the customer account.   The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set. ")
    sold_to_contact: Optional[ContactInfo] = Field(None, alias="soldToContact")
    tax_info: Optional[SignUpTaxInfo] = Field(None, alias="taxInfo")
    __properties = ["accountNumber", "autoPay", "batch", "billCycleDay", "billToContact", "communicationProfileId", "creditMemoTemplateId", "crmId", "currency", "customFields", "debitMemoTemplateId", "invoiceTemplateId", "name", "notes", "paymentMethod", "paymentTerm", "purchaseOrderNumber", "sequenceSetId", "soldToContact", "taxInfo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountData:
        """Create an instance of AccountData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['paymentMethod'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact
        if self.sold_to_contact:
            _dict['soldToContact'] = self.sold_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_info
        if self.tax_info:
            _dict['taxInfo'] = self.tax_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountData:
        """Create an instance of AccountData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountData.parse_obj(obj)

        _obj = AccountData.parse_obj({
            "account_number": obj.get("accountNumber"),
            "auto_pay": obj.get("autoPay"),
            "batch": obj.get("batch"),
            "bill_cycle_day": obj.get("billCycleDay"),
            "bill_to_contact": ContactInfo.from_dict(obj.get("billToContact")) if obj.get("billToContact") is not None else None,
            "communication_profile_id": obj.get("communicationProfileId"),
            "credit_memo_template_id": obj.get("creditMemoTemplateId"),
            "crm_id": obj.get("crmId"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("customFields"),
            "debit_memo_template_id": obj.get("debitMemoTemplateId"),
            "invoice_template_id": obj.get("invoiceTemplateId"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "payment_method": SignUpPaymentMethod.from_dict(obj.get("paymentMethod")) if obj.get("paymentMethod") is not None else None,
            "payment_term": obj.get("paymentTerm"),
            "purchase_order_number": obj.get("purchaseOrderNumber"),
            "sequence_set_id": obj.get("sequenceSetId"),
            "sold_to_contact": ContactInfo.from_dict(obj.get("soldToContact")) if obj.get("soldToContact") is not None else None,
            "tax_info": SignUpTaxInfo.from_dict(obj.get("taxInfo")) if obj.get("taxInfo") is not None else None
        })
        return _obj


