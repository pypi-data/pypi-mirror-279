# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from com.zuora.models.create_order_response import CreateOrderResponse  # noqa: E501

class TestCreateOrderResponse(unittest.TestCase):
    """CreateOrderResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateOrderResponse:
        """Test CreateOrderResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateOrderResponse`
        """
        model = CreateOrderResponse()  # noqa: E501
        if include_optional:
            return CreateOrderResponse(
                process_id = '',
                request_id = '',
                reasons = [
                    {"code":"code","message":"message"}
                    ],
                success = True,
                account_id = '',
                account_number = '',
                credit_memo_ids = [
                    ''
                    ],
                credit_memo_numbers = [
                    ''
                    ],
                invoice_ids = [
                    ''
                    ],
                invoice_numbers = [
                    ''
                    ],
                order_id = '',
                order_line_items = [
                    com.zuora.models.create_order_response_order_line_items.CreateOrderResponseOrderLineItems(
                        id = '', 
                        item_number = '', )
                    ],
                order_number = '',
                paid_amount = '',
                payment_id = '',
                payment_number = '',
                ramps = [
                    com.zuora.models.create_order_response_ramps.CreateOrderResponseRamps(
                        ramp_number = '', 
                        subscription_number = '', )
                    ],
                refunds = [
                    com.zuora.models.create_order_response_refunds.CreateOrderResponseRefunds(
                        number = '', 
                        refund_invoice_numbers = [
                            ''
                            ], 
                        status = 'Success', )
                    ],
                status = 'Draft',
                subscription_ids = [
                    ''
                    ],
                subscription_numbers = [
                    ''
                    ],
                subscriptions = [
                    com.zuora.models.create_order_response_subscriptions.CreateOrderResponseSubscriptions(
                        status = 'Active', 
                        subscription_id = '', 
                        subscription_number = '', 
                        subscription_owner_id = '', 
                        subscription_owner_number = '', 
                        order_actions = [
                            com.zuora.models.create_order_response_order_action.CreateOrderResponseOrderAction(
                                id = '', 
                                type = 'CreateSubscription', 
                                order_metrics = [
                                    com.zuora.models.create_order_response_order_metric.CreateOrderResponseOrderMetric(
                                        charge_number = '', 
                                        mrr = [
                                            {"amount":3.0937452626664474,"discountChargeNumber":"discountChargeNumber","endDate":"2000-01-23","generatedReason":"IncreaseQuantity","invoiceOwner":"invoiceOwner","orderItemId":"orderItemId","startDate":"2000-01-23","subscriptionOwner":"subscriptionOwner","termNumber":7.143538047012306,"type":"Regular"}
                                            ], 
                                        quantity = [
                                            {"amount":0.8851374739011653,"endDate":"2000-01-23","generatedReason":"IncreaseQuantity","invoiceOwner":"invoiceOwner","orderItemId":"orderItemId","startDate":"2000-01-23","subscriptionOwner":"subscriptionOwner","termNumber":7.058770351582356}
                                            ], 
                                        tcb = [
                                            {"amount":6.519180951018382,"discountChargeNumber":"discountChargeNumber","endDate":"2000-01-23","generatedReason":"IncreaseQuantity","invoiceOwner":"invoiceOwner","orderItemId":"orderItemId","startDate":"2000-01-23","subscriptionOwner":"subscriptionOwner","tax":0.10263654006109402,"termNumber":4.652396432933246,"type":"Regular"}
                                            ], 
                                        tcv = [
                                            {"amount":3.0937452626664474,"discountChargeNumber":"discountChargeNumber","endDate":"2000-01-23","generatedReason":"IncreaseQuantity","invoiceOwner":"invoiceOwner","orderItemId":"orderItemId","startDate":"2000-01-23","subscriptionOwner":"subscriptionOwner","termNumber":7.143538047012306,"type":"Regular"}
                                            ], )
                                    ], )
                            ], )
                    ],
                write_off = [
                    com.zuora.models.create_order_response_write_off.CreateOrderResponseWriteOff(
                        amount = 1.337, 
                        failed_reason = '', 
                        invoice_number = '', 
                        status = 'Success', 
                        write_off_credit_memo_number = '', )
                    ]
            )
        else:
            return CreateOrderResponse(
        )
        """

    def testCreateOrderResponse(self):
        """Test CreateOrderResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
