# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from com.zuora.models.create_order_pricing_update import CreateOrderPricingUpdate  # noqa: E501

class TestCreateOrderPricingUpdate(unittest.TestCase):
    """CreateOrderPricingUpdate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateOrderPricingUpdate:
        """Test CreateOrderPricingUpdate
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateOrderPricingUpdate`
        """
        model = CreateOrderPricingUpdate()  # noqa: E501
        if include_optional:
            return CreateOrderPricingUpdate(
                charge_model_data = {"tiers":[{"priceFormat":"FlatFee","tier":1,"endingUnit":2.027123023002322,"price":4.145608029883936,"startingUnit":7.386281948385884},{"priceFormat":"FlatFee","tier":1,"endingUnit":2.027123023002322,"price":4.145608029883936,"startingUnit":7.386281948385884}],"quantity":0.3616076749251911,"chargeModelConfiguration":{"customFieldPerUnitRate":"customFieldPerUnitRate","formula":"formula","customFieldTotalAmount":"customFieldTotalAmount"}},
                discount = com.zuora.models.discount_pricing_update.DiscountPricingUpdate(
                    apply_discount_to = 'ONETIME', 
                    discount_level = 'rateplan', 
                    discount_percentage = 1.337, 
                    price_change_option = 'NoChange', ),
                recurring_delivery_based = None,
                recurring_flat_fee = None,
                recurring_per_unit = None,
                recurring_tiered = None,
                recurring_volume = None,
                usage_flat_fee = None,
                usage_overage = None,
                usage_per_unit = None,
                usage_tiered = None,
                usage_tiered_with_overage = None,
                usage_volume = None
            )
        else:
            return CreateOrderPricingUpdate(
        )
        """

    def testCreateOrderPricingUpdate(self):
        """Test CreateOrderPricingUpdate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
