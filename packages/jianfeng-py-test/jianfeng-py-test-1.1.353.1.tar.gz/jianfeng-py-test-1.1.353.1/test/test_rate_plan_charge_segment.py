# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from com.zuora.models.rate_plan_charge_segment import RatePlanChargeSegment  # noqa: E501

class TestRatePlanChargeSegment(unittest.TestCase):
    """RatePlanChargeSegment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RatePlanChargeSegment:
        """Test RatePlanChargeSegment
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RatePlanChargeSegment`
        """
        model = RatePlanChargeSegment()  # noqa: E501
        if include_optional:
            return RatePlanChargeSegment(
                id = '',
                amended_by_order_on = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                apply_discount_to = 'ONETIME',
                charge_function = 'Standard',
                charge_model_configuration = com.zuora.models.charge_model_configuration.chargeModelConfiguration(
                    custom_field_per_unit_rate = '', 
                    custom_field_total_amount = '', 
                    formula = '', ),
                charged_through_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                commitment_type = 'UNIT',
                prepaid_committed_amount = '',
                credit_option = 'TimeBased',
                currency = '',
                delivery_schedule = com.zuora.models.delivery_schedule.DeliverySchedule(
                    frequency = 'Weekly', 
                    monday = True, 
                    tuesday = True, 
                    wednesday = True, 
                    thursday = True, 
                    friday = True, 
                    saturday = True, 
                    sunday = True, ),
                number_of_deliveries = 1.337,
                description = '',
                discount_amount = 1.337,
                discount_apply_details = [
                    com.zuora.models.discount_apply_details.discountApplyDetails(
                        applied_product_rate_plan_id = '', 
                        applied_product_rate_plan_charge_id = '', 
                        applied_product_name = '', 
                        applied_product_rate_plan_name = '', 
                        applied_product_rate_plan_charge_name = '', )
                    ],
                discount_class = '',
                discount_level = 'rateplan',
                discount_percentage = 1.337,
                apply_to_billing_period_partially = True,
                dmrc = 1.337,
                done = True,
                drawdown_rate = 1.337,
                drawdown_uom = '',
                dtcv = 1.337,
                effective_end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                effective_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                end_date_condition = 'Subscription_End',
                included_units = 1.337,
                input_argument_id = '',
                is_committed = True,
                is_prepaid = True,
                is_rollover = True,
                mrr = 1.337,
                original_order_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                overage_price = 1.337,
                prepaid_operation_type = 'topup',
                prepaid_quantity = 1.337,
                prepaid_total_quantity = 1.337,
                prepaid_uom = '',
                quantity = 1.337,
                price = 1.337,
                price_change_option = 'NoChange',
                price_increase_percentage = 1.337,
                pricing_summary = '',
                processed_through_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                rollover_apply = 'ApplyFirst',
                rollover_period_length = 56,
                rollover_periods = 56,
                proration_option = '',
                segment = 56,
                specific_end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                subscription_charge_interval_pricing = [
                    com.zuora.models.interval_pricing.IntervalPricing(
                        sequence = 56, 
                        type = 'Day', 
                        duration = 56, 
                        price = 1.337, 
                        subscription_charge_interval_price_tiers = null, )
                    ],
                tcv = 1.337,
                tiers = [
                    com.zuora.models.tiers.tiers(
                        tier = 56, 
                        starting_unit = 1.337, 
                        ending_unit = 1.337, 
                        price = 1.337, 
                        price_format = 'FlatFee', )
                    ],
                trigger_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                billing_period_alignment = 'AlignToCharge',
                trigger_event = 'ContractEffective',
                up_to_periods = 56,
                up_to_periods_type = 'Days',
                validity_period_type = 'SUBSCRIPTION_TERM',
                sales_price = 1.337
            )
        else:
            return RatePlanChargeSegment(
        )
        """

    def testRatePlanChargeSegment(self):
        """Test RatePlanChargeSegment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
