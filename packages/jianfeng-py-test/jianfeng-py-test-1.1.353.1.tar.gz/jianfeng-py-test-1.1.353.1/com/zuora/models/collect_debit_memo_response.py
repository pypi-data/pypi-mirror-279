# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from com.zuora.models.collect_debit_memo_response_applied_credit_memos import CollectDebitMemoResponseAppliedCreditMemos
from com.zuora.models.collect_debit_memo_response_applied_payments import CollectDebitMemoResponseAppliedPayments
from com.zuora.models.collect_debit_memo_response_debit_memo import CollectDebitMemoResponseDebitMemo
from com.zuora.models.collect_debit_memo_response_processed_payment import CollectDebitMemoResponseProcessedPayment

class CollectDebitMemoResponse(BaseModel):
    """
    CollectDebitMemoResponse
    """
    applied_credit_memos: Optional[conlist(CollectDebitMemoResponseAppliedCreditMemos)] = Field(None, alias="appliedCreditMemos", description="The information about which credit memo applied to the specific debit memo. ")
    applied_payments: Optional[conlist(CollectDebitMemoResponseAppliedPayments)] = Field(None, alias="appliedPayments", description="The information about which payment applied to the specific debit memo. ")
    debit_memo: Optional[CollectDebitMemoResponseDebitMemo] = Field(None, alias="debitMemo")
    processed_payment: Optional[CollectDebitMemoResponseProcessedPayment] = Field(None, alias="processedPayment")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully.")
    __properties = ["appliedCreditMemos", "appliedPayments", "debitMemo", "processedPayment", "success"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CollectDebitMemoResponse:
        """Create an instance of CollectDebitMemoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in applied_credit_memos (list)
        _items = []
        if self.applied_credit_memos:
            for _item in self.applied_credit_memos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['appliedCreditMemos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in applied_payments (list)
        _items = []
        if self.applied_payments:
            for _item in self.applied_payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['appliedPayments'] = _items
        # override the default output from pydantic by calling `to_dict()` of debit_memo
        if self.debit_memo:
            _dict['debitMemo'] = self.debit_memo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processed_payment
        if self.processed_payment:
            _dict['processedPayment'] = self.processed_payment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CollectDebitMemoResponse:
        """Create an instance of CollectDebitMemoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CollectDebitMemoResponse.parse_obj(obj)

        _obj = CollectDebitMemoResponse.parse_obj({
            "applied_credit_memos": [CollectDebitMemoResponseAppliedCreditMemos.from_dict(_item) for _item in obj.get("appliedCreditMemos")] if obj.get("appliedCreditMemos") is not None else None,
            "applied_payments": [CollectDebitMemoResponseAppliedPayments.from_dict(_item) for _item in obj.get("appliedPayments")] if obj.get("appliedPayments") is not None else None,
            "debit_memo": CollectDebitMemoResponseDebitMemo.from_dict(obj.get("debitMemo")) if obj.get("debitMemo") is not None else None,
            "processed_payment": CollectDebitMemoResponseProcessedPayment.from_dict(obj.get("processedPayment")) if obj.get("processedPayment") is not None else None,
            "success": obj.get("success")
        })
        return _obj


