# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from com.zuora.models.accounting_code_category import AccountingCodeCategory
from com.zuora.models.accounting_code_status import AccountingCodeStatus
from com.zuora.models.accounting_code_type import AccountingCodeType

class GetAccountingCodeResponse(BaseModel):
    """
    GetAccountingCodeResponse
    """
    category: Optional[AccountingCodeCategory] = None
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="The ID of the user who created the accounting code. ")
    created_on: Optional[StrictStr] = Field(None, alias="createdOn", description="Date and time when the accounting code was created. ")
    gl_account_name: Optional[StrictStr] = Field(None, alias="glAccountName", description="Name of the account in your general ledger.  Field only available if you have Zuora Finance enabled. ")
    gl_account_number: Optional[StrictStr] = Field(None, alias="glAccountNumber", description="Account number in your general ledger.  Field only available if you have Zuora Finance enabled. ")
    id: Optional[StrictStr] = Field(None, description="ID of the accounting code. ")
    name: Optional[StrictStr] = Field(None, description="Name of the accounting code. ")
    notes: Optional[StrictStr] = Field(None, description="Any optional notes for the accounting code. ")
    status: Optional[AccountingCodeStatus] = None
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully. ")
    type: Optional[AccountingCodeType] = None
    updated_by: Optional[StrictStr] = Field(None, alias="updatedBy", description="The ID of the user who last updated the accounting code. ")
    updated_on: Optional[StrictStr] = Field(None, alias="updatedOn", description="Date and time when the accounting code was last updated. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["category", "createdBy", "createdOn", "glAccountName", "glAccountNumber", "id", "name", "notes", "status", "success", "type", "updatedBy", "updatedOn"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAccountingCodeResponse:
        """Create an instance of GetAccountingCodeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAccountingCodeResponse:
        """Create an instance of GetAccountingCodeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetAccountingCodeResponse.parse_obj(obj)

        _obj = GetAccountingCodeResponse.parse_obj({
            "category": obj.get("category"),
            "created_by": obj.get("createdBy"),
            "created_on": obj.get("createdOn"),
            "gl_account_name": obj.get("glAccountName"),
            "gl_account_number": obj.get("glAccountNumber"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "status": obj.get("status"),
            "success": obj.get("success"),
            "type": obj.get("type"),
            "updated_by": obj.get("updatedBy"),
            "updated_on": obj.get("updatedOn")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


