# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr
from com.zuora.models.billing_document_status import BillingDocumentStatus
from com.zuora.models.e_invoice_status import EInvoiceStatus
from com.zuora.models.memo_source_type import MemoSourceType
from com.zuora.models.tax_status import TaxStatus
from com.zuora.models.transferred_to_accounting_status import TransferredToAccountingStatus

class DebitMemo(BaseModel):
    """
    DebitMemo
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the customer account associated with the debit memo.")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The number of the customer account associated with the debit memo.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The total amount of the debit memo.")
    auto_pay: Optional[StrictBool] = Field(None, alias="autoPay", description="Whether debit memos are automatically picked up for processing in the corresponding payment run.   By default, debit memos are automatically picked up for processing in the corresponding payment run.       ")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The balance of the debit memo.")
    be_applied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="beAppliedAmount", description="The applied amount of the debit memo.")
    bill_to_contact_id: Optional[StrictStr] = Field(None, alias="billToContactId", description="The ID of the bill-to contact associated with the debit memo.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.")
    cancelled_by_id: Optional[StrictStr] = Field(None, alias="cancelledById", description="The ID of the Zuora user who cancelled the debit memo.")
    cancelled_on: Optional[StrictStr] = Field(None, alias="cancelledOn", description="The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.")
    comment: Optional[StrictStr] = Field(None, description="Comments about the debit memo.")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the Zuora user who created the debit memo.")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.")
    debit_memo_date: Optional[date] = Field(None, alias="debitMemoDate", description="The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.")
    due_date: Optional[date] = Field(None, alias="dueDate", description="The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.")
    id: Optional[StrictStr] = Field(None, description="The unique ID of the debit memo.")
    invoice_group_number: Optional[constr(strict=True, max_length=255)] = Field(None, alias="invoiceGroupNumber", description="The number of invoice group associated with the debit memo.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled. ")
    latest_pdf_file_id: Optional[StrictStr] = Field(None, alias="latestPDFFileId", description="The ID of the latest PDF file generated for the debit memo.")
    number: Optional[StrictStr] = Field(None, description="The unique identification number of the debit memo.")
    payment_term: Optional[StrictStr] = Field(None, alias="paymentTerm", description="The name of the payment term associated with the debit memo.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.")
    posted_by_id: Optional[StrictStr] = Field(None, alias="postedById", description="The ID of the Zuora user who posted the debit memo.")
    posted_on: Optional[StrictStr] = Field(None, alias="postedOn", description="The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction. The value must be an existing reason code or empty.")
    referred_credit_memo_id: Optional[StrictStr] = Field(None, alias="referredCreditMemoId", description="The ID of the credit memo from which the debit memo was created.")
    referred_invoice_id: Optional[StrictStr] = Field(None, alias="referredInvoiceId", description="The ID of a referred invoice.")
    sequence_set_id: Optional[StrictStr] = Field(None, alias="sequenceSetId", description="The ID of the sequence set associated with the debit memo.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.")
    source_type: Optional[StrictStr] = Field(None, alias="sourceType")
    status: Optional[StrictStr] = None
    target_date: Optional[date] = Field(None, alias="targetDate", description="The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="The amount of taxation.")
    tax_message: Optional[StrictStr] = Field(None, alias="taxMessage", description="The message about the status of tax calculation related to the debit memo. If tax calculation fails in one debit memo, this field displays the reason for the failure.")
    tax_status: Optional[StrictStr] = Field(None, alias="taxStatus")
    total_tax_exempt_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalTaxExemptAmount", description="The calculated tax amount excluded due to the exemption.")
    transferred_to_accounting: Optional[StrictStr] = Field(None, alias="transferredToAccounting")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the Zuora user who last updated the debit memo.")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:31:10.")
    e_invoice_status: Optional[StrictStr] = Field(None, alias="eInvoiceStatus")
    e_invoice_error_code: Optional[StrictStr] = Field(None, alias="eInvoiceErrorCode", description="eInvoiceErrorCode. ")
    e_invoice_error_message: Optional[StrictStr] = Field(None, alias="eInvoiceErrorMessage", description="eInvoiceErrorMessage. ")
    e_invoice_file_id: Optional[StrictStr] = Field(None, alias="eInvoiceFileId", description="eInvoiceFileId. ")
    bill_to_contact_snapshot_id: Optional[StrictStr] = Field(None, alias="billToContactSnapshotId", description="billToContactSnapshotId. ")
    organization_label: Optional[StrictStr] = Field(None, alias="organizationLabel", description="organization label. ")
    currency: Optional[StrictStr] = Field(None, description="Currency code.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "accountId", "accountNumber", "amount", "autoPay", "balance", "beAppliedAmount", "billToContactId", "cancelledById", "cancelledOn", "comment", "createdById", "createdDate", "debitMemoDate", "dueDate", "id", "invoiceGroupNumber", "latestPDFFileId", "number", "paymentTerm", "postedById", "postedOn", "reasonCode", "referredCreditMemoId", "referredInvoiceId", "sequenceSetId", "sourceType", "status", "targetDate", "taxAmount", "taxMessage", "taxStatus", "totalTaxExemptAmount", "transferredToAccounting", "updatedById", "updatedDate", "eInvoiceStatus", "eInvoiceErrorCode", "eInvoiceErrorMessage", "eInvoiceFileId", "billToContactSnapshotId", "organizationLabel", "currency"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DebitMemo:
        """Create an instance of DebitMemo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DebitMemo:
        """Create an instance of DebitMemo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DebitMemo.parse_obj(obj)

        _obj = DebitMemo.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "amount": obj.get("amount"),
            "auto_pay": obj.get("autoPay"),
            "balance": obj.get("balance"),
            "be_applied_amount": obj.get("beAppliedAmount"),
            "bill_to_contact_id": obj.get("billToContactId"),
            "cancelled_by_id": obj.get("cancelledById"),
            "cancelled_on": obj.get("cancelledOn"),
            "comment": obj.get("comment"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "debit_memo_date": obj.get("debitMemoDate"),
            "due_date": obj.get("dueDate"),
            "id": obj.get("id"),
            "invoice_group_number": obj.get("invoiceGroupNumber"),
            "latest_pdf_file_id": obj.get("latestPDFFileId"),
            "number": obj.get("number"),
            "payment_term": obj.get("paymentTerm"),
            "posted_by_id": obj.get("postedById"),
            "posted_on": obj.get("postedOn"),
            "reason_code": obj.get("reasonCode"),
            "referred_credit_memo_id": obj.get("referredCreditMemoId"),
            "referred_invoice_id": obj.get("referredInvoiceId"),
            "sequence_set_id": obj.get("sequenceSetId"),
            "source_type": obj.get("sourceType"),
            "status": obj.get("status"),
            "target_date": obj.get("targetDate"),
            "tax_amount": obj.get("taxAmount"),
            "tax_message": obj.get("taxMessage"),
            "tax_status": obj.get("taxStatus"),
            "total_tax_exempt_amount": obj.get("totalTaxExemptAmount"),
            "transferred_to_accounting": obj.get("transferredToAccounting"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate"),
            "e_invoice_status": obj.get("eInvoiceStatus"),
            "e_invoice_error_code": obj.get("eInvoiceErrorCode"),
            "e_invoice_error_message": obj.get("eInvoiceErrorMessage"),
            "e_invoice_file_id": obj.get("eInvoiceFileId"),
            "bill_to_contact_snapshot_id": obj.get("billToContactSnapshotId"),
            "organization_label": obj.get("organizationLabel"),
            "currency": obj.get("currency")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


