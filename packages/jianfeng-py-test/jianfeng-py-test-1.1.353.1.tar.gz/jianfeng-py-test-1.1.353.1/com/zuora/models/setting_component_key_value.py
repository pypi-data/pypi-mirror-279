# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.configuration_template_content import ConfigurationTemplateContent

class SettingComponentKeyValue(BaseModel):
    """
    Provides details about the individual components that need to be compared and deployed.  # noqa: E501
    """
    errors: Optional[conlist(StrictStr)] = None
    original_payload: Optional[Dict[str, Any]] = Field(None, alias="originalPayload", description="Json node object contains metadata.")
    response: Optional[conlist(ConfigurationTemplateContent)] = None
    segregation_keys: Optional[conlist(StrictStr)] = Field(None, alias="segregationKeys")
    __properties = ["errors", "originalPayload", "response", "segregationKeys"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SettingComponentKeyValue:
        """Create an instance of SettingComponentKeyValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in response (list)
        _items = []
        if self.response:
            for _item in self.response:
                if _item:
                    _items.append(_item.to_dict())
            _dict['response'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SettingComponentKeyValue:
        """Create an instance of SettingComponentKeyValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SettingComponentKeyValue.parse_obj(obj)

        _obj = SettingComponentKeyValue.parse_obj({
            "errors": obj.get("errors"),
            "original_payload": obj.get("originalPayload"),
            "response": [ConfigurationTemplateContent.from_dict(_item) for _item in obj.get("response")] if obj.get("response") is not None else None,
            "segregation_keys": obj.get("segregationKeys")
        })
        return _obj


