# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class PaymentScheduleBillingDocument(BaseModel):
    """
    Object of the billing document with which the payment schedule is associated.  **Note:** - This field is optional. If you have the Standalone Payment feature enabled, you can leave this field blank and set `standalone` to `true` to create standalone payments. You can also choose to create unapplied payments by leaving this object blank and setting `standalone` to `false`. - If Standalone Payment is not enabled, leaving this object unspecified will create unapplied payments. - Object for the billing document with which the payment schedule item is associated.  - Note: You must specify the same billing document for all the payment schedule items in one payment schedule.   # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="ID of the billing document.  **Note:**  If a billing document is specified, either `id` or `number` of the billing document must be specified. You cannot specify both of them or skip both. ")
    number: Optional[StrictStr] = Field(None, description="ID of the billing document.  **Note:**  If a billing document is specified, either `id` or `number` of the billing document must be specified. You cannot specify both of them or skip both. ")
    type: StrictStr = Field(...)
    __properties = ["id", "number", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentScheduleBillingDocument:
        """Create an instance of PaymentScheduleBillingDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentScheduleBillingDocument:
        """Create an instance of PaymentScheduleBillingDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentScheduleBillingDocument.parse_obj(obj)

        _obj = PaymentScheduleBillingDocument.parse_obj({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "type": obj.get("type")
        })
        return _obj


