# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class SignUpTaxInfo(BaseModel):
    """
    Information about the tax exempt status of a customer account.   # noqa: E501
    """
    vatid: Optional[constr(strict=True, max_length=25)] = Field(None, alias="VATId", description="EU Value Added Tax ID.  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). ")
    company_code: Optional[constr(strict=True, max_length=50)] = Field(None, alias="companyCode", description="Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). ")
    exempt_certificate_id: Optional[constr(strict=True, max_length=32)] = Field(None, alias="exemptCertificateId", description="ID of the customer tax exemption certificate. Applicable if you use Zuora Tax or Connect tax engines. ")
    exempt_certificate_type: Optional[constr(strict=True, max_length=32)] = Field(None, alias="exemptCertificateType", description="Type of tax exemption certificate that the customer holds. Applicable if you use Zuora Tax or Connect tax engines. ")
    exempt_description: Optional[constr(strict=True, max_length=500)] = Field(None, alias="exemptDescription", description="Description of the tax exemption certificate that the customer holds. Applicable if you use Zuora Tax or Connect tax engines. ")
    exempt_effective_date: Optional[date] = Field(None, alias="exemptEffectiveDate", description="Date when the customer tax exemption starts, in YYYY-MM-DD format. Applicable if you use Zuora Tax or Connect tax engines. ")
    exempt_expiration_date: Optional[date] = Field(None, alias="exemptExpirationDate", description="Date when the customer tax exemption expires, in YYYY-MM-DD format. Applicable if you use Zuora Tax or Connect tax engines. ")
    exempt_issuing_jurisdiction: Optional[constr(strict=True, max_length=32)] = Field(None, alias="exemptIssuingJurisdiction", description="Jurisdiction in which the customer tax exemption certificate was issued. ")
    exempt_status: Optional[StrictStr] = Field(None, alias="exemptStatus")
    __properties = ["VATId", "companyCode", "exemptCertificateId", "exemptCertificateType", "exemptDescription", "exemptEffectiveDate", "exemptExpirationDate", "exemptIssuingJurisdiction", "exemptStatus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignUpTaxInfo:
        """Create an instance of SignUpTaxInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignUpTaxInfo:
        """Create an instance of SignUpTaxInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignUpTaxInfo.parse_obj(obj)

        _obj = SignUpTaxInfo.parse_obj({
            "vatid": obj.get("VATId"),
            "company_code": obj.get("companyCode"),
            "exempt_certificate_id": obj.get("exemptCertificateId"),
            "exempt_certificate_type": obj.get("exemptCertificateType"),
            "exempt_description": obj.get("exemptDescription"),
            "exempt_effective_date": obj.get("exemptEffectiveDate"),
            "exempt_expiration_date": obj.get("exemptExpirationDate"),
            "exempt_issuing_jurisdiction": obj.get("exemptIssuingJurisdiction"),
            "exempt_status": obj.get("exemptStatus")
        })
        return _obj


