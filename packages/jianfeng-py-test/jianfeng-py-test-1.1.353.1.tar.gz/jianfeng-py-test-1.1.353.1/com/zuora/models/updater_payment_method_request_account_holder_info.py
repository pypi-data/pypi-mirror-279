# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class UpdaterPaymentMethodRequestAccountHolderInfo(BaseModel):
    """
    The account holder information. This field is not supported in updating Credit Card Reference Transaction payment methods.   # noqa: E501
    """
    address_line1: Optional[StrictStr] = Field(None, alias="addressLine1", description="The first line of the address for the account holder.  This field is required for SEPA Direct Debit payment methods on Stripe v2 for [certain countries](https://stripe.com/docs/payments/sepa-debit/set-up-payment?platform=web#web-submit-payment-method). ")
    address_line2: Optional[StrictStr] = Field(None, alias="addressLine2", description="The second line of the address for the account holder.  ")
    city: Optional[StrictStr] = Field(None, description="The city where the account holder stays. ")
    country: Optional[StrictStr] = Field(None, description="The country where the account holder stays.  This field is required for SEPA payment methods on Stripe v2 for [certain countries](https://stripe.com/docs/payments/sepa-debit/set-up-payment?platform=web#web-submit-payment-method). ")
    email: Optional[StrictStr] = Field(None, description="The email address of the account holder. ")
    phone: Optional[StrictStr] = Field(None, description="The phone number of the account holder. ")
    state: Optional[StrictStr] = Field(None, description="The state where the account holder stays. ")
    zip_code: Optional[StrictStr] = Field(None, alias="zipCode", description="The zip code for the address of the account holder. ")
    __properties = ["addressLine1", "addressLine2", "city", "country", "email", "phone", "state", "zipCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdaterPaymentMethodRequestAccountHolderInfo:
        """Create an instance of UpdaterPaymentMethodRequestAccountHolderInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdaterPaymentMethodRequestAccountHolderInfo:
        """Create an instance of UpdaterPaymentMethodRequestAccountHolderInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdaterPaymentMethodRequestAccountHolderInfo.parse_obj(obj)

        _obj = UpdaterPaymentMethodRequestAccountHolderInfo.parse_obj({
            "address_line1": obj.get("addressLine1"),
            "address_line2": obj.get("addressLine2"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "zip_code": obj.get("zipCode")
        })
        return _obj


