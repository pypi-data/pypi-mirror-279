# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from com.zuora.models.accounting_code_type import AccountingCodeType
from com.zuora.models.journal_entry_item_type import JournalEntryItemType

class CreateJournalEntryRequestItem(BaseModel):
    """
    CreateJournalEntryRequestItem
    """
    accounting_code_name: StrictStr = Field(..., alias="accountingCodeName", description="Name of the accounting code. ")
    accounting_code_type: Optional[AccountingCodeType] = Field(None, alias="accountingCodeType")
    amount: StrictStr = Field(..., description="Journal entry item amount in transaction currency. ")
    home_currency_amount: Optional[StrictStr] = Field(None, alias="homeCurrencyAmount", description="Journal entry item amount in home currency.  This field is required if you have set your home currency for foreign currency conversion. Otherwise, do not pass this field. ")
    type: JournalEntryItemType = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["accountingCodeName", "accountingCodeType", "amount", "homeCurrencyAmount", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateJournalEntryRequestItem:
        """Create an instance of CreateJournalEntryRequestItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateJournalEntryRequestItem:
        """Create an instance of CreateJournalEntryRequestItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateJournalEntryRequestItem.parse_obj(obj)

        _obj = CreateJournalEntryRequestItem.parse_obj({
            "accounting_code_name": obj.get("accountingCodeName"),
            "accounting_code_type": obj.get("accountingCodeType"),
            "amount": obj.get("amount"),
            "home_currency_amount": obj.get("homeCurrencyAmount"),
            "type": obj.get("type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


