# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from com.zuora.models.organization_label import OrganizationLabel

class CreateAccountingPeriodRequest(BaseModel):
    """
    CreateAccountingPeriodRequest
    """
    end_date: date = Field(..., alias="endDate", description="The end date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\". ")
    fiscal_year: StrictInt = Field(..., alias="fiscalYear", description="Fiscal year of the accounting period in yyyy format. ")
    fiscal_quarter: Optional[StrictInt] = Field(None, alias="fiscalQuarter")
    name: StrictStr = Field(..., description="Name of the accounting period.  Accounting period name must be unique. Maximum of 100 characters. ")
    notes: Optional[StrictStr] = Field(None, description="Notes about the accounting period.  Maximum of 255 characters. ")
    start_date: date = Field(..., alias="startDate", description="The start date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\". ")
    organization_labels: Optional[conlist(OrganizationLabel)] = Field(None, alias="organizationLabels", description="Organization labels. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["endDate", "fiscalYear", "fiscalQuarter", "name", "notes", "startDate", "organizationLabels"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAccountingPeriodRequest:
        """Create an instance of CreateAccountingPeriodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in organization_labels (list)
        _items = []
        if self.organization_labels:
            for _item in self.organization_labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizationLabels'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAccountingPeriodRequest:
        """Create an instance of CreateAccountingPeriodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAccountingPeriodRequest.parse_obj(obj)

        _obj = CreateAccountingPeriodRequest.parse_obj({
            "end_date": obj.get("endDate"),
            "fiscal_year": obj.get("fiscalYear"),
            "fiscal_quarter": obj.get("fiscalQuarter"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "start_date": obj.get("startDate"),
            "organization_labels": [OrganizationLabel.from_dict(_item) for _item in obj.get("organizationLabels")] if obj.get("organizationLabels") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


