# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, constr

class RevproAccountingCodes(BaseModel):
    """
    RevproAccountingCodes
    """
    adjustment_liability_account: constr(strict=True, max_length=100) = Field(..., alias="adjustmentLiabilityAccount", description="The name of the account where the Account Type is \"Adjustment Liability\".")
    adjustment_revenue_account: constr(strict=True, max_length=100) = Field(..., alias="adjustmentRevenueAccount", description="The name of the account where the Account Type is \"Adjustment Revenue\".")
    contract_asset_account: constr(strict=True, max_length=100) = Field(..., alias="contractAssetAccount", description="The name of the account where the Account Type is \"Contract Asset\".")
    contract_liability_account: constr(strict=True, max_length=100) = Field(..., alias="contractLiabilityAccount", description="The name of the account where the Account Type is \"Contract Liability\".")
    product_rate_plan_charge_id: StrictStr = Field(..., alias="productRatePlanChargeId", description="The ID of your product rate plan charge.")
    recognized_revenue_account: constr(strict=True, max_length=100) = Field(..., alias="recognizedRevenueAccount", description="The name of the account where the Account Type is \"Recognized Revenue\".")
    unbilled_receivables_account: constr(strict=True, max_length=100) = Field(..., alias="unbilledReceivablesAccount", description="The name of the account where the Account Type is \"Unbilled Receivables\".")
    __properties = ["adjustmentLiabilityAccount", "adjustmentRevenueAccount", "contractAssetAccount", "contractLiabilityAccount", "productRatePlanChargeId", "recognizedRevenueAccount", "unbilledReceivablesAccount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RevproAccountingCodes:
        """Create an instance of RevproAccountingCodes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RevproAccountingCodes:
        """Create an instance of RevproAccountingCodes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RevproAccountingCodes.parse_obj(obj)

        _obj = RevproAccountingCodes.parse_obj({
            "adjustment_liability_account": obj.get("adjustmentLiabilityAccount"),
            "adjustment_revenue_account": obj.get("adjustmentRevenueAccount"),
            "contract_asset_account": obj.get("contractAssetAccount"),
            "contract_liability_account": obj.get("contractLiabilityAccount"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "recognized_revenue_account": obj.get("recognizedRevenueAccount"),
            "unbilled_receivables_account": obj.get("unbilledReceivablesAccount")
        })
        return _obj


