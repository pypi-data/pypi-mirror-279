# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.create_journal_entry_request_item import CreateJournalEntryRequestItem
from com.zuora.models.create_journal_entry_request_segment import CreateJournalEntryRequestSegment
from com.zuora.models.transferred_to_accounting_status import TransferredToAccountingStatus

class CreateJournalEntryRequest(BaseModel):
    """
    CreateJournalEntryRequest
    """
    accounting_period_name: StrictStr = Field(..., alias="accountingPeriodName", description="Name of the accounting period. The open-ended accounting period is named `Open-Ended`. ")
    currency: StrictStr = Field(..., description="The type of currency used. Currency must be active. ")
    journal_entry_date: date = Field(..., alias="journalEntryDate", description="Date of the journal entry. ")
    journal_entry_items: conlist(CreateJournalEntryRequestItem) = Field(..., alias="journalEntryItems", description="Key name that represents the list of journal entry items. ")
    notes: Optional[StrictStr] = Field(None, description="The number associated with the revenue event.  Character limit: 2,000 ")
    organization_label: Optional[StrictStr] = Field(None, alias="organizationLabel", description="Organization Label ")
    segments: Optional[conlist(CreateJournalEntryRequestSegment)] = Field(None, description="List of segments that apply to the summary journal entry. ")
    transferred_to_accounting: Optional[TransferredToAccountingStatus] = Field(None, alias="transferredToAccounting")
    additional_properties: Dict[str, Any] = {}
    __properties = ["accountingPeriodName", "currency", "journalEntryDate", "journalEntryItems", "notes", "organizationLabel", "segments", "transferredToAccounting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateJournalEntryRequest:
        """Create an instance of CreateJournalEntryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in journal_entry_items (list)
        _items = []
        if self.journal_entry_items:
            for _item in self.journal_entry_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['journalEntryItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item in self.segments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['segments'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateJournalEntryRequest:
        """Create an instance of CreateJournalEntryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateJournalEntryRequest.parse_obj(obj)

        _obj = CreateJournalEntryRequest.parse_obj({
            "accounting_period_name": obj.get("accountingPeriodName"),
            "currency": obj.get("currency"),
            "journal_entry_date": obj.get("journalEntryDate"),
            "journal_entry_items": [CreateJournalEntryRequestItem.from_dict(_item) for _item in obj.get("journalEntryItems")] if obj.get("journalEntryItems") is not None else None,
            "notes": obj.get("notes"),
            "organization_label": obj.get("organizationLabel"),
            "segments": [CreateJournalEntryRequestSegment.from_dict(_item) for _item in obj.get("segments")] if obj.get("segments") is not None else None,
            "transferred_to_accounting": obj.get("transferredToAccounting")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


