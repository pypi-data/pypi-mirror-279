# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from com.zuora.models.preview_charge_metrics_cmrr import PreviewChargeMetricsCmrr
from com.zuora.models.preview_charge_metrics_tax import PreviewChargeMetricsTax
from com.zuora.models.preview_charge_metrics_tcb import PreviewChargeMetricsTcb
from com.zuora.models.preview_charge_metrics_tcv import PreviewChargeMetricsTcv

class PreviewChargeMetrics(BaseModel):
    """
    PreviewChargeMetrics
    """
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber")
    cmrr: Optional[PreviewChargeMetricsCmrr] = None
    origin_rate_plan_id: Optional[StrictStr] = Field(None, alias="originRatePlanId")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="productRatePlanChargeId")
    product_rate_plan_id: Optional[StrictStr] = Field(None, alias="productRatePlanId")
    subscription_rate_plan_number: Optional[StrictStr] = Field(None, alias="subscriptionRatePlanNumber")
    tax: Optional[PreviewChargeMetricsTax] = None
    tcb: Optional[PreviewChargeMetricsTcb] = None
    tcv: Optional[PreviewChargeMetricsTcv] = None
    __properties = ["chargeNumber", "cmrr", "originRatePlanId", "productRatePlanChargeId", "productRatePlanId", "subscriptionRatePlanNumber", "tax", "tcb", "tcv"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewChargeMetrics:
        """Create an instance of PreviewChargeMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cmrr
        if self.cmrr:
            _dict['cmrr'] = self.cmrr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax
        if self.tax:
            _dict['tax'] = self.tax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tcb
        if self.tcb:
            _dict['tcb'] = self.tcb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tcv
        if self.tcv:
            _dict['tcv'] = self.tcv.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewChargeMetrics:
        """Create an instance of PreviewChargeMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewChargeMetrics.parse_obj(obj)

        _obj = PreviewChargeMetrics.parse_obj({
            "charge_number": obj.get("chargeNumber"),
            "cmrr": PreviewChargeMetricsCmrr.from_dict(obj.get("cmrr")) if obj.get("cmrr") is not None else None,
            "origin_rate_plan_id": obj.get("originRatePlanId"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "product_rate_plan_id": obj.get("productRatePlanId"),
            "subscription_rate_plan_number": obj.get("subscriptionRatePlanNumber"),
            "tax": PreviewChargeMetricsTax.from_dict(obj.get("tax")) if obj.get("tax") is not None else None,
            "tcb": PreviewChargeMetricsTcb.from_dict(obj.get("tcb")) if obj.get("tcb") is not None else None,
            "tcv": PreviewChargeMetricsTcv.from_dict(obj.get("tcv")) if obj.get("tcv") is not None else None
        })
        return _obj


