# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class CreateBillingPreviewCreditMemoItem(BaseModel):
    """
    CreateBillingPreviewCreditMemoItem
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax ")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="The credit memo item amount excluding tax. ")
    applied_to_item_id: Optional[StrictStr] = Field(None, alias="appliedToItemId", description="The unique ID of the credit memo item that the discount charge is applied to. ")
    charge_date: Optional[StrictStr] = Field(None, alias="chargeDate", description="The date when the credit memo item is created. ")
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="Number of the charge. ")
    charge_type: Optional[StrictStr] = Field(None, alias="chargeType", description="The type of charge.   Possible values are `OneTime`, `Recurring`, and `Usage`. ")
    comment: Optional[StrictStr] = Field(None, description="Comment of the credit memo item. ")
    id: Optional[StrictStr] = Field(None, description="Credit memo item id. ")
    number_of_deliveries: Optional[StrictStr] = Field(None, alias="numberOfDeliveries", description="The number of delivery for charge.  **Note**: This field is available only if you have the Delivery Pricing feature enabled. ")
    processing_type: Optional[StrictStr] = Field(None, alias="processingType", description="Identifies the kind of charge.   Possible values: * charge * discount * prepayment * tax ")
    quantity: Optional[StrictStr] = Field(None, description="Quantity of this item, in the configured unit of measure for the charge. ")
    rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="ratePlanChargeId", description="Id of the rate plan charge associated with this item. ")
    service_end_date: Optional[date] = Field(None, alias="serviceEndDate", description="End date of the service period for this item, i.e., the last day of the service period, in yyyy-mm-dd format. ")
    service_start_date: Optional[date] = Field(None, alias="serviceStartDate", description="Start date of the service period for this item, in yyyy-mm-dd format. If the charge is a one-time fee, this is the date of that charge. ")
    sku: Optional[StrictStr] = Field(None, description="Unique SKU for the product associated with this item. ")
    sku_name: Optional[StrictStr] = Field(None, alias="skuName", description="Name of the unique SKU for the product associated with this item. ")
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId", description="ID of the subscription associated with this item. ")
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber", description="Name of the subscription associated with this item. ")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="unitOfMeasure", description="Unit used to measure consumption. ")
    __properties = ["amount", "amountWithoutTax", "appliedToItemId", "chargeDate", "chargeNumber", "chargeType", "comment", "id", "numberOfDeliveries", "processingType", "quantity", "ratePlanChargeId", "serviceEndDate", "serviceStartDate", "sku", "skuName", "subscriptionId", "subscriptionNumber", "unitOfMeasure"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateBillingPreviewCreditMemoItem:
        """Create an instance of CreateBillingPreviewCreditMemoItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateBillingPreviewCreditMemoItem:
        """Create an instance of CreateBillingPreviewCreditMemoItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateBillingPreviewCreditMemoItem.parse_obj(obj)

        _obj = CreateBillingPreviewCreditMemoItem.parse_obj({
            "amount": obj.get("amount"),
            "amount_without_tax": obj.get("amountWithoutTax"),
            "applied_to_item_id": obj.get("appliedToItemId"),
            "charge_date": obj.get("chargeDate"),
            "charge_number": obj.get("chargeNumber"),
            "charge_type": obj.get("chargeType"),
            "comment": obj.get("comment"),
            "id": obj.get("id"),
            "number_of_deliveries": obj.get("numberOfDeliveries"),
            "processing_type": obj.get("processingType"),
            "quantity": obj.get("quantity"),
            "rate_plan_charge_id": obj.get("ratePlanChargeId"),
            "service_end_date": obj.get("serviceEndDate"),
            "service_start_date": obj.get("serviceStartDate"),
            "sku": obj.get("sku"),
            "sku_name": obj.get("skuName"),
            "subscription_id": obj.get("subscriptionId"),
            "subscription_number": obj.get("subscriptionNumber"),
            "unit_of_measure": obj.get("unitOfMeasure")
        })
        return _obj


