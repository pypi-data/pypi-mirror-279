# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from com.zuora.models.collect_debit_memo_request_payment import CollectDebitMemoRequestPayment

class CollectDebitMemoRequest(BaseModel):
    """
    CollectDebitMemoRequest
    """
    application_order: Optional[conlist(StrictStr)] = Field(None, alias="applicationOrder", description="The priority order to apply credit memos and/or unapplied payments to the debit memo. Possible item values are: `CreditMemo`, `UnappliedPayment`.  **Note:**   - This field is valid only if the `applyCredit` field is set to `true`.   - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply the debit memo. ")
    apply_credit: Optional[StrictBool] = Field(False, alias="applyCredit", description="Whether to automatically apply credit memos or unapplied payments, or both to the debit memo. If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the debit memo. If no value is specified or the value is `false`, no action is taken. ")
    collect: Optional[StrictBool] = Field(False, description="Indicates if the current request needs to collect payment or not. ")
    payment: Optional[CollectDebitMemoRequestPayment] = None
    __properties = ["applicationOrder", "applyCredit", "collect", "payment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CollectDebitMemoRequest:
        """Create an instance of CollectDebitMemoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment
        if self.payment:
            _dict['payment'] = self.payment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CollectDebitMemoRequest:
        """Create an instance of CollectDebitMemoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CollectDebitMemoRequest.parse_obj(obj)

        _obj = CollectDebitMemoRequest.parse_obj({
            "application_order": obj.get("applicationOrder"),
            "apply_credit": obj.get("applyCredit") if obj.get("applyCredit") is not None else False,
            "collect": obj.get("collect") if obj.get("collect") is not None else False,
            "payment": CollectDebitMemoRequestPayment.from_dict(obj.get("payment")) if obj.get("payment") is not None else None
        })
        return _obj


