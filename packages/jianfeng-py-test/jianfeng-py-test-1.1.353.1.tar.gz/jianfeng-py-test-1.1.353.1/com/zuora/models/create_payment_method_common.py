# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class CreatePaymentMethodCommon(BaseModel):
    """
    CreatePaymentMethodCommon
    """
    account_key: Optional[StrictStr] = Field(None, alias="accountKey", description="Internal ID of the customer account that will own the payment method. ")
    auth_gateway: Optional[StrictStr] = Field(None, alias="authGateway", description="Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set. ")
    ip_address: Optional[StrictStr] = Field(None, alias="ipAddress", description="The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways.   If the IP address length is beyond 45 characters, a validation error occurs.  For validating SEPA payment methods on Stripe v2, this field is required. ")
    make_default: Optional[StrictBool] = Field(False, alias="makeDefault", description="Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set. ")
    __properties = ["accountKey", "authGateway", "ipAddress", "makeDefault"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePaymentMethodCommon:
        """Create an instance of CreatePaymentMethodCommon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePaymentMethodCommon:
        """Create an instance of CreatePaymentMethodCommon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePaymentMethodCommon.parse_obj(obj)

        _obj = CreatePaymentMethodCommon.parse_obj({
            "account_key": obj.get("accountKey"),
            "auth_gateway": obj.get("authGateway"),
            "ip_address": obj.get("ipAddress"),
            "make_default": obj.get("makeDefault") if obj.get("makeDefault") is not None else False
        })
        return _obj


