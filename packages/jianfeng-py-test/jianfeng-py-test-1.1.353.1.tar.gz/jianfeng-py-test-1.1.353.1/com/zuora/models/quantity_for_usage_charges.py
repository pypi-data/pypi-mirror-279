# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class QuantityForUsageCharges(BaseModel):
    """
    QuantityForUsageCharges
    """
    charge_id: Optional[StrictStr] = Field(None, alias="chargeId", description="The ID of the subscription charge. ")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The quantity of the subscription charge. ")
    __properties = ["chargeId", "quantity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QuantityForUsageCharges:
        """Create an instance of QuantityForUsageCharges from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QuantityForUsageCharges:
        """Create an instance of QuantityForUsageCharges from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QuantityForUsageCharges.parse_obj(obj)

        _obj = QuantityForUsageCharges.parse_obj({
            "charge_id": obj.get("chargeId"),
            "quantity": obj.get("quantity")
        })
        return _obj


