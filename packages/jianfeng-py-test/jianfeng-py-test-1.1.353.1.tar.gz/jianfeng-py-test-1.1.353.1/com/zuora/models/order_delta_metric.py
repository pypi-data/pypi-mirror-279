# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class OrderDeltaMetric(BaseModel):
    """
    OrderDeltaMetric
    """
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="The charge number for the associated Rate Plan Charge. This field can be null if the metric is generated for an Order Line Item. ")
    currency: Optional[StrictStr] = Field(None, description="ISO 3-letter currency code (uppercase). For example, USD. ")
    end_date: Optional[date] = Field(None, alias="endDate", description="The end date for the order delta metric. ")
    gross_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="grossAmount", description="The gross amount for the metric. The is the amount excluding applied discount. ")
    net_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netAmount", description="The net amount for the metric. The is the amount with discounts applied ")
    order_action_id: Optional[StrictStr] = Field(None, alias="orderActionId", description="The Id for the related Order Action. This field can be null if the metric is generated for an Order Line Item. ")
    order_action_sequence: Optional[StrictStr] = Field(None, alias="orderActionSequence", description="The sequence for the related Order Action. This field can be null if the metric is generated for an Order Line Item. ")
    order_action_type: Optional[StrictStr] = Field(None, alias="orderActionType", description="The type for the related Order Action. This field can be null if the metric is generated for an Order Line Item. ")
    order_line_item_number: Optional[StrictStr] = Field(None, alias="orderLineItemNumber", description="A sequential number auto-assigned for each of order line items in a order, used as an index, for example, \"1\". ")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="productRatePlanChargeId", description="The Id for the associated Product Rate Plan Charge. This field can be null if the Order Line Item is not associated with a Product Rate Plan Charge.")
    rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="ratePlanChargeId", description="The id for the associated Rate Plan Charge. This field can be null if the metric is generated for an Order Line Item. ")
    start_date: Optional[date] = Field(None, alias="startDate", description="The start date for the order delta metric. ")
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber", description="The number of the subscription. This field can be null if the metric is generated for an Order Line Item. ")
    __properties = ["chargeNumber", "currency", "endDate", "grossAmount", "netAmount", "orderActionId", "orderActionSequence", "orderActionType", "orderLineItemNumber", "productRatePlanChargeId", "ratePlanChargeId", "startDate", "subscriptionNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderDeltaMetric:
        """Create an instance of OrderDeltaMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderDeltaMetric:
        """Create an instance of OrderDeltaMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderDeltaMetric.parse_obj(obj)

        _obj = OrderDeltaMetric.parse_obj({
            "charge_number": obj.get("chargeNumber"),
            "currency": obj.get("currency"),
            "end_date": obj.get("endDate"),
            "gross_amount": obj.get("grossAmount"),
            "net_amount": obj.get("netAmount"),
            "order_action_id": obj.get("orderActionId"),
            "order_action_sequence": obj.get("orderActionSequence"),
            "order_action_type": obj.get("orderActionType"),
            "order_line_item_number": obj.get("orderLineItemNumber"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "rate_plan_charge_id": obj.get("ratePlanChargeId"),
            "start_date": obj.get("startDate"),
            "subscription_number": obj.get("subscriptionNumber")
        })
        return _obj


