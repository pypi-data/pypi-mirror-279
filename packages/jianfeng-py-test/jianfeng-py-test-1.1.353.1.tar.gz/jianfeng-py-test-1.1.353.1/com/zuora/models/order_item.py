# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class OrderItem(BaseModel):
    """
    Represents an order item. An order item is a sales item within an order in the context of the recurring subscription business model. It can be a unit of products or a service, but defined by both quantity and term (the start and end dates).Â   For the one time and the recurring charge types, if an order action causes a quantity metric creation (when the delta quantity equals to or is greater than zero), an order item is created.  The following order actions will create an order item for the one time and recurring charges. The other order actions will refer to an existing order item. Also, the Owner Transfer order action always creates an order item whose quantity field is zero.    * Create Subscription   * Terms and Conditions - Extend Term   * Renewal   * Update Product - Increase Quantity   * Add product   * Owner Transfer  For the usage charge type, if the order action causes a usage increase, an order item is created, and the quantity field of the order item is always zero.  The following order actions will create an order item for for the usage charges.    * Create Subscription   * Terms and Conditions - Extend Term   * Renewal   * Add product   * Owner Transfer   # noqa: E501
    """
    end_date: Optional[date] = Field(None, alias="endDate", description="The order item's effective end date, aligned with the end date of an increased quantity order metrics.")
    id: Optional[StrictStr] = Field(None, description="The ID of the order item.")
    order_action_id: Optional[StrictStr] = Field(None, alias="orderActionId", description="Specify the order action that creates this order item.")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The order item quantity. For the usage charge type, the value of this field is always zero. Also, the Owner Transfer order action always creates an order item whose Quantity field is zero.")
    sc_id: Optional[StrictStr] = Field(None, alias="scId", description="The ID of the charge segment that gets newly generated when the order item is created.")
    start_date: Optional[date] = Field(None, alias="startDate", description="The order item's effective start date, aligned with the start date of an increased quantity order metrics.")
    __properties = ["endDate", "id", "orderActionId", "quantity", "scId", "startDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderItem:
        """Create an instance of OrderItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderItem:
        """Create an instance of OrderItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderItem.parse_obj(obj)

        _obj = OrderItem.parse_obj({
            "end_date": obj.get("endDate"),
            "id": obj.get("id"),
            "order_action_id": obj.get("orderActionId"),
            "quantity": obj.get("quantity"),
            "sc_id": obj.get("scId"),
            "start_date": obj.get("startDate")
        })
        return _obj


