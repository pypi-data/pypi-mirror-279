# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.account_summary_payment_invoice import AccountSummaryPaymentInvoice

class AccountSummaryPayment(BaseModel):
    """
    AccountSummaryPayment
    """
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="Effective date as `yyyy-mm-dd`. ")
    id: Optional[StrictStr] = Field(None, description="Payment ID. ")
    paid_invoices: Optional[conlist(AccountSummaryPaymentInvoice)] = Field(None, alias="paidInvoices", description="Container for paid invoices for this subscription. ")
    payment_number: Optional[StrictStr] = Field(None, alias="paymentNumber", description="Payment number. ")
    payment_type: Optional[StrictStr] = Field(None, alias="paymentType", description="Payment type; possible values are: `External`, `Electronic`. ")
    status: Optional[StrictStr] = Field(None, description="Payment status. Possible values are: `Draft`, `Processing`, `Processed`, `Error`, `Voided`, `Canceled`, `Posted`. ")
    __properties = ["effectiveDate", "id", "paidInvoices", "paymentNumber", "paymentType", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountSummaryPayment:
        """Create an instance of AccountSummaryPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in paid_invoices (list)
        _items = []
        if self.paid_invoices:
            for _item in self.paid_invoices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paidInvoices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountSummaryPayment:
        """Create an instance of AccountSummaryPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountSummaryPayment.parse_obj(obj)

        _obj = AccountSummaryPayment.parse_obj({
            "effective_date": obj.get("effectiveDate"),
            "id": obj.get("id"),
            "paid_invoices": [AccountSummaryPaymentInvoice.from_dict(_item) for _item in obj.get("paidInvoices")] if obj.get("paidInvoices") is not None else None,
            "payment_number": obj.get("paymentNumber"),
            "payment_type": obj.get("paymentType"),
            "status": obj.get("status")
        })
        return _obj


