# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator
from com.zuora.models.billing_document_item_processing_type import BillingDocumentItemProcessingType
from com.zuora.models.billing_document_item_source_type import BillingDocumentItemSourceType
from com.zuora.models.credit_memo_item_finance_information import CreditMemoItemFinanceInformation
from com.zuora.models.failed_reason import FailedReason
from com.zuora.models.get_credit_memo_item_taxation_items import GetCreditMemoItemTaxationItems
from com.zuora.models.get_credit_memo_tax_item_response import GetCreditMemoTaxItemResponse
from com.zuora.models.tax_mode import TaxMode

class CreditMemoItemResponse(BaseModel):
    """
    CreditMemoItemResponse
    """
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax.")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="The credit memo item amount excluding tax.")
    applied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="appliedAmount", description="The applied amount of the credit memo item.")
    applied_to_item_id: Optional[StrictStr] = Field(None, alias="appliedToItemId", description="The unique ID of the credit memo item that the discount charge is applied to.")
    comment: Optional[StrictStr] = Field(None, description="Comments about the credit memo item. **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the Zuora user who created the credit memo item.")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the credit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.")
    credit_from_item_id: Optional[StrictStr] = Field(None, alias="creditFromItemId", description="The ID of the credit from item.")
    credit_from_item_source: Optional[StrictStr] = Field(None, alias="creditFromItemSource", description="The type of the credit from item.")
    credit_tax_items: Optional[conlist(GetCreditMemoTaxItemResponse)] = Field(None, alias="creditTaxItems", description="Container for the taxation items of the credit memo item.   **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later. ")
    description: Optional[StrictStr] = Field(None, description="The description of the credit memo item. **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBillingFromRevenueAccounting", description="The flag to exclude the credit memo item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    finance_information: Optional[CreditMemoItemFinanceInformation] = Field(None, alias="financeInformation")
    id: Optional[StrictStr] = Field(None, description="The ID of the credit memo item.")
    invoice_schedule_id: Optional[StrictStr] = Field(None, alias="invoiceScheduleId", description="The ID of the invoice schedule associated with the credit memo item.   **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature enabled. ")
    invoice_schedule_item_id: Optional[StrictStr] = Field(None, alias="invoiceScheduleItemId", description="The ID of the invoice schedule item associated with the credit memo item. The credit memo item is generated during the processing of the invoice schedule item. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature enabled.")
    processing_type: Optional[StrictStr] = Field(None, alias="processingType")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The number of units for the credit memo item.")
    refund_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="refundAmount", description="The amount of the refund on the credit memo item.")
    service_end_date: Optional[date] = Field(None, alias="serviceEndDate", description="The service end date of the credit memo item.  ")
    service_start_date: Optional[date] = Field(None, alias="serviceStartDate", description="The service start date of the credit memo item.")
    sku: Optional[StrictStr] = Field(None, description="The SKU for the product associated with the credit memo item.")
    sku_name: Optional[StrictStr] = Field(None, alias="skuName", description="The name of the SKU.")
    sold_to_contact_id: Optional[StrictStr] = Field(None, alias="soldToContactId", description="The ID of the sold-to contact associated with the credit memo item. **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.")
    sold_to_contact_snapshot_id: Optional[StrictStr] = Field(None, alias="soldToContactSnapshotId", description="The ID of the sold-to contact snapshot associated with the credit memo item. **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.")
    source_item_id: Optional[StrictStr] = Field(None, alias="sourceItemId", description="The ID of the source item. - If the value of the `sourceItemType` field is `SubscriptionComponent` , the value of this field is the ID of the corresponding rate plan charge. - If the value of the `sourceItemType` field is `InvoiceDetail`, the value of this field is the ID of the corresponding invoice item. - If the value of the `sourceItemType` field is `ProductRatePlanCharge` , the value of this field is the ID of the corresponding product rate plan charge. - If the value of the `sourceItemType` field is `OrderLineItem` , the value of this field is the ID of the corresponding return order line item. ")
    source_item_type: Optional[StrictStr] = Field(None, alias="sourceItemType")
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId", description="The ID of the subscription associated with the credit memo item.")
    tax_mode: Optional[StrictStr] = Field(None, alias="taxMode")
    taxation_items: Optional[GetCreditMemoItemTaxationItems] = Field(None, alias="taxationItems")
    unapplied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unappliedAmount", description="The unapplied amount of the credit memo item.")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="unitOfMeasure", description="The units to measure usage.")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unitPrice", description="The per-unit price of the credit memo item.")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the Zuora user who last updated the credit memo item.")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the credit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.")
    order_line_item_id: Optional[StrictStr] = Field(None, alias="orderLineItemId", description="orderLineItemId ")
    item_type: Optional[StrictStr] = Field(None, alias="itemType", description="itemType ")
    purchase_order_number: Optional[StrictStr] = Field(None, alias="purchaseOrderNumber", description="purchaseOrderNumber ")
    fulfillment_id: Optional[StrictStr] = Field(None, alias="fulfillmentId", description="fulfillmentId ")
    number_of_deliveries: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="numberOfDeliveries", description="The number of delivery for charge.  **Note**: This field is available only if you have the Delivery Pricing feature enabled. ")
    reflect_discount_in_net_amount: Optional[StrictBool] = Field(None, alias="reflectDiscountInNetAmount", description="The flag to reflect Discount in Apply To Charge Net Amount. ")
    __properties = ["processId", "requestId", "reasons", "success", "amount", "amountWithoutTax", "appliedAmount", "appliedToItemId", "comment", "createdById", "createdDate", "creditFromItemId", "creditFromItemSource", "creditTaxItems", "description", "excludeItemBillingFromRevenueAccounting", "financeInformation", "id", "invoiceScheduleId", "invoiceScheduleItemId", "processingType", "quantity", "refundAmount", "serviceEndDate", "serviceStartDate", "sku", "skuName", "soldToContactId", "soldToContactSnapshotId", "sourceItemId", "sourceItemType", "subscriptionId", "taxMode", "taxationItems", "unappliedAmount", "unitOfMeasure", "unitPrice", "updatedById", "updatedDate", "orderLineItemId", "itemType", "purchaseOrderNumber", "fulfillmentId", "numberOfDeliveries", "reflectDiscountInNetAmount"]

    @validator('credit_from_item_source')
    def credit_from_item_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('InvoiceItem', 'CreditMemoItem'):
            raise ValueError("must be one of enum values ('InvoiceItem', 'CreditMemoItem')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreditMemoItemResponse:
        """Create an instance of CreditMemoItemResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credit_tax_items (list)
        _items = []
        if self.credit_tax_items:
            for _item in self.credit_tax_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditTaxItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of taxation_items
        if self.taxation_items:
            _dict['taxationItems'] = self.taxation_items.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreditMemoItemResponse:
        """Create an instance of CreditMemoItemResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreditMemoItemResponse.parse_obj(obj)

        _obj = CreditMemoItemResponse.parse_obj({
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "amount": obj.get("amount"),
            "amount_without_tax": obj.get("amountWithoutTax"),
            "applied_amount": obj.get("appliedAmount"),
            "applied_to_item_id": obj.get("appliedToItemId"),
            "comment": obj.get("comment"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "credit_from_item_id": obj.get("creditFromItemId"),
            "credit_from_item_source": obj.get("creditFromItemSource"),
            "credit_tax_items": [GetCreditMemoTaxItemResponse.from_dict(_item) for _item in obj.get("creditTaxItems")] if obj.get("creditTaxItems") is not None else None,
            "description": obj.get("description"),
            "exclude_item_billing_from_revenue_accounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "finance_information": CreditMemoItemFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "id": obj.get("id"),
            "invoice_schedule_id": obj.get("invoiceScheduleId"),
            "invoice_schedule_item_id": obj.get("invoiceScheduleItemId"),
            "processing_type": obj.get("processingType"),
            "quantity": obj.get("quantity"),
            "refund_amount": obj.get("refundAmount"),
            "service_end_date": obj.get("serviceEndDate"),
            "service_start_date": obj.get("serviceStartDate"),
            "sku": obj.get("sku"),
            "sku_name": obj.get("skuName"),
            "sold_to_contact_id": obj.get("soldToContactId"),
            "sold_to_contact_snapshot_id": obj.get("soldToContactSnapshotId"),
            "source_item_id": obj.get("sourceItemId"),
            "source_item_type": obj.get("sourceItemType"),
            "subscription_id": obj.get("subscriptionId"),
            "tax_mode": obj.get("taxMode"),
            "taxation_items": GetCreditMemoItemTaxationItems.from_dict(obj.get("taxationItems")) if obj.get("taxationItems") is not None else None,
            "unapplied_amount": obj.get("unappliedAmount"),
            "unit_of_measure": obj.get("unitOfMeasure"),
            "unit_price": obj.get("unitPrice"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate"),
            "order_line_item_id": obj.get("orderLineItemId"),
            "item_type": obj.get("itemType"),
            "purchase_order_number": obj.get("purchaseOrderNumber"),
            "fulfillment_id": obj.get("fulfillmentId"),
            "number_of_deliveries": obj.get("numberOfDeliveries"),
            "reflect_discount_in_net_amount": obj.get("reflectDiscountInNetAmount")
        })
        return _obj


