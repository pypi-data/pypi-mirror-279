# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class NotificationsHistoryDeletionTaskResponse(BaseModel):
    """
    The notification history deletion task information.  # noqa: E501
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the account whose notification histories are deleted by the current deletion task.")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="The ID of the user who submits the notification history deletion task.")
    created_on: Optional[StrictInt] = Field(None, alias="createdOn", description="The timestamp when the notification history deletion task is created.")
    id: Optional[StrictStr] = Field(None, description="The ID of the notification history deletion task.")
    status: Optional[StrictStr] = None
    tenant_id: Optional[StrictStr] = Field(None, alias="tenantId", description="The ID of the tenant where the notification history deletion task runs.")
    __properties = ["accountId", "createdBy", "createdOn", "id", "status", "tenantId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationsHistoryDeletionTaskResponse:
        """Create an instance of NotificationsHistoryDeletionTaskResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationsHistoryDeletionTaskResponse:
        """Create an instance of NotificationsHistoryDeletionTaskResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationsHistoryDeletionTaskResponse.parse_obj(obj)

        _obj = NotificationsHistoryDeletionTaskResponse.parse_obj({
            "account_id": obj.get("accountId"),
            "created_by": obj.get("createdBy"),
            "created_on": obj.get("createdOn"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "tenant_id": obj.get("tenantId")
        })
        return _obj


