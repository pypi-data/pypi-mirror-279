# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, confloat, conint

class OneTimePerUnitPricingOverride(BaseModel):
    """
    Pricing information about a one-time charge that uses the \"per unit\" charge model. In this charge model, the charge has a fixed price per unit purchased.   # noqa: E501
    """
    list_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="listPrice", description="Per-unit price of the charge. ")
    original_list_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="originalListPrice", description="The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ")
    quantity: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(None, description="Number of units purchased. ")
    uom: Optional[StrictStr] = Field(None, description="Unit of measure of the standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ")
    __properties = ["listPrice", "originalListPrice", "quantity", "uom"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OneTimePerUnitPricingOverride:
        """Create an instance of OneTimePerUnitPricingOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OneTimePerUnitPricingOverride:
        """Create an instance of OneTimePerUnitPricingOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OneTimePerUnitPricingOverride.parse_obj(obj)

        _obj = OneTimePerUnitPricingOverride.parse_obj({
            "list_price": obj.get("listPrice"),
            "original_list_price": obj.get("originalListPrice"),
            "quantity": obj.get("quantity"),
            "uom": obj.get("uom")
        })
        return _obj


