# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class UsageItem(BaseModel):
    """
    UsageItem
    """
    id: Optional[StrictStr] = Field(None, description="Unique ID for the usage item. ")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="Customer account ID. ")
    account_name: Optional[StrictStr] = Field(None, alias="accountName", description="Customer account name. ")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="Customer account number. ")
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber", description="Number of the subscription covering this usage. ")
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="Number of the rate-plan charge that pays for this usage. ")
    start_date_time: Optional[StrictStr] = Field(None, alias="startDateTime", description="Start date of the time period in which usage is tracked. Zuora uses this field value to determine the usage date. ")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="unitOfMeasure", description="Unit used to measure consumption. ")
    quantity: Optional[StrictStr] = Field(None, description="Number of units used. ")
    source_name: Optional[StrictStr] = Field(None, alias="sourceName", description="Source of the usage data. Possible values are: `Import`, `API`. ")
    file_name: Optional[StrictStr] = Field(None, alias="fileName", description="The name of the import file when the usage record is imported from the file. ")
    status: Optional[StrictStr] = Field(None, description="Possible values are: `Importing`, `Pending`, `Processed`. ")
    submission_date_time: Optional[StrictStr] = Field(None, alias="submissionDateTime", description="Date when usage was submitted. ")
    unique_key: Optional[StrictStr] = Field(None, alias="uniqueKey", description="a customer-defined specific identifier of a usage record.  **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled. See [Upload usage record with unique key](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Prepaid_balance_transactions#Upload_usage_record_with_unique_key) for more information. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "accountId", "accountName", "accountNumber", "subscriptionNumber", "chargeNumber", "startDateTime", "unitOfMeasure", "quantity", "sourceName", "fileName", "status", "submissionDateTime", "uniqueKey"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UsageItem:
        """Create an instance of UsageItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UsageItem:
        """Create an instance of UsageItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UsageItem.parse_obj(obj)

        _obj = UsageItem.parse_obj({
            "id": obj.get("id"),
            "account_id": obj.get("accountId"),
            "account_name": obj.get("accountName"),
            "account_number": obj.get("accountNumber"),
            "subscription_number": obj.get("subscriptionNumber"),
            "charge_number": obj.get("chargeNumber"),
            "start_date_time": obj.get("startDateTime"),
            "unit_of_measure": obj.get("unitOfMeasure"),
            "quantity": obj.get("quantity"),
            "source_name": obj.get("sourceName"),
            "file_name": obj.get("fileName"),
            "status": obj.get("status"),
            "submission_date_time": obj.get("submissionDateTime"),
            "unique_key": obj.get("uniqueKey")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


