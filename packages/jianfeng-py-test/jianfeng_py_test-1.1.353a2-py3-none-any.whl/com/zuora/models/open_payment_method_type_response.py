# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from com.zuora.models.open_payment_method_type_response_fields import OpenPaymentMethodTypeResponseFields

class OpenPaymentMethodTypeResponse(BaseModel):
    """
    OpenPaymentMethodTypeResponse
    """
    entity_id: Optional[StrictStr] = Field(None, alias="entityId", description="If an entity UUID is provided, this custom payment method type is specific to this entity only. If no entity UUID is provided, the custom payment method type is available to the global entity and all the sub entities in the tenant. ")
    fields: Optional[conlist(OpenPaymentMethodTypeResponseFields)] = Field(None, description="An array containing field metadata of the custom payment method type. ")
    internal_name: Optional[StrictStr] = Field(None, alias="internalName", description="A string to identify the custom payment method type in the API name of the payment method type.  This field is used along with the `tenantId` field by the system to construct and generate the API name of the custom payment method type in the following way:  `<internalName>__c_<tenantId>`  For example, if `internalName` is `AmazonPay`, and `tenantId` is `12368`, the API name of the custom payment method type will be `AmazonPay__c_12368`. ")
    label: Optional[StrictStr] = Field(None, description="The label that is used to refer to this type in the Zuora UI. ")
    method_reference_id_field: Optional[StrictStr] = Field(None, alias="methodReferenceIdField", description="The identification reference of the custom payment method.  This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query. ")
    revision: Optional[StrictInt] = Field(None, description="The revision number of the custom payment method type, which starts from 1 and increases by 1 when you update a published revision for the first time. ")
    status: Optional[StrictStr] = Field(None, description="The status of the custom payment method type. ")
    sub_type_field: Optional[StrictStr] = Field(None, alias="subTypeField", description="The identification reference indicating the subtype of the custom payment method.  This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query. ")
    tenant_id: Optional[StrictStr] = Field(None, alias="tenantId", description="Zuora tenant ID. If multi-entity is enabled in your tenant, this is the ID of the parent tenant of all the sub entities. ")
    user_reference_id_field: Optional[StrictStr] = Field(None, alias="userReferenceIdField", description="The identification reference of the user or customer account.  This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query. ")
    version: Optional[StrictStr] = Field(None, description="The time when the custom payment method type was first published. ")
    __properties = ["entityId", "fields", "internalName", "label", "methodReferenceIdField", "revision", "status", "subTypeField", "tenantId", "userReferenceIdField", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenPaymentMethodTypeResponse:
        """Create an instance of OpenPaymentMethodTypeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item in self.fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenPaymentMethodTypeResponse:
        """Create an instance of OpenPaymentMethodTypeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenPaymentMethodTypeResponse.parse_obj(obj)

        _obj = OpenPaymentMethodTypeResponse.parse_obj({
            "entity_id": obj.get("entityId"),
            "fields": [OpenPaymentMethodTypeResponseFields.from_dict(_item) for _item in obj.get("fields")] if obj.get("fields") is not None else None,
            "internal_name": obj.get("internalName"),
            "label": obj.get("label"),
            "method_reference_id_field": obj.get("methodReferenceIdField"),
            "revision": obj.get("revision"),
            "status": obj.get("status"),
            "sub_type_field": obj.get("subTypeField"),
            "tenant_id": obj.get("tenantId"),
            "user_reference_id_field": obj.get("userReferenceIdField"),
            "version": obj.get("version")
        })
        return _obj


