# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr

class GetPublicEmailTemplateResponse(BaseModel):
    """
    GetPublicEmailTemplateResponse
    """
    active: Optional[StrictBool] = Field(None, description="The status of the email template.")
    bcc_email_address: Optional[StrictStr] = Field(None, alias="bccEmailAddress", description="Email BCC address.")
    cc_email_address: Optional[StrictStr] = Field(None, alias="ccEmailAddress", description="Email CC address.")
    cc_email_type: Optional[StrictStr] = Field(None, alias="ccEmailType")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="The ID of the user who created the email template.")
    created_on: Optional[datetime] = Field(None, alias="createdOn", description="The time when the email template was created. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00")
    description: Optional[constr(strict=True, max_length=255)] = Field(None, description="The description of the email template.")
    email_body: Optional[StrictStr] = Field(None, alias="emailBody", description="The email body. You can add merge fields in the email object using angle brackets.  User can also embed html tags if `isHtml` is `true`.")
    email_subject: Optional[StrictStr] = Field(None, alias="emailSubject", description="The email subject. You can add merge fields in the email subject using angle brackets.")
    encoding_type: Optional[StrictStr] = Field(None, alias="encodingType")
    event_category: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="eventCategory", description="The event category code for a standard event. See [Standard Event Categories](https://knowledgecenter.zuora.com/Central_Platform/Notifications/A_Standard_Events/Standard_Event_Category_Code_for_Notification_Histories_API) for all event category codes.")
    event_type_name: Optional[constr(strict=True, min_length=1)] = Field(None, alias="eventTypeName", description="The name of the custom event or custom scheduled event.")
    event_type_namespace: Optional[StrictStr] = Field(None, alias="eventTypeNamespace", description="The namespace of the `eventTypeName` field for custom events and custom scheduled events.  ")
    from_email_address: Optional[StrictStr] = Field(None, alias="fromEmailAddress", description="If formEmailType is SpecificEmail, this field is required.")
    from_email_type: Optional[StrictStr] = Field(None, alias="fromEmailType")
    from_name: Optional[constr(strict=True, max_length=50)] = Field(None, alias="fromName", description="The name of email sender.")
    id: Optional[StrictStr] = Field(None, description="The email template ID.")
    is_html: Optional[StrictBool] = Field(None, alias="isHtml", description="Indicates whether the style of email body is HTML.")
    name: Optional[constr(strict=True, max_length=255)] = Field(None, description="The name of the email template.")
    reply_to_email_address: Optional[StrictStr] = Field(None, alias="replyToEmailAddress", description="If replyToEmailType is SpecificEmail, this field is required")
    reply_to_email_type: Optional[StrictStr] = Field(None, alias="replyToEmailType")
    to_email_address: Optional[StrictStr] = Field(None, alias="toEmailAddress", description="If `toEmailType` is `SpecificEmail`, this field is required.")
    to_email_type: Optional[StrictStr] = Field(None, alias="toEmailType")
    updated_by: Optional[StrictStr] = Field(None, alias="updatedBy", description="The ID of the user who updated the email template.")
    updated_on: Optional[datetime] = Field(None, alias="updatedOn", description="The time when the email template was updated. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00")
    __properties = ["active", "bccEmailAddress", "ccEmailAddress", "ccEmailType", "createdBy", "createdOn", "description", "emailBody", "emailSubject", "encodingType", "eventCategory", "eventTypeName", "eventTypeNamespace", "fromEmailAddress", "fromEmailType", "fromName", "id", "isHtml", "name", "replyToEmailAddress", "replyToEmailType", "toEmailAddress", "toEmailType", "updatedBy", "updatedOn"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetPublicEmailTemplateResponse:
        """Create an instance of GetPublicEmailTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPublicEmailTemplateResponse:
        """Create an instance of GetPublicEmailTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetPublicEmailTemplateResponse.parse_obj(obj)

        _obj = GetPublicEmailTemplateResponse.parse_obj({
            "active": obj.get("active"),
            "bcc_email_address": obj.get("bccEmailAddress"),
            "cc_email_address": obj.get("ccEmailAddress"),
            "cc_email_type": obj.get("ccEmailType"),
            "created_by": obj.get("createdBy"),
            "created_on": obj.get("createdOn"),
            "description": obj.get("description"),
            "email_body": obj.get("emailBody"),
            "email_subject": obj.get("emailSubject"),
            "encoding_type": obj.get("encodingType"),
            "event_category": obj.get("eventCategory"),
            "event_type_name": obj.get("eventTypeName"),
            "event_type_namespace": obj.get("eventTypeNamespace"),
            "from_email_address": obj.get("fromEmailAddress"),
            "from_email_type": obj.get("fromEmailType"),
            "from_name": obj.get("fromName"),
            "id": obj.get("id"),
            "is_html": obj.get("isHtml"),
            "name": obj.get("name"),
            "reply_to_email_address": obj.get("replyToEmailAddress"),
            "reply_to_email_type": obj.get("replyToEmailType"),
            "to_email_address": obj.get("toEmailAddress"),
            "to_email_type": obj.get("toEmailType"),
            "updated_by": obj.get("updatedBy"),
            "updated_on": obj.get("updatedOn")
        })
        return _obj


