# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr

class AccountCreditCardHolder(BaseModel):
    """
    Information about the cardholder of a credit card payment method associated with an account. If you do not provide information about the cardholder, Zuora uses the account's bill-to contact.   # noqa: E501
    """
    address_line1: Optional[constr(strict=True, max_length=255)] = Field(None, alias="addressLine1", description="First line of the cardholder's address. ")
    address_line2: Optional[constr(strict=True, max_length=255)] = Field(None, alias="addressLine2", description="Second line of the cardholder's address. ")
    card_holder_name: Optional[constr(strict=True, max_length=50)] = Field(None, alias="cardHolderName", description="Full name of the cardholder as it appears on the card. For example, \"John J Smith\". ")
    city: Optional[constr(strict=True, max_length=40)] = Field(None, description="City of the cardholder's address.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    country: Optional[constr(strict=True, max_length=64)] = Field(None, description="Country of the cardholder's address. The value of this field must be a valid country name or abbreviation.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    email: Optional[constr(strict=True, max_length=80)] = Field(None, description="Email address of the cardholder. ")
    phone: Optional[constr(strict=True, max_length=40)] = Field(None, description="Phone number of the cardholder. ")
    state: Optional[constr(strict=True, max_length=50)] = Field(None, description="State or province of the cardholder's address. ")
    zip_code: Optional[constr(strict=True, max_length=20)] = Field(None, alias="zipCode", description="ZIP code or other postal code of the cardholder's address. ")
    __properties = ["addressLine1", "addressLine2", "cardHolderName", "city", "country", "email", "phone", "state", "zipCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountCreditCardHolder:
        """Create an instance of AccountCreditCardHolder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountCreditCardHolder:
        """Create an instance of AccountCreditCardHolder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountCreditCardHolder.parse_obj(obj)

        _obj = AccountCreditCardHolder.parse_obj({
            "address_line1": obj.get("addressLine1"),
            "address_line2": obj.get("addressLine2"),
            "card_holder_name": obj.get("cardHolderName"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "zip_code": obj.get("zipCode")
        })
        return _obj


