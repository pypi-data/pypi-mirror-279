# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from com.zuora.models.custom_object_bulk_job_response_error import CustomObjectBulkJobResponseError

class CustomObjectBulkJobResponse(BaseModel):
    """
    CustomObjectBulkJobResponse
    """
    created_by_id: Optional[StrictStr] = Field(None, alias="CreatedById", description="The ID of the user who creates the job.")
    created_date: Optional[datetime] = Field(None, alias="CreatedDate", description="The time when the bulk job is created.")
    id: Optional[StrictStr] = Field(None, alias="Id", description="The custom object bulk job ID.")
    updated_by_id: Optional[StrictStr] = Field(None, alias="UpdatedById", description="The ID of the user who updates the job.")
    updated_date: Optional[datetime] = Field(None, alias="UpdatedDate", description="The time when the bulk job is updated.")
    error: Optional[CustomObjectBulkJobResponseError] = None
    namespace: Optional[StrictStr] = None
    object: Optional[StrictStr] = Field(None, description="The object to that the bulk operation performs on.")
    operation: Optional[StrictStr] = None
    processing_time: Optional[StrictInt] = Field(None, alias="processingTime", description="The amount of time elapsed, in milliseconds, from the submission to the completion of the bulk job.")
    records_processed: Optional[StrictInt] = Field(None, alias="recordsProcessed", description="The number of object records processed by the bulk job.")
    status: Optional[StrictStr] = None
    __properties = ["CreatedById", "CreatedDate", "Id", "UpdatedById", "UpdatedDate", "error", "namespace", "object", "operation", "processingTime", "recordsProcessed", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomObjectBulkJobResponse:
        """Create an instance of CustomObjectBulkJobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomObjectBulkJobResponse:
        """Create an instance of CustomObjectBulkJobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomObjectBulkJobResponse.parse_obj(obj)

        _obj = CustomObjectBulkJobResponse.parse_obj({
            "created_by_id": obj.get("CreatedById"),
            "created_date": obj.get("CreatedDate"),
            "id": obj.get("Id"),
            "updated_by_id": obj.get("UpdatedById"),
            "updated_date": obj.get("UpdatedDate"),
            "error": CustomObjectBulkJobResponseError.from_dict(obj.get("error")) if obj.get("error") is not None else None,
            "namespace": obj.get("namespace"),
            "object": obj.get("object"),
            "operation": obj.get("operation"),
            "processing_time": obj.get("processingTime"),
            "records_processed": obj.get("recordsProcessed"),
            "status": obj.get("status")
        })
        return _obj


