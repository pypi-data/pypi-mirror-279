# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, confloat, conint
from com.zuora.models.charge_list_price_base import ChargeListPriceBase
from com.zuora.models.price_change_option import PriceChangeOption

class RecurringFlatFeePricingOverride(BaseModel):
    """
    Pricing information about a recurring charge that uses the \"flat fee\" charge model. In this charge model, the charge has a fixed price.   # noqa: E501
    """
    price_change_option: Optional[StrictStr] = Field(None, alias="priceChangeOption")
    price_increase_percentage: Optional[Union[confloat(ge=-100, strict=True), conint(ge=-100, strict=True)]] = Field(None, alias="priceIncreasePercentage", description="Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`. ")
    list_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="listPrice", description="Price of the charge in each recurring period. ")
    original_list_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="originalListPrice", description="The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ")
    list_price_base: Optional[StrictStr] = Field(None, alias="listPriceBase")
    specific_list_price_base: Optional[conint(strict=True, le=200, ge=1)] = Field(None, alias="specificListPriceBase", description="The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.  **Note**:    - This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price\" target=\"_blank\">Annual List Price</a> feature enabled.   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.               ")
    __properties = ["priceChangeOption", "priceIncreasePercentage", "listPrice", "originalListPrice", "listPriceBase", "specificListPriceBase"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecurringFlatFeePricingOverride:
        """Create an instance of RecurringFlatFeePricingOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecurringFlatFeePricingOverride:
        """Create an instance of RecurringFlatFeePricingOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecurringFlatFeePricingOverride.parse_obj(obj)

        _obj = RecurringFlatFeePricingOverride.parse_obj({
            "price_change_option": obj.get("priceChangeOption"),
            "price_increase_percentage": obj.get("priceIncreasePercentage"),
            "list_price": obj.get("listPrice"),
            "original_list_price": obj.get("originalListPrice"),
            "list_price_base": obj.get("listPriceBase"),
            "specific_list_price_base": obj.get("specificListPriceBase")
        })
        return _obj


