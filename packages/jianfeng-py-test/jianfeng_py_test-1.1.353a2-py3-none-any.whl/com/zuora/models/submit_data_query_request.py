# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr, conbytes, constr, validator
from com.zuora.models.submit_data_query_request_output import SubmitDataQueryRequestOutput

class SubmitDataQueryRequest(BaseModel):
    """
    SubmitDataQueryRequest
    """
    column_separator: Optional[StrictStr] = Field(None, alias="columnSeparator", description="The column separator. Only applicable if the `outputFormat` is `DSV`. ")
    compression: StrictStr = Field(...)
    encryption_key: Optional[Union[conbytes(strict=True), constr(strict=True)]] = Field(None, alias="encryptionKey", description="Base-64 encoded public key of an RSA key-pair.   Note that Data Query only supports 1024-bit RSA keys.  If you set this field, Zuora encrypts the query results using the provided public key. You must use the corresponding private key to decrypt the query results. ")
    output: SubmitDataQueryRequestOutput = Field(...)
    output_format: StrictStr = Field(..., alias="outputFormat")
    query: StrictStr = Field(..., description="The query to perform. See [SQL Queries in Data Query](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query/BA_SQL_Queries_in_Data_Query) for more information. ")
    read_deleted: Optional[StrictBool] = Field(False, alias="readDeleted", description="Indicates whether the query will retrieve only the deleted record. If `readDeleted` is set to `false` or it is not included in the request body, the query will retrieve only the non-deleted records. If it is set to `true`, only the deleted records will be retrieved.  If you select the `deleted` column in the `query` field, both non-deleted and deleted records will be retrieved regardless of the value in the `readDeleted` field.  Note that Data Query is subject to Zuora Data Retention Policy. The retention period of deleted data is 30 days. You can only retrieve deleted data for 30 days through Data Query. ")
    source_data: Optional[StrictStr] = Field(None, alias="sourceData")
    use_index_join: Optional[StrictBool] = Field(None, alias="useIndexJoin", description="Indicates whether to use Index Join. Index join is useful when you have a specific reference value in your WHERE clause to index another large table by. See [Use Index Join](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query/Best_practices_of_Data_Query#Use_Index_Join) for more information.")
    __properties = ["columnSeparator", "compression", "encryptionKey", "output", "outputFormat", "query", "readDeleted", "sourceData", "useIndexJoin"]

    @validator('encryption_key')
    def encryption_key_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubmitDataQueryRequest:
        """Create an instance of SubmitDataQueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubmitDataQueryRequest:
        """Create an instance of SubmitDataQueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubmitDataQueryRequest.parse_obj(obj)

        _obj = SubmitDataQueryRequest.parse_obj({
            "column_separator": obj.get("columnSeparator"),
            "compression": obj.get("compression"),
            "encryption_key": obj.get("encryptionKey"),
            "output": SubmitDataQueryRequestOutput.from_dict(obj.get("output")) if obj.get("output") is not None else None,
            "output_format": obj.get("outputFormat"),
            "query": obj.get("query"),
            "read_deleted": obj.get("readDeleted") if obj.get("readDeleted") is not None else False,
            "source_data": obj.get("sourceData"),
            "use_index_join": obj.get("useIndexJoin")
        })
        return _obj


