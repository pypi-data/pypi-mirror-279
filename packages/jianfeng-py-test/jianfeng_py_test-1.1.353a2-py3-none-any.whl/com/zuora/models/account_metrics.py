# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class AccountMetrics(BaseModel):
    """
    Container for account metrics.   # noqa: E501
    """
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The customer's total invoice balance minus credit balance. ")
    currency: Optional[StrictStr] = Field(None, description="The currency that metrics are aggregated based on. ")
    contracted_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="contractedMrr", description="Future expected MRR that accounts for future upgrades, downgrades, upsells and cancellations. ")
    credit_balance: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="creditBalance", description="Current credit balance.")
    reserved_payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="reservedPaymentAmount", description="The Reserved Payment Amount of the customer account. ")
    total_debit_memo_balance: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalDebitMemoBalance", description="Total balance of all posted debit memos. ")
    total_invoice_balance: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalInvoiceBalance", description="Total balance of all posted invoices. ")
    unapplied_credit_memo_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unappliedCreditMemoAmount")
    unapplied_payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unappliedPaymentAmount", description="Total unapplied amount of all posted payments. ")
    __properties = ["balance", "currency", "contractedMrr", "creditBalance", "reservedPaymentAmount", "totalDebitMemoBalance", "totalInvoiceBalance", "unappliedCreditMemoAmount", "unappliedPaymentAmount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountMetrics:
        """Create an instance of AccountMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountMetrics:
        """Create an instance of AccountMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountMetrics.parse_obj(obj)

        _obj = AccountMetrics.parse_obj({
            "balance": obj.get("balance"),
            "currency": obj.get("currency"),
            "contracted_mrr": obj.get("contractedMrr"),
            "credit_balance": obj.get("creditBalance"),
            "reserved_payment_amount": obj.get("reservedPaymentAmount"),
            "total_debit_memo_balance": obj.get("totalDebitMemoBalance"),
            "total_invoice_balance": obj.get("totalInvoiceBalance"),
            "unapplied_credit_memo_amount": obj.get("unappliedCreditMemoAmount"),
            "unapplied_payment_amount": obj.get("unappliedPaymentAmount")
        })
        return _obj


