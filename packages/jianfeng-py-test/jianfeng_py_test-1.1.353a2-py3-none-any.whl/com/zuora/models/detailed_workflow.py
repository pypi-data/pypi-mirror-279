# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class DetailedWorkflow(BaseModel):
    """
    A workflow.   # noqa: E501
    """
    call_type: Optional[StrictStr] = Field(None, description="The call type of the active workflow version. ")
    callout_trigger: Optional[StrictBool] = Field(None, alias="calloutTrigger", description="Indicates whether the callout trigger is enabled for the retrieved workflow. ")
    created_at: Optional[StrictStr] = Field(None, alias="createdAt", description="The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format. ")
    description: Optional[StrictStr] = Field(None, description="The description of the workflow. ")
    finished_at: Optional[StrictStr] = Field(None, description="The date and time when the instance of the workflow version finished at. ")
    id: Optional[StrictInt] = Field(None, description="The unique ID of the workflow. ")
    interval: Optional[StrictStr] = Field(None, description="The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled. ")
    name: Optional[StrictStr] = Field(None, description="The name of the workflow. ")
    ondemand_trigger: Optional[StrictBool] = Field(None, alias="ondemandTrigger", description="Indicates whether the ondemand trigger is enabled for the workflow. ")
    original_workflow_id: Optional[StrictInt] = Field(None, description="The unique ID of the original workflow version. ")
    priority: Optional[StrictStr] = Field(None, description="The priority of the active workflow version.  ")
    scheduled_trigger: Optional[StrictBool] = Field(None, alias="scheduledTrigger", description="Indicates whether the scheduled trigger is enabled for the workflow. ")
    started_at: Optional[StrictStr] = Field(None, description="The date and time when the instance of the workflow version started at. ")
    status: Optional[StrictInt] = Field(None, description="The status of the active workflow version. ")
    sync_trigger: Optional[StrictBool] = Field(None, description="Indicates whether the workflow version is enabled for the sync mode. ")
    timezone: Optional[StrictStr] = Field(None, description="The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled. ")
    type: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = Field(None, alias="updatedAt", description="The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format. ")
    version: Optional[StrictStr] = Field(None, description="The version number of the active workflow version.             ")
    __properties = ["call_type", "calloutTrigger", "createdAt", "description", "finished_at", "id", "interval", "name", "ondemandTrigger", "original_workflow_id", "priority", "scheduledTrigger", "started_at", "status", "sync_trigger", "timezone", "type", "updatedAt", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DetailedWorkflow:
        """Create an instance of DetailedWorkflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DetailedWorkflow:
        """Create an instance of DetailedWorkflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DetailedWorkflow.parse_obj(obj)

        _obj = DetailedWorkflow.parse_obj({
            "call_type": obj.get("call_type"),
            "callout_trigger": obj.get("calloutTrigger"),
            "created_at": obj.get("createdAt"),
            "description": obj.get("description"),
            "finished_at": obj.get("finished_at"),
            "id": obj.get("id"),
            "interval": obj.get("interval"),
            "name": obj.get("name"),
            "ondemand_trigger": obj.get("ondemandTrigger"),
            "original_workflow_id": obj.get("original_workflow_id"),
            "priority": obj.get("priority"),
            "scheduled_trigger": obj.get("scheduledTrigger"),
            "started_at": obj.get("started_at"),
            "status": obj.get("status"),
            "sync_trigger": obj.get("sync_trigger"),
            "timezone": obj.get("timezone"),
            "type": obj.get("type"),
            "updated_at": obj.get("updatedAt"),
            "version": obj.get("version")
        })
        return _obj


