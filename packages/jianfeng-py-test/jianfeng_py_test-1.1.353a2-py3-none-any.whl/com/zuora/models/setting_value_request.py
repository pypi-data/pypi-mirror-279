# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.children_setting_value_request import ChildrenSettingValueRequest

class SettingValueRequest(BaseModel):
    """
    SettingValueRequest
    """
    body: Optional[Dict[str, Any]] = Field(None, description="Request payload if any")
    children: Optional[conlist(ChildrenSettingValueRequest)] = Field(None, description="An array of requests that can only be executed after its parent request has been executed successfully. ")
    id: Optional[StrictStr] = Field(None, description="The id of the request. You can set it to any string. It must be unique within the whole batch. ")
    method: Optional[StrictStr] = None
    url: Optional[StrictStr] = Field(None, description="The relative URL of the setting. It is the same as in the `pathPattern` field in the response body of [Listing all Settings](https://www.zuora.com/developer/api-references/api/operation/Get_ListAllSettings). For example, `/billing-rules`. ")
    __properties = ["body", "children", "id", "method", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SettingValueRequest:
        """Create an instance of SettingValueRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SettingValueRequest:
        """Create an instance of SettingValueRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SettingValueRequest.parse_obj(obj)

        _obj = SettingValueRequest.parse_obj({
            "body": obj.get("body"),
            "children": [ChildrenSettingValueRequest.from_dict(_item) for _item in obj.get("children")] if obj.get("children") is not None else None,
            "id": obj.get("id"),
            "method": obj.get("method"),
            "url": obj.get("url")
        })
        return _obj


