# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class BillingOptions(BaseModel):
    """
    BillingOptions
    """
    credit_memo_reason_code: Optional[StrictStr] = Field(None, alias="creditMemoReasonCode", description="A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.")
    document_date: Optional[date] = Field(None, alias="documentDate", description="The invoice date displayed on the invoice. ")
    generate_draft_invoice: Optional[StrictBool] = Field(None, alias="generateDraftInvoice", description="Indicates if the current request needs to generate a draft invoice.  Values are:  * `true` * `false` (default) ")
    target_date: Optional[date] = Field(None, alias="targetDate", description="Date through which to calculate charges if an invoice is generated. See [What is a Target Date?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs#What_is_a_Target_Date.3F). ")
    __properties = ["creditMemoReasonCode", "documentDate", "generateDraftInvoice", "targetDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BillingOptions:
        """Create an instance of BillingOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BillingOptions:
        """Create an instance of BillingOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BillingOptions.parse_obj(obj)

        _obj = BillingOptions.parse_obj({
            "credit_memo_reason_code": obj.get("creditMemoReasonCode"),
            "document_date": obj.get("documentDate"),
            "generate_draft_invoice": obj.get("generateDraftInvoice"),
            "target_date": obj.get("targetDate")
        })
        return _obj


