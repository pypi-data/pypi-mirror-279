# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from com.zuora.models.update_custom_object_cusotm_field import UpdateCustomObjectCusotmField

class CustomObjectDefinitionUpdateActionResponse(BaseModel):
    """
    CustomObjectDefinitionUpdateActionResponse
    """
    description: Optional[StrictStr] = Field(None, description="Optional property for `updateObject` action")
    enable_create_record_auditing: Optional[StrictBool] = Field(None, alias="enableCreateRecordAuditing", description="Indicates whether to audit the creation of custom object records of this custom object definition.")
    enable_delete_record_auditing: Optional[StrictBool] = Field(None, alias="enableDeleteRecordAuditing", description="Indicates whether to audit the deletion of custom object records of this custom object definition.")
    field: Optional[UpdateCustomObjectCusotmField] = None
    label: Optional[StrictStr] = Field(None, description="Optional property for `updateObject` action")
    namespace: Optional[StrictStr] = Field(None, description="The namespace of the custom object definition to be updated")
    object: Optional[StrictStr] = Field(None, description="The API name of the custom object definition to be updated")
    relationship: Optional[Dict[str, Any]] = None
    type: Optional[StrictStr] = None
    __properties = ["description", "enableCreateRecordAuditing", "enableDeleteRecordAuditing", "field", "label", "namespace", "object", "relationship", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomObjectDefinitionUpdateActionResponse:
        """Create an instance of CustomObjectDefinitionUpdateActionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of field
        if self.field:
            _dict['field'] = self.field.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomObjectDefinitionUpdateActionResponse:
        """Create an instance of CustomObjectDefinitionUpdateActionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomObjectDefinitionUpdateActionResponse.parse_obj(obj)

        _obj = CustomObjectDefinitionUpdateActionResponse.parse_obj({
            "description": obj.get("description"),
            "enable_create_record_auditing": obj.get("enableCreateRecordAuditing"),
            "enable_delete_record_auditing": obj.get("enableDeleteRecordAuditing"),
            "field": UpdateCustomObjectCusotmField.from_dict(obj.get("field")) if obj.get("field") is not None else None,
            "label": obj.get("label"),
            "namespace": obj.get("namespace"),
            "object": obj.get("object"),
            "relationship": obj.get("relationship"),
            "type": obj.get("type")
        })
        return _obj


