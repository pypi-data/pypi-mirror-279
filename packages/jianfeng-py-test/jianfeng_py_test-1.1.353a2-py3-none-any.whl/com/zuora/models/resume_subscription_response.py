# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from com.zuora.models.create_order_response_subscriptions import CreateOrderResponseSubscriptions

class ResumeSubscriptionResponse(BaseModel):
    """
    ResumeSubscriptionResponse
    """
    credit_memo_id: Optional[StrictStr] = Field(None, alias="creditMemoId", description="The credit memo ID, if a credit memo is generated during the subscription process.  **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. ")
    invoice_id: Optional[StrictStr] = Field(None, alias="invoiceId", description="Invoice ID, if an invoice is generated during the subscription process. ")
    paid_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="paidAmount", description="Payment amount, if a payment is collected. ")
    payment_id: Optional[StrictStr] = Field(None, alias="paymentId", description="Payment ID, if a payment is collected. ")
    resume_date: Optional[date] = Field(None, alias="resumeDate", description="The date when subscription resumption takes effect, as yyyy-mm-dd. It is available for Orders Harmonization and Subscribe/Amend tenants. ")
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId", description="The subscription ID. It is available for Orders Harmonization and Subscribe/Amend tenants. ")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully. ")
    term_end_date: Optional[date] = Field(None, alias="termEndDate", description="The date when the new subscription term ends, as yyyy-mm-dd. It is available for Orders Harmonization and Subscribe/Amend tenants. ")
    total_delta_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalDeltaTcv", description="Change in the total contracted value of the subscription as a result of the update. It is available for Orders Harmonization and Subscribe/Amend tenants. ")
    order_number: Optional[StrictStr] = Field(None, alias="orderNumber", description="The order number. It is available for Orders Tenants. ")
    status: Optional[StrictStr] = None
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The account number that this order has been created under. This is also the invoice owner of the subscriptions included in this order. It is available for Orders Tenants.")
    subscription_numbers: Optional[conlist(StrictStr)] = Field(None, alias="subscriptionNumbers", description="The subscription numbers. It is available for Orders Tenants. This field is in Zuora REST API version control. Supported max version is 206.0. ")
    subscriptions: Optional[conlist(CreateOrderResponseSubscriptions)] = Field(None, description="This field is in Zuora REST API version control. Supported minor versions are 223.0 or later. It is available for Orders Tenants. ")
    __properties = ["creditMemoId", "invoiceId", "paidAmount", "paymentId", "resumeDate", "subscriptionId", "success", "termEndDate", "totalDeltaTcv", "orderNumber", "status", "accountNumber", "subscriptionNumbers", "subscriptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResumeSubscriptionResponse:
        """Create an instance of ResumeSubscriptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResumeSubscriptionResponse:
        """Create an instance of ResumeSubscriptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ResumeSubscriptionResponse.parse_obj(obj)

        _obj = ResumeSubscriptionResponse.parse_obj({
            "credit_memo_id": obj.get("creditMemoId"),
            "invoice_id": obj.get("invoiceId"),
            "paid_amount": obj.get("paidAmount"),
            "payment_id": obj.get("paymentId"),
            "resume_date": obj.get("resumeDate"),
            "subscription_id": obj.get("subscriptionId"),
            "success": obj.get("success"),
            "term_end_date": obj.get("termEndDate"),
            "total_delta_tcv": obj.get("totalDeltaTcv"),
            "order_number": obj.get("orderNumber"),
            "status": obj.get("status"),
            "account_number": obj.get("accountNumber"),
            "subscription_numbers": obj.get("subscriptionNumbers"),
            "subscriptions": [CreateOrderResponseSubscriptions.from_dict(_item) for _item in obj.get("subscriptions")] if obj.get("subscriptions") is not None else None
        })
        return _obj


