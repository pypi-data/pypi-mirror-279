# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint

class LastTerm(BaseModel):
    """
    The length of the period for the current subscription term.  # noqa: E501
    """
    period: Optional[conint(strict=True, ge=0)] = Field(None, description="Specify only when the termType is 'TERMED'.")
    period_type: Optional[StrictStr] = Field(None, alias="periodType")
    start_date: Optional[date] = Field(None, alias="startDate", description="The start date of the current term. You can change the term start date of a renewed subscription through a T&Cs order action. However, when changing it to an earlier date, this date must not be earlier than the term start date of the current term before this T&Cs. ")
    end_date: Optional[date] = Field(None, alias="endDate", description="End date of the current term, in YYYY-MM-DD format. ")
    term_type: StrictStr = Field(..., alias="termType")
    __properties = ["period", "periodType", "startDate", "endDate", "termType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LastTerm:
        """Create an instance of LastTerm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LastTerm:
        """Create an instance of LastTerm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LastTerm.parse_obj(obj)

        _obj = LastTerm.parse_obj({
            "period": obj.get("period"),
            "period_type": obj.get("periodType"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "term_type": obj.get("termType")
        })
        return _obj


