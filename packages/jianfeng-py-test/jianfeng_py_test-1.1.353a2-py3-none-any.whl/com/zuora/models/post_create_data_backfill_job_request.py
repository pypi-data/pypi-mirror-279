# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBytes, StrictStr, constr
from com.zuora.models.job import Job

class POSTCreateDataBackfillJobRequest(BaseModel):
    """
    POSTCreateDataBackfillJobRequest
    """
    type: Job = Field(...)
    file: Union[StrictBytes, StrictStr] = Field(..., description="File containing data about the data you want to backfill.  The file must be a `.csv` file or a zipped `.csv` file. The maximum file size is 4 MB. The data in the file must be formatted according to the Data Backfill type you want to perform.")
    checksum: Optional[constr(strict=True, max_length=32, min_length=32)] = Field(None, description="An MD5 checksum that is used to validate the integrity of the uploaded file.")
    __properties = ["type", "file", "checksum"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> POSTCreateDataBackfillJobRequest:
        """Create an instance of POSTCreateDataBackfillJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> POSTCreateDataBackfillJobRequest:
        """Create an instance of POSTCreateDataBackfillJobRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return POSTCreateDataBackfillJobRequest.parse_obj(obj)

        _obj = POSTCreateDataBackfillJobRequest.parse_obj({
            "type": Job.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "file": obj.get("file"),
            "checksum": obj.get("checksum")
        })
        return _obj


