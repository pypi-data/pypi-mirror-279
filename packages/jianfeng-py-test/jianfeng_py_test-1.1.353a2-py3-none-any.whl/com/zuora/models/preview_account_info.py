# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, conint, constr
from com.zuora.models.preview_contact_info import PreviewContactInfo
from com.zuora.models.tax_info import TaxInfo

class PreviewAccountInfo(BaseModel):
    """
    Information about the account that will own the order.   # noqa: E501
    """
    bill_cycle_day: conint(strict=True, le=31, ge=0) = Field(..., alias="billCycleDay", description="Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".")
    currency: constr(strict=True, max_length=3) = Field(..., description="ISO 3-letter currency code (uppercase). For example, USD. ")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of an Account object. ")
    sold_to_contact: Optional[PreviewContactInfo] = Field(None, alias="soldToContact")
    tax_info: Optional[TaxInfo] = Field(None, alias="taxInfo")
    __properties = ["billCycleDay", "currency", "customFields", "soldToContact", "taxInfo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewAccountInfo:
        """Create an instance of PreviewAccountInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact
        if self.sold_to_contact:
            _dict['soldToContact'] = self.sold_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_info
        if self.tax_info:
            _dict['taxInfo'] = self.tax_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewAccountInfo:
        """Create an instance of PreviewAccountInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewAccountInfo.parse_obj(obj)

        _obj = PreviewAccountInfo.parse_obj({
            "bill_cycle_day": obj.get("billCycleDay"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("customFields"),
            "sold_to_contact": PreviewContactInfo.from_dict(obj.get("soldToContact")) if obj.get("soldToContact") is not None else None,
            "tax_info": TaxInfo.from_dict(obj.get("taxInfo")) if obj.get("taxInfo") is not None else None
        })
        return _obj


