# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from com.zuora.models.custom_object_all_fields_definition_all_of_created_by_id import CustomObjectAllFieldsDefinitionAllOfCreatedById
from com.zuora.models.custom_object_all_fields_definition_all_of_created_date import CustomObjectAllFieldsDefinitionAllOfCreatedDate
from com.zuora.models.custom_object_all_fields_definition_all_of_id import CustomObjectAllFieldsDefinitionAllOfId
from com.zuora.models.custom_object_all_fields_definition_all_of_updated_by_id import CustomObjectAllFieldsDefinitionAllOfUpdatedById
from com.zuora.models.custom_object_all_fields_definition_all_of_updated_date import CustomObjectAllFieldsDefinitionAllOfUpdatedDate

class CustomObjectAllFieldsDefinition(BaseModel):
    """
    The definitions of all the fields in the custom object definition  # noqa: E501
    """
    created_by_id: Optional[CustomObjectAllFieldsDefinitionAllOfCreatedById] = Field(None, alias="CreatedById")
    created_date: Optional[CustomObjectAllFieldsDefinitionAllOfCreatedDate] = Field(None, alias="CreatedDate")
    id: Optional[CustomObjectAllFieldsDefinitionAllOfId] = Field(None, alias="Id")
    updated_by_id: Optional[CustomObjectAllFieldsDefinitionAllOfUpdatedById] = Field(None, alias="UpdatedById")
    updated_date: Optional[CustomObjectAllFieldsDefinitionAllOfUpdatedDate] = Field(None, alias="UpdatedDate")
    __properties = ["CreatedById", "CreatedDate", "Id", "UpdatedById", "UpdatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomObjectAllFieldsDefinition:
        """Create an instance of CustomObjectAllFieldsDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_by_id
        if self.created_by_id:
            _dict['CreatedById'] = self.created_by_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_date
        if self.created_date:
            _dict['CreatedDate'] = self.created_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['Id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by_id
        if self.updated_by_id:
            _dict['UpdatedById'] = self.updated_by_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_date
        if self.updated_date:
            _dict['UpdatedDate'] = self.updated_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomObjectAllFieldsDefinition:
        """Create an instance of CustomObjectAllFieldsDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomObjectAllFieldsDefinition.parse_obj(obj)

        _obj = CustomObjectAllFieldsDefinition.parse_obj({
            "created_by_id": CustomObjectAllFieldsDefinitionAllOfCreatedById.from_dict(obj.get("CreatedById")) if obj.get("CreatedById") is not None else None,
            "created_date": CustomObjectAllFieldsDefinitionAllOfCreatedDate.from_dict(obj.get("CreatedDate")) if obj.get("CreatedDate") is not None else None,
            "id": CustomObjectAllFieldsDefinitionAllOfId.from_dict(obj.get("Id")) if obj.get("Id") is not None else None,
            "updated_by_id": CustomObjectAllFieldsDefinitionAllOfUpdatedById.from_dict(obj.get("UpdatedById")) if obj.get("UpdatedById") is not None else None,
            "updated_date": CustomObjectAllFieldsDefinitionAllOfUpdatedDate.from_dict(obj.get("UpdatedDate")) if obj.get("UpdatedDate") is not None else None
        })
        return _obj


