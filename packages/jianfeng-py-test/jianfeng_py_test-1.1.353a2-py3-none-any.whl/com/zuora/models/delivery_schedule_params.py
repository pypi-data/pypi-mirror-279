# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class DeliveryScheduleParams(BaseModel):
    """
    DeliveryScheduleParams
    """
    frequency: Optional[StrictStr] = None
    friday: Optional[StrictBool] = Field(None, description="Indicates whether delivery on friday. ")
    monday: Optional[StrictBool] = Field(None, description="Indicates whether delivery on monday. ")
    saturday: Optional[StrictBool] = Field(None, description="Indicates whether delivery on saturday. ")
    sunday: Optional[StrictBool] = Field(None, description="Indicates whether delivery on sunday. ")
    thursday: Optional[StrictBool] = Field(None, description="Indicates whether delivery on thursday. ")
    tuesday: Optional[StrictBool] = Field(None, description="Indicates whether delivery on tuesday. ")
    wednesday: Optional[StrictBool] = Field(None, description="Indicates whether delivery on wednesday. ")
    __properties = ["frequency", "friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeliveryScheduleParams:
        """Create an instance of DeliveryScheduleParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeliveryScheduleParams:
        """Create an instance of DeliveryScheduleParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeliveryScheduleParams.parse_obj(obj)

        _obj = DeliveryScheduleParams.parse_obj({
            "frequency": obj.get("frequency"),
            "friday": obj.get("friday"),
            "monday": obj.get("monday"),
            "saturday": obj.get("saturday"),
            "sunday": obj.get("sunday"),
            "thursday": obj.get("thursday"),
            "tuesday": obj.get("tuesday"),
            "wednesday": obj.get("wednesday")
        })
        return _obj


