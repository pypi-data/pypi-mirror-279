# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from com.zuora.models.order_action import OrderAction
from com.zuora.models.order_subscriptions_subscription_owner_account_details import OrderSubscriptionsSubscriptionOwnerAccountDetails
from com.zuora.models.quote_object_fields import QuoteObjectFields

class OrderSubscriptions(BaseModel):
    """
    OrderSubscriptions
    """
    base_version: Optional[StrictInt] = Field(None, alias="baseVersion", description="The base version of the subscription.")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of a Subscription object. ")
    externally_managed_by: Optional[StrictStr] = Field(None, alias="externallyManagedBy")
    new_version: Optional[StrictInt] = Field(None, alias="newVersion", description="The latest version of the subscription.")
    order_actions: Optional[conlist(OrderAction)] = Field(None, alias="orderActions")
    quote: Optional[QuoteObjectFields] = None
    ramp: Optional[Dict[str, Any]] = Field(None, description="**Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.  The ramp definition. ")
    sequence: Optional[StrictInt] = Field(None, description="The sequence number of a certain subscription processed by the order.")
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber", description="The new subscription number for a new subscription created, or the existing subscription number. Unlike the order request, the subscription number here always has a value.")
    subscription_owner_account_number: Optional[StrictStr] = Field(None, alias="subscriptionOwnerAccountNumber", description="The number of the account that owns the subscription.")
    subscription_owner_account_details: Optional[OrderSubscriptionsSubscriptionOwnerAccountDetails] = Field(None, alias="subscriptionOwnerAccountDetails")
    __properties = ["baseVersion", "customFields", "externallyManagedBy", "newVersion", "orderActions", "quote", "ramp", "sequence", "subscriptionNumber", "subscriptionOwnerAccountNumber", "subscriptionOwnerAccountDetails"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderSubscriptions:
        """Create an instance of OrderSubscriptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in order_actions (list)
        _items = []
        if self.order_actions:
            for _item in self.order_actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of quote
        if self.quote:
            _dict['quote'] = self.quote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_owner_account_details
        if self.subscription_owner_account_details:
            _dict['subscriptionOwnerAccountDetails'] = self.subscription_owner_account_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderSubscriptions:
        """Create an instance of OrderSubscriptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderSubscriptions.parse_obj(obj)

        _obj = OrderSubscriptions.parse_obj({
            "base_version": obj.get("baseVersion"),
            "custom_fields": obj.get("customFields"),
            "externally_managed_by": obj.get("externallyManagedBy"),
            "new_version": obj.get("newVersion"),
            "order_actions": [OrderAction.from_dict(_item) for _item in obj.get("orderActions")] if obj.get("orderActions") is not None else None,
            "quote": QuoteObjectFields.from_dict(obj.get("quote")) if obj.get("quote") is not None else None,
            "ramp": obj.get("ramp"),
            "sequence": obj.get("sequence"),
            "subscription_number": obj.get("subscriptionNumber"),
            "subscription_owner_account_number": obj.get("subscriptionOwnerAccountNumber"),
            "subscription_owner_account_details": OrderSubscriptionsSubscriptionOwnerAccountDetails.from_dict(obj.get("subscriptionOwnerAccountDetails")) if obj.get("subscriptionOwnerAccountDetails") is not None else None
        })
        return _obj


