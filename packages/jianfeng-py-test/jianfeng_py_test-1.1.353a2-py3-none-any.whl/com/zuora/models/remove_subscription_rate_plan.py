# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class RemoveSubscriptionRatePlan(BaseModel):
    """
    RemoveSubscriptionRatePlan
    """
    booking_date: Optional[date] = Field(None, alias="bookingDate", description="The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call.  ")
    contract_effective_date: date = Field(..., alias="contractEffectiveDate", description="Effective date of the new subscription, as yyyy-mm-dd. ")
    customer_acceptance_date: Optional[date] = Field(None, alias="customerAcceptanceDate", description="The date when the customer accepts the contract in yyyy-mm-dd format.  If this field is not set:  * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date. * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate ")
    external_catalog_plan_id: Optional[StrictStr] = Field(None, alias="externalCatalogPlanId", description="An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ")
    external_id_source_system: Optional[StrictStr] = Field(None, alias="externalIdSourceSystem", description="The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ")
    product_rate_plan_number: Optional[StrictStr] = Field(None, alias="productRatePlanNumber", description="Number of a product rate plan for this subscription. ")
    rate_plan_id: Optional[StrictStr] = Field(None, alias="ratePlanId", description="ID of a rate plan for this subscription. This can be the latest version or any history version of ID. ")
    service_activation_date: Optional[date] = Field(None, alias="serviceActivationDate", description="The date when the remove amendment is activated in yyyy-mm-dd format.  You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate ")
    subscription_rate_plan_number: Optional[StrictStr] = Field(None, alias="subscriptionRatePlanNumber", description="Number of a rate plan for this subscription. ")
    __properties = ["bookingDate", "contractEffectiveDate", "customerAcceptanceDate", "externalCatalogPlanId", "externalIdSourceSystem", "productRatePlanNumber", "ratePlanId", "serviceActivationDate", "subscriptionRatePlanNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RemoveSubscriptionRatePlan:
        """Create an instance of RemoveSubscriptionRatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RemoveSubscriptionRatePlan:
        """Create an instance of RemoveSubscriptionRatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RemoveSubscriptionRatePlan.parse_obj(obj)

        _obj = RemoveSubscriptionRatePlan.parse_obj({
            "booking_date": obj.get("bookingDate"),
            "contract_effective_date": obj.get("contractEffectiveDate"),
            "customer_acceptance_date": obj.get("customerAcceptanceDate"),
            "external_catalog_plan_id": obj.get("externalCatalogPlanId"),
            "external_id_source_system": obj.get("externalIdSourceSystem"),
            "product_rate_plan_number": obj.get("productRatePlanNumber"),
            "rate_plan_id": obj.get("ratePlanId"),
            "service_activation_date": obj.get("serviceActivationDate"),
            "subscription_rate_plan_number": obj.get("subscriptionRatePlanNumber")
        })
        return _obj


