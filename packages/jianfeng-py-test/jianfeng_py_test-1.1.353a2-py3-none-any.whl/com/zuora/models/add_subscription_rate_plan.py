# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.add_subscription_component import AddSubscriptionComponent

class AddSubscriptionRatePlan(BaseModel):
    """
    AddSubscriptionRatePlan
    """
    booking_date: Optional[date] = Field(None, alias="bookingDate", description="The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call.             ")
    charge_overrides: Optional[conlist(AddSubscriptionComponent)] = Field(None, alias="chargeOverrides", description="This optional container is used to override the quantity of one or more product rate plan charges for this subscription. ")
    contract_effective_date: date = Field(..., alias="contractEffectiveDate", description="The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.  If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect. ")
    customer_acceptance_date: Optional[date] = Field(None, alias="customerAcceptanceDate", description="The date when the customer accepts the contract in yyyy-mm-dd format.  If this field is not set:  * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date. * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate ")
    external_catalog_plan_id: Optional[StrictStr] = Field(None, alias="externalCatalogPlanId", description="An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.  **Note:** If both `externalCatalogPlanId` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ")
    external_id_source_system: Optional[StrictStr] = Field(None, alias="externalIdSourceSystem", description="The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ")
    externally_managed_plan_id: Optional[StrictStr] = Field(None, alias="externallyManagedPlanId", description="Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores. ")
    product_rate_plan_id: Optional[StrictStr] = Field(None, alias="productRatePlanId", description="ID of a product rate plan for this subscription ")
    product_rate_plan_number: Optional[StrictStr] = Field(None, alias="productRatePlanNumber", description="Number of a product rate plan for this subscription ")
    service_activation_date: Optional[date] = Field(None, alias="serviceActivationDate", description="The date when the new product in the subscription is activated in yyyy-mm-dd format.  You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate ")
    __properties = ["bookingDate", "chargeOverrides", "contractEffectiveDate", "customerAcceptanceDate", "externalCatalogPlanId", "externalIdSourceSystem", "externallyManagedPlanId", "productRatePlanId", "productRatePlanNumber", "serviceActivationDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AddSubscriptionRatePlan:
        """Create an instance of AddSubscriptionRatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in charge_overrides (list)
        _items = []
        if self.charge_overrides:
            for _item in self.charge_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeOverrides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AddSubscriptionRatePlan:
        """Create an instance of AddSubscriptionRatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AddSubscriptionRatePlan.parse_obj(obj)

        _obj = AddSubscriptionRatePlan.parse_obj({
            "booking_date": obj.get("bookingDate"),
            "charge_overrides": [AddSubscriptionComponent.from_dict(_item) for _item in obj.get("chargeOverrides")] if obj.get("chargeOverrides") is not None else None,
            "contract_effective_date": obj.get("contractEffectiveDate"),
            "customer_acceptance_date": obj.get("customerAcceptanceDate"),
            "external_catalog_plan_id": obj.get("externalCatalogPlanId"),
            "external_id_source_system": obj.get("externalIdSourceSystem"),
            "externally_managed_plan_id": obj.get("externallyManagedPlanId"),
            "product_rate_plan_id": obj.get("productRatePlanId"),
            "product_rate_plan_number": obj.get("productRatePlanNumber"),
            "service_activation_date": obj.get("serviceActivationDate")
        })
        return _obj


