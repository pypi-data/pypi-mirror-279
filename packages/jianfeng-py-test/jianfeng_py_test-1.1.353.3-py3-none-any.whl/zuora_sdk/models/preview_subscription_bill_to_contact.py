# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class PreviewSubscriptionBillToContact(BaseModel):
    """
    Container for bill-to contact information of this account.   # noqa: E501
    """
    city: Optional[StrictStr] = Field(None, description="The city of the bill-to address. The value should be 40 characters or less. ")
    country: Optional[StrictStr] = Field(None, description="The country of the bill-to address. The value must be a valid country name or abbreviation.  **Note:** You must specify this field if you are using Zuora Tax for this account. ")
    county: Optional[StrictStr] = Field(None, description="The county of the bill-to address. The value should be 32 characters or less. ")
    state: Optional[StrictStr] = Field(None, description="The state of the bill-to address. The value must be a valid state or province name or 2-character abbreviation.  **Note:** You must specify this field if you are using Zuora Tax for this account and the country is `USA` or `Canada`. ")
    tax_region: Optional[StrictStr] = Field(None, alias="taxRegion", description="If using Zuora Tax, a region string as optionally defined in your tax rules. ")
    zip_code: Optional[StrictStr] = Field(None, alias="zipCode", description="The zip code of the bill-to address. The value should be 20 characters or less. ")
    __properties = ["city", "country", "county", "state", "taxRegion", "zipCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewSubscriptionBillToContact:
        """Create an instance of PreviewSubscriptionBillToContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewSubscriptionBillToContact:
        """Create an instance of PreviewSubscriptionBillToContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewSubscriptionBillToContact.parse_obj(obj)

        _obj = PreviewSubscriptionBillToContact.parse_obj({
            "city": obj.get("city"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "state": obj.get("state"),
            "tax_region": obj.get("taxRegion"),
            "zip_code": obj.get("zipCode")
        })
        return _obj


