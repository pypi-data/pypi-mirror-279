# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, constr

class ContactInfo(BaseModel):
    """
    ContactInfo
    """
    address1: Optional[constr(strict=True, max_length=255)] = Field(None, description="First line of the contact's address. This is often a street address or a business name. ")
    address2: Optional[constr(strict=True, max_length=255)] = Field(None, description="Second line of the contact's address. ")
    city: Optional[constr(strict=True, max_length=40)] = Field(None, description="City of the contact's address. ")
    contact_description: Optional[constr(strict=True, max_length=100)] = Field(None, alias="contactDescription", description="A description for the contact. ")
    country: Optional[constr(strict=True, max_length=64)] = Field(None, description="Country; must be a valid country name or abbreviation. If using [Zuora Tax](https://knowledgecenter.zuora.com/Zuora_Billing/Taxes/A_Zuora_Tax), you must specify a country in the bill-to contact to calculate tax. ")
    county: Optional[constr(strict=True, max_length=32)] = Field(None, description="County of the contact's address. ")
    custom_fields: Optional[Dict[str, Any]] = Field(None, alias="customFields", description="Custom fields of the Account object. The name of each custom field has the form <code>*customField*__c</code>. Custom field names are case sensitive. See [Manage Custom Fields](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Manage_Custom_Fields) for more information. ")
    fax: Optional[constr(strict=True, max_length=40)] = Field(None, description="Fax number of the contact. ")
    first_name: constr(strict=True, max_length=100) = Field(..., alias="firstName", description="First name of the contact. ")
    home_phone: Optional[constr(strict=True, max_length=40)] = Field(None, alias="homePhone", description="Home phone number of the contact. ")
    last_name: constr(strict=True, max_length=100) = Field(..., alias="lastName")
    mobile_phone: Optional[constr(strict=True, max_length=40)] = Field(None, alias="mobilePhone", description="Mobile phone number of the contact. ")
    nickname: Optional[constr(strict=True, max_length=100)] = Field(None, description="Nickname of the contact. ")
    other_phone: Optional[constr(strict=True, max_length=40)] = Field(None, alias="otherPhone", description="Additional phone number of the contact. Use the `otherPhoneType` field to specify the type of phone number. ")
    other_phone_type: Optional[StrictStr] = Field(None, alias="otherPhoneType")
    personal_email: Optional[constr(strict=True, max_length=80)] = Field(None, alias="personalEmail", description="Personal email address of the contact. ")
    postal_code: Optional[constr(strict=True, max_length=20)] = Field(None, alias="postalCode", description="ZIP code or other postal code of the contact's address. ")
    state: Optional[constr(strict=True, max_length=40)] = Field(None, description="State or province of the contact's address. ")
    tax_region: Optional[constr(strict=True, max_length=32)] = Field(None, alias="taxRegion", description="Region defined in your taxation rules. Only applicable if you use Zuora Tax. ")
    work_email: Optional[constr(strict=True, max_length=80)] = Field(None, alias="workEmail", description="Business email address of the contact. ")
    work_phone: Optional[constr(strict=True, max_length=40)] = Field(None, alias="workPhone", description="Business phone number of the contact. ")
    __properties = ["address1", "address2", "city", "contactDescription", "country", "county", "customFields", "fax", "firstName", "homePhone", "lastName", "mobilePhone", "nickname", "otherPhone", "otherPhoneType", "personalEmail", "postalCode", "state", "taxRegion", "workEmail", "workPhone"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContactInfo:
        """Create an instance of ContactInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContactInfo:
        """Create an instance of ContactInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContactInfo.parse_obj(obj)

        _obj = ContactInfo.parse_obj({
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "contact_description": obj.get("contactDescription"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "custom_fields": obj.get("customFields"),
            "fax": obj.get("fax"),
            "first_name": obj.get("firstName"),
            "home_phone": obj.get("homePhone"),
            "last_name": obj.get("lastName"),
            "mobile_phone": obj.get("mobilePhone"),
            "nickname": obj.get("nickname"),
            "other_phone": obj.get("otherPhone"),
            "other_phone_type": obj.get("otherPhoneType"),
            "personal_email": obj.get("personalEmail"),
            "postal_code": obj.get("postalCode"),
            "state": obj.get("state"),
            "tax_region": obj.get("taxRegion"),
            "work_email": obj.get("workEmail"),
            "work_phone": obj.get("workPhone")
        })
        return _obj


