# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from zuora_sdk.models.update_order_action_charge_trigger_date import UpdateOrderActionChargeTriggerDate
from zuora_sdk.models.update_order_action_trigger_date import UpdateOrderActionTriggerDate

class UpdateOrderActionTriggerDates(BaseModel):
    """
    UpdateOrderActionTriggerDates
    """
    charges: Optional[conlist(UpdateOrderActionChargeTriggerDate)] = None
    sequence: StrictInt = Field(..., description="Identifies which order action will have its triggering dates updated.  ")
    trigger_dates: Optional[conlist(UpdateOrderActionTriggerDate)] = Field(None, alias="triggerDates", description="Container for the service activation and customer acceptance dates of the order action.")
    __properties = ["charges", "sequence", "triggerDates"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateOrderActionTriggerDates:
        """Create an instance of UpdateOrderActionTriggerDates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_dates (list)
        _items = []
        if self.trigger_dates:
            for _item in self.trigger_dates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['triggerDates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateOrderActionTriggerDates:
        """Create an instance of UpdateOrderActionTriggerDates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateOrderActionTriggerDates.parse_obj(obj)

        _obj = UpdateOrderActionTriggerDates.parse_obj({
            "charges": [UpdateOrderActionChargeTriggerDate.from_dict(_item) for _item in obj.get("charges")] if obj.get("charges") is not None else None,
            "sequence": obj.get("sequence"),
            "trigger_dates": [UpdateOrderActionTriggerDate.from_dict(_item) for _item in obj.get("triggerDates")] if obj.get("triggerDates") is not None else None
        })
        return _obj


