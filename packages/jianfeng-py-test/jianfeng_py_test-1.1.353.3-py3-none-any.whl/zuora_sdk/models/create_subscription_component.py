# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conint, conlist
from zuora_sdk.models.charge_model_configuration_for_subscription import ChargeModelConfigurationForSubscription
from zuora_sdk.models.tier import Tier

class CreateSubscriptionComponent(BaseModel):
    """
    CreateSubscriptionComponent
    """
    amended_by_order_on: Optional[StrictStr] = Field(None, alias="amendedByOrderOn", description="The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue. ")
    apply_discount_to: Optional[StrictStr] = Field(None, alias="applyDiscountTo", description="Specifies the type of charges that you want a specific discount to apply to.  Values:  * `ONETIME` * `RECURRING` * `USAGE` * `ONETIMERECURRING` * `ONETIMEUSAGE` * `RECURRINGUSAGE` * `ONETIMERECURRINGUSAGE` ")
    bill_cycle_day: Optional[StrictStr] = Field(None, alias="billCycleDay", description="Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month the customer is billed.  Values: `1`-`31` ")
    bill_cycle_type: Optional[StrictStr] = Field(None, alias="billCycleType", description="Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayofMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayofWeek`, set the `weeklyBillCycleDay` field.  Values:  * `DefaultFromCustomer` * `SpecificDayofMonth` * `SubscriptionStartDay` * `ChargeTriggerDay` * `SpecificDayofWeek` ")
    billing_period: Optional[StrictStr] = Field(None, alias="billingPeriod", description="Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD). Values:  * `Month` * `Quarter` * `Semi_Annual` * `Annual` * `Eighteen_Months` * `Two_Years` * `Three_Years` * `Five_Years` * `Specific_Months` * `Subscription_Term` * `Week` * `Specific_Weeks` ")
    billing_period_alignment: Optional[StrictStr] = Field(None, alias="billingPeriodAlignment", description="Aligns charges within the same subscription if multiple charges begin on different dates.  Values:  * `AlignToCharge` * `AlignToSubscriptionStart` * `AlignToTermStart` ")
    billing_timing: Optional[StrictStr] = Field(None, alias="billingTiming", description="Billing timing for the charge for recurring charge types. Not avaliable for one time, usage, and discount charges.  Values:  * `IN_ADVANCE` (default) * `IN_ARREARS` ")
    charge_model_configuration: Optional[ChargeModelConfigurationForSubscription] = Field(None, alias="chargeModelConfiguration")
    description: Optional[StrictStr] = Field(None, description="Description of the charge. ")
    discount_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountAmount", description="Specifies the amount of fixed-amount discount. ")
    discount_level: Optional[StrictStr] = Field(None, alias="discountLevel", description="Specifies if the discount applies to the product rate plan only, the entire subscription, or to any activity in the account.  Values:  * `rateplan` * `subscription` * `account` ")
    discount_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountPercentage", description="Percentage of discount for a percentage discount.  ")
    end_date_condition: Optional[StrictStr] = Field(None, alias="endDateCondition", description="Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.  Values:  * `Subscription_End` * `Fixed_Period` * `Specific_End_Date` * `One_Time` ")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBillingFromRevenueAccounting", description="The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ")
    exclude_item_booking_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBookingFromRevenueAccounting", description="The flag to exclude rate plan charges from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ")
    included_units: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="includedUnits", description="Specifies the number of units in the base set of units for this charge. Must be >=`0`. ")
    is_allocation_eligible: Optional[StrictBool] = Field(None, alias="isAllocationEligible", description="This field is used to identify if the charge segment is allocation eligible in revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases. ")
    is_unbilled: Optional[StrictBool] = Field(None, alias="isUnbilled", description="This field is used to dictate how to perform the accounting during revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases. ")
    list_price_base: Optional[StrictStr] = Field(None, alias="listPriceBase", description="The list price base for the product rate plan charge.  Values:  * `Per_Billing_Period` * `Per_Month` * `Per_Week` * `Per_Year` * `Per_Specific_Months` ")
    number: Optional[StrictStr] = Field(None, description="Unique number that identifies the charge. Max 50 characters. System-generated if not provided. ")
    number_of_periods: Optional[StrictInt] = Field(None, alias="numberOfPeriods", description="Specifies the number of periods to use when calculating charges in an overage smoothing charge model. ")
    original_order_date: Optional[date] = Field(None, alias="originalOrderDate", description="The date when the rate plan charge is created through an order or amendment. This field is not updatable.  This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue. ")
    overage_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="overagePrice", description="Price for units over the allowed amount. ")
    overage_unused_units_credit_option: Optional[StrictStr] = Field(None, alias="overageUnusedUnitsCreditOption", description="Determines whether to credit the customer with unused units of usage.  Values:  * `NoCredit` * `CreditBySpecificRate` ")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Price for units in the subscription rate plan. ")
    price_change_option: Optional[StrictStr] = Field(None, alias="priceChangeOption", description="Applies an automatic price change when a termed subscription is renewed. The Billing Admin setting **Enable Automatic Price Change When Subscriptions are Renewed?** must be set to Yes to use this field. Values:  * `NoChange` (default) * `SpecificPercentageValue` * `UseLatestProductCatalogPricing` ")
    price_increase_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="priceIncreasePercentage", description="Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.   Value must be a decimal between `-100` and `100`. ")
    product_rate_plan_charge_id: StrictStr = Field(..., alias="productRatePlanChargeId", description="ID of a product rate-plan charge for this subscription. ")
    product_rate_plan_charge_number: Optional[StrictStr] = Field(None, alias="productRatePlanChargeNumber", description="Number of a product rate-plan charge for this subscription. ")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Number of units. Must be a decimal >=`0`.   When using `chargeOverrides` for creating subscriptions with recurring charge types, the `quantity` field must be populated when the charge model is \"Tiered Pricing\" or \"Volume Pricing\". It is not required for \"Flat Fee Pricing\" charge model. ")
    rating_group: Optional[StrictStr] = Field(None, alias="ratingGroup", description="Specifies a rating group based on which usage records are rated.  Possible values:  - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period. - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  - `ByUsageRecord`: The rating is based on each usage record. - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`). - `ByGroupId`: The rating is based on all the usages in a custom group.  **Note:**  - The `ByBillingPeriod` value can be applied for all charge models.  - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.  - The `ByGroupId` value is only available if you have the Active Rating feature enabled. - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`. ")
    specific_billing_period: Optional[StrictInt] = Field(None, alias="specificBillingPeriod", description="Specifies the number of month or week for the charges billing period. Required if you set the value of the `billingPeriod` field to `Specific_Months` or `Specific_Weeks`. ")
    specific_end_date: Optional[date] = Field(None, alias="specificEndDate", description="Defines when the charge ends after the charge trigger date.  **note:**  * This field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.  * If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date. ")
    specific_list_price_base: Optional[conint(strict=True, le=200, ge=1)] = Field(None, alias="specificListPriceBase", description="The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.  **Note**:    - This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price\" target=\"_blank\">Annual List Price</a> feature enabled.   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`. ")
    tiers: Optional[conlist(Tier)] = Field(None, description="Container for Volume, Tiered, or Tiered with Overage charge models. Supports the following charge types:  * One-time * Recurring * Usage-based ")
    trigger_date: Optional[date] = Field(None, alias="triggerDate", description="Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to `USD`. ")
    trigger_event: Optional[StrictStr] = Field(None, alias="triggerEvent", description="Specifies when to start billing the customer for the charge.  Values:  * `UCE` * `USA` * `UCA` * `USD` ")
    unused_units_credit_rates: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unusedUnitsCreditRates", description="Specifies the rate to credit a customer for unused units of usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption` field is set to `CreditBySpecificRate`. ")
    up_to_periods: Optional[StrictInt] = Field(None, alias="upToPeriods", description="Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.  **Note:** You must use this field together with the `upToPeriodsType` field to specify the time period.  * This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`.  * If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end. ")
    up_to_periods_type: Optional[StrictStr] = Field(None, alias="upToPeriodsType", description=" The period type used to define when the charge ends.   Values:  * `Billing_Periods` * `Days` * `Weeks` * `Months` * `Years`  You must use this field together with the `upToPeriods` field to specify the time period.  This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`.  ")
    weekly_bill_cycle_day: Optional[StrictStr] = Field(None, alias="weeklyBillCycleDay", description="Specifies which day of the week is the bill cycle day (BCD) for the charge.   Values:  * `Sunday` * `Monday` * `Tuesday` * `Wednesday` * `Thursday` * `Friday` * `Saturday` ")
    __properties = ["amendedByOrderOn", "applyDiscountTo", "billCycleDay", "billCycleType", "billingPeriod", "billingPeriodAlignment", "billingTiming", "chargeModelConfiguration", "description", "discountAmount", "discountLevel", "discountPercentage", "endDateCondition", "excludeItemBillingFromRevenueAccounting", "excludeItemBookingFromRevenueAccounting", "includedUnits", "isAllocationEligible", "isUnbilled", "listPriceBase", "number", "numberOfPeriods", "originalOrderDate", "overagePrice", "overageUnusedUnitsCreditOption", "price", "priceChangeOption", "priceIncreasePercentage", "productRatePlanChargeId", "productRatePlanChargeNumber", "quantity", "ratingGroup", "specificBillingPeriod", "specificEndDate", "specificListPriceBase", "tiers", "triggerDate", "triggerEvent", "unusedUnitsCreditRates", "upToPeriods", "upToPeriodsType", "weeklyBillCycleDay"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSubscriptionComponent:
        """Create an instance of CreateSubscriptionComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of charge_model_configuration
        if self.charge_model_configuration:
            _dict['chargeModelConfiguration'] = self.charge_model_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSubscriptionComponent:
        """Create an instance of CreateSubscriptionComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSubscriptionComponent.parse_obj(obj)

        _obj = CreateSubscriptionComponent.parse_obj({
            "amended_by_order_on": obj.get("amendedByOrderOn"),
            "apply_discount_to": obj.get("applyDiscountTo"),
            "bill_cycle_day": obj.get("billCycleDay"),
            "bill_cycle_type": obj.get("billCycleType"),
            "billing_period": obj.get("billingPeriod"),
            "billing_period_alignment": obj.get("billingPeriodAlignment"),
            "billing_timing": obj.get("billingTiming"),
            "charge_model_configuration": ChargeModelConfigurationForSubscription.from_dict(obj.get("chargeModelConfiguration")) if obj.get("chargeModelConfiguration") is not None else None,
            "description": obj.get("description"),
            "discount_amount": obj.get("discountAmount"),
            "discount_level": obj.get("discountLevel"),
            "discount_percentage": obj.get("discountPercentage"),
            "end_date_condition": obj.get("endDateCondition"),
            "exclude_item_billing_from_revenue_accounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "exclude_item_booking_from_revenue_accounting": obj.get("excludeItemBookingFromRevenueAccounting"),
            "included_units": obj.get("includedUnits"),
            "is_allocation_eligible": obj.get("isAllocationEligible"),
            "is_unbilled": obj.get("isUnbilled"),
            "list_price_base": obj.get("listPriceBase"),
            "number": obj.get("number"),
            "number_of_periods": obj.get("numberOfPeriods"),
            "original_order_date": obj.get("originalOrderDate"),
            "overage_price": obj.get("overagePrice"),
            "overage_unused_units_credit_option": obj.get("overageUnusedUnitsCreditOption"),
            "price": obj.get("price"),
            "price_change_option": obj.get("priceChangeOption"),
            "price_increase_percentage": obj.get("priceIncreasePercentage"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "product_rate_plan_charge_number": obj.get("productRatePlanChargeNumber"),
            "quantity": obj.get("quantity"),
            "rating_group": obj.get("ratingGroup"),
            "specific_billing_period": obj.get("specificBillingPeriod"),
            "specific_end_date": obj.get("specificEndDate"),
            "specific_list_price_base": obj.get("specificListPriceBase"),
            "tiers": [Tier.from_dict(_item) for _item in obj.get("tiers")] if obj.get("tiers") is not None else None,
            "trigger_date": obj.get("triggerDate"),
            "trigger_event": obj.get("triggerEvent"),
            "unused_units_credit_rates": obj.get("unusedUnitsCreditRates"),
            "up_to_periods": obj.get("upToPeriods"),
            "up_to_periods_type": obj.get("upToPeriodsType"),
            "weekly_bill_cycle_day": obj.get("weeklyBillCycleDay")
        })
        return _obj


