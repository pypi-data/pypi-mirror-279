# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, confloat, conint, validator
from zuora_sdk.models.price_change_option import PriceChangeOption

class UsagePerUnitPricingOverride(BaseModel):
    """
    Pricing information about a usage charge that uses the \"per unit\" charge model. In this charge model, the charge has a fixed price per unit consumed.   # noqa: E501
    """
    price_change_option: Optional[StrictStr] = Field(None, alias="priceChangeOption")
    price_increase_percentage: Optional[Union[confloat(ge=-100, strict=True), conint(ge=-100, strict=True)]] = Field(None, alias="priceIncreasePercentage", description="Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`. ")
    list_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="listPrice", description="Per-unit price of the charge. ")
    original_list_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="originalListPrice", description="The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ")
    uom: Optional[StrictStr] = Field(None, description="Unit of measure of the standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ")
    rating_group: Optional[StrictStr] = Field(None, alias="ratingGroup", description="Specifies how Zuora groups usage records when rating usage. See [Usage Rating by Group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group) for more information.   * ByBillingPeriod (default): The rating is based on all the usages in a billing period.   * ByUsageStartDate: The rating is based on all the usages on the same usage start date.    * ByUsageRecord: The rating is based on each usage record.   * ByUsageUpload: The rating is based on all the usages in a uploaded usage file (.xls or .csv). If you import a mass usage in a single upload, which contains multiple usage files in .xls or .csv format, usage records are grouped for each usage file. ")
    __properties = ["priceChangeOption", "priceIncreasePercentage", "listPrice", "originalListPrice", "uom", "ratingGroup"]

    @validator('rating_group')
    def rating_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ByBillingPeriod', 'ByUsageStartDate', 'ByUsageRecord', 'ByUsageUpload'):
            raise ValueError("must be one of enum values ('ByBillingPeriod', 'ByUsageStartDate', 'ByUsageRecord', 'ByUsageUpload')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UsagePerUnitPricingOverride:
        """Create an instance of UsagePerUnitPricingOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UsagePerUnitPricingOverride:
        """Create an instance of UsagePerUnitPricingOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UsagePerUnitPricingOverride.parse_obj(obj)

        _obj = UsagePerUnitPricingOverride.parse_obj({
            "price_change_option": obj.get("priceChangeOption"),
            "price_increase_percentage": obj.get("priceIncreasePercentage"),
            "list_price": obj.get("listPrice"),
            "original_list_price": obj.get("originalListPrice"),
            "uom": obj.get("uom"),
            "rating_group": obj.get("ratingGroup")
        })
        return _obj


