# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from zuora_sdk.models.catalog_group_product_rate_plan import CatalogGroupProductRatePlan

class CatalogGroup(BaseModel):
    """
    CatalogGroup
    """
    id: Optional[StrictStr] = Field(None, description="The ID of the catalog group. ")
    name: Optional[StrictStr] = Field(None, description="The name of the catalog group. ")
    catalog_group_number: Optional[StrictStr] = Field(None, alias="catalogGroupNumber", description="The automatically generated number of the catalog group with the CG- perfix. For example, CG-00000001. ")
    type: Optional[StrictStr] = None
    description: Optional[StrictStr] = Field(None, description="The description of the catalog group. ")
    product_rate_plans: Optional[conlist(CatalogGroupProductRatePlan)] = Field(None, alias="productRatePlans", description="The list of product rate plans in the catalog group. ")
    __properties = ["id", "name", "catalogGroupNumber", "type", "description", "productRatePlans"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CatalogGroup:
        """Create an instance of CatalogGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in product_rate_plans (list)
        _items = []
        if self.product_rate_plans:
            for _item in self.product_rate_plans:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productRatePlans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CatalogGroup:
        """Create an instance of CatalogGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CatalogGroup.parse_obj(obj)

        _obj = CatalogGroup.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "catalog_group_number": obj.get("catalogGroupNumber"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "product_rate_plans": [CatalogGroupProductRatePlan.from_dict(_item) for _item in obj.get("productRatePlans")] if obj.get("productRatePlans") is not None else None
        })
        return _obj


