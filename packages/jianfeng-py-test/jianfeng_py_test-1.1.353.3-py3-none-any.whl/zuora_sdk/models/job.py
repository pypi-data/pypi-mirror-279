# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from zuora_sdk.models.data_backfill_job_status import DataBackfillJobStatus
from zuora_sdk.models.job_type import JobType

class Job(BaseModel):
    """
    Job
    """
    id: Optional[StrictStr] = Field(None, description="Job id")
    import_type: Optional[JobType] = Field(None, alias="importType")
    uploaded_file_id: Optional[StrictStr] = Field(None, alias="uploadedFileId", description="Id of uploaded file")
    uploaded_file_name: Optional[StrictStr] = Field(None, alias="uploadedFileName", description="Name of uploaded file")
    uploaded_file_url: Optional[StrictStr] = Field(None, alias="uploadedFileUrl")
    uploaded_file_size: Optional[StrictStr] = Field(None, alias="uploadedFileSize")
    input_file_size: Optional[StrictInt] = Field(None, alias="inputFileSize")
    output_size: Optional[StrictStr] = Field(None, alias="outputSize")
    output_type: Optional[StrictStr] = Field(None, alias="outputType")
    output_file_size: Optional[StrictInt] = Field(None, alias="outputFileSize")
    uploaded_by: Optional[StrictStr] = Field(None, alias="uploadedBy")
    uploaded_on: Optional[datetime] = Field(None, alias="uploadedOn")
    completed_on: Optional[datetime] = Field(None, alias="completedOn")
    started_processing_on: Optional[datetime] = Field(None, alias="startedProcessingOn")
    result_file_id: Optional[StrictStr] = Field(None, alias="resultFileId")
    result_file_name: Optional[StrictStr] = Field(None, alias="resultFileName")
    result_file_url: Optional[StrictStr] = Field(None, alias="resultFileUrl")
    total_count: Optional[StrictInt] = Field(None, alias="totalCount")
    failed_count: Optional[StrictInt] = Field(None, alias="failedCount")
    status: Optional[DataBackfillJobStatus] = None
    failure_message: Optional[StrictStr] = Field(None, alias="failureMessage")
    processed_count: Optional[StrictInt] = Field(None, alias="processedCount")
    success_count: Optional[StrictInt] = Field(None, alias="successCount")
    remaining_time: Optional[StrictInt] = Field(None, alias="remainingTime")
    remaining_time_text: Optional[StrictStr] = Field(None, alias="remainingTimeText")
    completed_percentage: Optional[StrictInt] = Field(None, alias="completedPercentage")
    __properties = ["id", "importType", "uploadedFileId", "uploadedFileName", "uploadedFileUrl", "uploadedFileSize", "inputFileSize", "outputSize", "outputType", "outputFileSize", "uploadedBy", "uploadedOn", "completedOn", "startedProcessingOn", "resultFileId", "resultFileName", "resultFileUrl", "totalCount", "failedCount", "status", "failureMessage", "processedCount", "successCount", "remainingTime", "remainingTimeText", "completedPercentage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Job:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Job:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Job.parse_obj(obj)

        _obj = Job.parse_obj({
            "id": obj.get("id"),
            "import_type": obj.get("importType"),
            "uploaded_file_id": obj.get("uploadedFileId"),
            "uploaded_file_name": obj.get("uploadedFileName"),
            "uploaded_file_url": obj.get("uploadedFileUrl"),
            "uploaded_file_size": obj.get("uploadedFileSize"),
            "input_file_size": obj.get("inputFileSize"),
            "output_size": obj.get("outputSize"),
            "output_type": obj.get("outputType"),
            "output_file_size": obj.get("outputFileSize"),
            "uploaded_by": obj.get("uploadedBy"),
            "uploaded_on": obj.get("uploadedOn"),
            "completed_on": obj.get("completedOn"),
            "started_processing_on": obj.get("startedProcessingOn"),
            "result_file_id": obj.get("resultFileId"),
            "result_file_name": obj.get("resultFileName"),
            "result_file_url": obj.get("resultFileUrl"),
            "total_count": obj.get("totalCount"),
            "failed_count": obj.get("failedCount"),
            "status": obj.get("status"),
            "failure_message": obj.get("failureMessage"),
            "processed_count": obj.get("processedCount"),
            "success_count": obj.get("successCount"),
            "remaining_time": obj.get("remainingTime"),
            "remaining_time_text": obj.get("remainingTimeText"),
            "completed_percentage": obj.get("completedPercentage")
        })
        return _obj


