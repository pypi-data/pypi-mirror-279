# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr
from zuora_sdk.models.create_payment_method_cardholder_info import CreatePaymentMethodCardholderInfo

class CreatePaymentMethodCreditCard(BaseModel):
    """
    CreatePaymentMethodCreditCard
    """
    card_holder_info: Optional[CreatePaymentMethodCardholderInfo] = Field(None, alias="cardHolderInfo")
    card_number: Optional[StrictStr] = Field(None, alias="cardNumber", description="Credit card number. This field is required if `type` is set to `CreditCard`. However, for creating tokenized credit card payment methods,  this field is optional if the `tokens` and `cardMaskNumber` fields are specified. ")
    card_mask_number: Optional[StrictStr] = Field(None, alias="cardMaskNumber", description="The masked card number associated with the credit card payment. This field is only required if the credit card payment method is created using tokens.  ")
    card_type: Optional[StrictStr] = Field(None, alias="cardType", description="The type of the credit card. This field is required if `type` is set to `CreditCard`.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways). ")
    check_duplicated: Optional[StrictBool] = Field(None, alias="checkDuplicated", description="Indicates whether the duplication check is performed when you create a new credit card payment method. The default value is `false`.  With this field set to `true`, Zuora will check all active payment methods associated with the same billing account to ensure that no duplicate credit card payment methods are created. An error is returned if a duplicate payment method is found.          The following fields are used for the duplication check:   - `cardHolderName`   - `expirationMonth`   - `expirationYear`   - `creditCardMaskNumber`. It is the masked credit card number generated by Zuora. For example:     ```     ************1234     ``` ")
    expiration_month: Optional[StrictInt] = Field(None, alias="expirationMonth", description="One or two digit expiration month (1-12) of the credit card. This field is required if `type` is set to `CreditCard`. However, for creating tokenized credit card payment methods,  this field is optional if the `tokens` and `cardMaskNumber` fields are specified. ")
    expiration_year: Optional[StrictInt] = Field(None, alias="expirationYear", description="Four-digit expiration year of the credit card. This field is required if `type` is set to `CreditCard`. However, for creating tokenized credit card payment methods,  this field is optional if the `tokens` and `cardMaskNumber` fields are specified. ")
    mit_consent_agreement_ref: Optional[constr(strict=True, max_length=128)] = Field(None, alias="mitConsentAgreementRef", description="Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field. ")
    mit_consent_agreement_src: Optional[StrictStr] = Field(None, alias="mitConsentAgreementSrc")
    mit_network_transaction_id: Optional[constr(strict=True, max_length=128)] = Field(None, alias="mitNetworkTransactionId", description="Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`. ")
    mit_profile_action: Optional[StrictStr] = Field(None, alias="mitProfileAction")
    mit_profile_agreed_on: Optional[date] = Field(None, alias="mitProfileAgreedOn", description="The date on which the profile is agreed. The date format is `yyyy-mm-dd`. ")
    mit_profile_type: Optional[StrictStr] = Field(None, alias="mitProfileType")
    security_code: Optional[StrictStr] = Field(None, alias="securityCode", description="CVV or CVV2 security code of the credit card.  To ensure PCI compliance, this value is not stored and cannot be queried. ")
    __properties = ["cardHolderInfo", "cardNumber", "cardMaskNumber", "cardType", "checkDuplicated", "expirationMonth", "expirationYear", "mitConsentAgreementRef", "mitConsentAgreementSrc", "mitNetworkTransactionId", "mitProfileAction", "mitProfileAgreedOn", "mitProfileType", "securityCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePaymentMethodCreditCard:
        """Create an instance of CreatePaymentMethodCreditCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card_holder_info
        if self.card_holder_info:
            _dict['cardHolderInfo'] = self.card_holder_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePaymentMethodCreditCard:
        """Create an instance of CreatePaymentMethodCreditCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePaymentMethodCreditCard.parse_obj(obj)

        _obj = CreatePaymentMethodCreditCard.parse_obj({
            "card_holder_info": CreatePaymentMethodCardholderInfo.from_dict(obj.get("cardHolderInfo")) if obj.get("cardHolderInfo") is not None else None,
            "card_number": obj.get("cardNumber"),
            "card_mask_number": obj.get("cardMaskNumber"),
            "card_type": obj.get("cardType"),
            "check_duplicated": obj.get("checkDuplicated"),
            "expiration_month": obj.get("expirationMonth"),
            "expiration_year": obj.get("expirationYear"),
            "mit_consent_agreement_ref": obj.get("mitConsentAgreementRef"),
            "mit_consent_agreement_src": obj.get("mitConsentAgreementSrc"),
            "mit_network_transaction_id": obj.get("mitNetworkTransactionId"),
            "mit_profile_action": obj.get("mitProfileAction"),
            "mit_profile_agreed_on": obj.get("mitProfileAgreedOn"),
            "mit_profile_type": obj.get("mitProfileType"),
            "security_code": obj.get("securityCode")
        })
        return _obj


