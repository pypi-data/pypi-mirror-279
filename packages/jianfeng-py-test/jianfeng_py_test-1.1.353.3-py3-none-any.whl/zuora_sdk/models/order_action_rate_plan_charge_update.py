# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from zuora_sdk.models.order_action_rate_plan_billing_update import OrderActionRatePlanBillingUpdate
from zuora_sdk.models.order_action_rate_plan_pricing_update import OrderActionRatePlanPricingUpdate
from zuora_sdk.models.trigger_params import TriggerParams

class OrderActionRatePlanChargeUpdate(BaseModel):
    """
    The JSON object containing the information for a charge update in the 'UpdateProduct' type order action.  # noqa: E501
    """
    billing: Optional[OrderActionRatePlanBillingUpdate] = None
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="Read only. Identifies the charge to be updated. ")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of a Rate Plan Charge object. ")
    description: Optional[StrictStr] = Field(None, description="Description of the charge. ")
    effective_date: Optional[TriggerParams] = Field(None, alias="effectiveDate")
    pricing: Optional[OrderActionRatePlanPricingUpdate] = None
    unique_token: Optional[StrictStr] = Field(None, alias="uniqueToken", description="A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions. ")
    __properties = ["billing", "chargeNumber", "customFields", "description", "effectiveDate", "pricing", "uniqueToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderActionRatePlanChargeUpdate:
        """Create an instance of OrderActionRatePlanChargeUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of effective_date
        if self.effective_date:
            _dict['effectiveDate'] = self.effective_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing
        if self.pricing:
            _dict['pricing'] = self.pricing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderActionRatePlanChargeUpdate:
        """Create an instance of OrderActionRatePlanChargeUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderActionRatePlanChargeUpdate.parse_obj(obj)

        _obj = OrderActionRatePlanChargeUpdate.parse_obj({
            "billing": OrderActionRatePlanBillingUpdate.from_dict(obj.get("billing")) if obj.get("billing") is not None else None,
            "charge_number": obj.get("chargeNumber"),
            "custom_fields": obj.get("customFields"),
            "description": obj.get("description"),
            "effective_date": TriggerParams.from_dict(obj.get("effectiveDate")) if obj.get("effectiveDate") is not None else None,
            "pricing": OrderActionRatePlanPricingUpdate.from_dict(obj.get("pricing")) if obj.get("pricing") is not None else None,
            "unique_token": obj.get("uniqueToken")
        })
        return _obj


