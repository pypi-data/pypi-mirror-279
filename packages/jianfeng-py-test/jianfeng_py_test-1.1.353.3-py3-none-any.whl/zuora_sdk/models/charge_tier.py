# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint

class ChargeTier(BaseModel):
    """
    ChargeTier
    """
    ending_unit: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="endingUnit", description="Limit on the number of units for which the tier is effective. ")
    price: Union[StrictFloat, StrictInt] = Field(..., description="Price or per-unit price of the tier, depending on the value of the `priceFormat` field. ")
    price_format: StrictStr = Field(..., alias="priceFormat")
    starting_unit: Union[StrictFloat, StrictInt] = Field(..., alias="startingUnit", description="Number of units at which the tier becomes effective. ")
    tier: conint(strict=True, ge=1) = Field(..., description="Index of the tier in the charge. ")
    __properties = ["endingUnit", "price", "priceFormat", "startingUnit", "tier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChargeTier:
        """Create an instance of ChargeTier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChargeTier:
        """Create an instance of ChargeTier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChargeTier.parse_obj(obj)

        _obj = ChargeTier.parse_obj({
            "ending_unit": obj.get("endingUnit"),
            "price": obj.get("price"),
            "price_format": obj.get("priceFormat"),
            "starting_unit": obj.get("startingUnit"),
            "tier": obj.get("tier")
        })
        return _obj


