# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, constr
from zuora_sdk.models.create_payment_debit_memo_application import CreatePaymentDebitMemoApplication
from zuora_sdk.models.create_payment_invoice_application import CreatePaymentInvoiceApplication
from zuora_sdk.models.gateway_options import GatewayOptions
from zuora_sdk.models.payment_request_finance_information import PaymentRequestFinanceInformation
from zuora_sdk.models.payment_schedule_payment_option_fields import PaymentSchedulePaymentOptionFields
from zuora_sdk.models.payment_with_custom_rates import PaymentWithCustomRates

class CreatePaymentRequest(BaseModel):
    """
    CreatePaymentRequest
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the customer account that the payment is created for. ")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The number of the customer account that the payment is created for, such as `A00000001`.  You can specify either `accountNumber` or `accountId` for a customer account. If both of them are specified, they must refer to the same customer account. ")
    amount: Union[StrictFloat, StrictInt] = Field(..., description="The total amount of the payment. ")
    auth_transaction_id: Optional[constr(strict=True, max_length=50)] = Field(None, alias="authTransactionId", description="The authorization transaction ID from the payment gateway. Use this field for electronic payments, such as credit cards.  When you create a payment for capturing the authorized funds, it is highly recommended to pass in the gatewayOrderId that you used when authorizing the funds by using the [Create authorization](https://www.zuora.com/developer/api-references/api/operation/Post_CreateAuthorization) operation, together with the `authTransactionId` field.  The following payment gateways support this field:   - Adyen Integration v2.0   - CyberSource 1.28   - CyberSource 1.97   - CyberSource 2.0   - Chase Paymentech Orbital   - Ingenico ePayments   - SlimPay   - Stripe v2   - Verifi Global Payment Gateway   - WePay Payment Gateway Integration ")
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Additional information related to the payment. ")
    currency: StrictStr = Field(..., description="When Standalone Payment is not enabled, the `currency` of the payment must be the same as the payment currency defined in the customer account settings through Zuora UI.  When Standalone Payment is enabled and `standalone` is `true`, the `currency` of the standalone payment can be different from the payment currency defined in the customer account settings. The amount will not be summed up to the account balance or key metrics regardless of currency. ")
    custom_rates: Optional[conlist(PaymentWithCustomRates, max_items=2)] = Field(None, alias="customRates", description="It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item or Reporting currency item or both).  **Note**: The API custom rate feature is permission controlled. ")
    debit_memos: Optional[conlist(CreatePaymentDebitMemoApplication)] = Field(None, alias="debitMemos", description="Container for debit memos. The maximum number of debit memos is 1,000. ")
    effective_date: Optional[StrictStr] = Field(None, alias="effectiveDate", description="The date when the payment takes effect, in `yyyy-mm-dd` format.  **Note:**   - This field is required for only electronic payments. It's an optional field for external payments.   - When specified, this field must be set to the date of today. ")
    finance_information: Optional[PaymentRequestFinanceInformation] = Field(None, alias="financeInformation")
    gateway_id: Optional[StrictStr] = Field(None, alias="gatewayId", description="The ID of the gateway instance that processes the payment. The ID must be a valid gateway instance ID and this gateway must support the specific payment method.   - When creating electronic payments, this field is required.  - When creating external payments, this field is optional. ")
    payment_gateway_number: Optional[StrictStr] = Field(None, alias="paymentGatewayNumber", description="The natural key for the payment gateway. ")
    gateway_options: Optional[GatewayOptions] = Field(None, alias="gatewayOptions")
    gateway_order_id: Optional[constr(strict=True, max_length=50)] = Field(None, alias="gatewayOrderId", description="A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.  Gateways check duplicates on the gateway order ID to ensure that the merchant do not accidentally enter the same transaction twice. This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use their shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems.  When you create a payment for capturing the authorized funds, it is highly recommended to pass in the gatewayOrderId that you used when authorizing the funds by using the [Create authorization](https://www.zuora.com/developer/api-references/api/operation/Post_CreateAuthorization) operation, together with the `authTransactionId` field. ")
    invoices: Optional[conlist(CreatePaymentInvoiceApplication)] = Field(None, description="Container for invoices. The maximum number of invoices is 1,000. ")
    mit_transaction_source: Optional[StrictStr] = Field(None, alias="mitTransactionSource")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="The unique ID of the payment method that the customer used to make the payment.   If no payment method ID is specified in the request body, the default payment method for the customer account is used automatically. If the default payment method is different from the type of payments that you want to create, an error occurs. ")
    payment_method_type: Optional[StrictStr] = Field(None, alias="paymentMethodType", description="The type of the payment method that the customer used to make the payment.   Specify this value when you are creating an external payment method. If both `paymentMethodType` and `paymentMethodId` are specified, only the `paymentMethodId` value is used to create the payment. ")
    payment_option: Optional[conlist(PaymentSchedulePaymentOptionFields)] = Field(None, alias="paymentOption", description="Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.  Here is an example: ``` \"paymentOption\": [   {     \"type\": \"GatewayOptions\",     \"detail\": {       \"SecCode\":\"WEB\"     }   } ] ```  `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.  You can use this field or the `gatewayOptions` field to pass the Gateway Options fields supported by a payment gateway. However, the Gateway Options fields passed through the `paymentOption` field will be stored in the Payment Option object and can be easily retrieved.  To enable this field, submit a request at [Zuora Global Support](https://support.zuora.com/). This field is only available if `zuora-version` is set to 337.0 or later. ")
    payment_schedule_key: Optional[StrictStr] = Field(None, alias="paymentScheduleKey", description="The unique ID or the number of the payment schedule to be linked with the payment. See [Link payments to payment schedules](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Payment_Schedules/Link_payments_with_payment_schedules) for more information.")
    prepayment: Optional[StrictBool] = Field(None, description="Indicates whether the payment will be used as a reserved payment. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information. ")
    reference_id: Optional[constr(strict=True, max_length=100, min_length=0)] = Field(None, alias="referenceId", description="The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments. ")
    soft_descriptor: Optional[constr(strict=True, max_length=35)] = Field(None, alias="softDescriptor", description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.")
    soft_descriptor_phone: Optional[constr(strict=True, max_length=20)] = Field(None, alias="softDescriptorPhone", description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.")
    standalone: Optional[StrictBool] = Field(None, description="This field is only available if support for standalone payments is enabled.  Specify `true` to create a standalone payment that will be processed in Zuora through Zuora gateway integration but will be settled outside of Zuora.  When `standalone` is set to `true`:   - `accountId`, `amount`, `currency`, and `type` are required.    - `type` must be `Electronic`.   - `currency` of the payment can be different from the payment currency in the customer account settings.   - The amount will not be summed up into the account balance and key metrics regardless of the payment currency.   - No settlement data will be created.   - Either the applied amount or the unapplied amount of the payment is zero.   - The standalone payment cannot be applied, unapplied, or transferred.  Specify `false` to create an ordinary payment that will be created, processed, and settled in Zuora. The `currency` of an ordinary payment must be the same as the currency in the customer account settings. ")
    type: StrictStr = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["accountId", "accountNumber", "amount", "authTransactionId", "comment", "currency", "customRates", "debitMemos", "effectiveDate", "financeInformation", "gatewayId", "paymentGatewayNumber", "gatewayOptions", "gatewayOrderId", "invoices", "mitTransactionSource", "paymentMethodId", "paymentMethodType", "paymentOption", "paymentScheduleKey", "prepayment", "referenceId", "softDescriptor", "softDescriptorPhone", "standalone", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePaymentRequest:
        """Create an instance of CreatePaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in custom_rates (list)
        _items = []
        if self.custom_rates:
            for _item in self.custom_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in debit_memos (list)
        _items = []
        if self.debit_memos:
            for _item in self.debit_memos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['debitMemos'] = _items
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_options
        if self.gateway_options:
            _dict['gatewayOptions'] = self.gateway_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item in self.invoices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_option (list)
        _items = []
        if self.payment_option:
            for _item in self.payment_option:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentOption'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePaymentRequest:
        """Create an instance of CreatePaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePaymentRequest.parse_obj(obj)

        _obj = CreatePaymentRequest.parse_obj({
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "amount": obj.get("amount"),
            "auth_transaction_id": obj.get("authTransactionId"),
            "comment": obj.get("comment"),
            "currency": obj.get("currency"),
            "custom_rates": [PaymentWithCustomRates.from_dict(_item) for _item in obj.get("customRates")] if obj.get("customRates") is not None else None,
            "debit_memos": [CreatePaymentDebitMemoApplication.from_dict(_item) for _item in obj.get("debitMemos")] if obj.get("debitMemos") is not None else None,
            "effective_date": obj.get("effectiveDate"),
            "finance_information": PaymentRequestFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "gateway_id": obj.get("gatewayId"),
            "payment_gateway_number": obj.get("paymentGatewayNumber"),
            "gateway_options": GatewayOptions.from_dict(obj.get("gatewayOptions")) if obj.get("gatewayOptions") is not None else None,
            "gateway_order_id": obj.get("gatewayOrderId"),
            "invoices": [CreatePaymentInvoiceApplication.from_dict(_item) for _item in obj.get("invoices")] if obj.get("invoices") is not None else None,
            "mit_transaction_source": obj.get("mitTransactionSource"),
            "payment_method_id": obj.get("paymentMethodId"),
            "payment_method_type": obj.get("paymentMethodType"),
            "payment_option": [PaymentSchedulePaymentOptionFields.from_dict(_item) for _item in obj.get("paymentOption")] if obj.get("paymentOption") is not None else None,
            "payment_schedule_key": obj.get("paymentScheduleKey"),
            "prepayment": obj.get("prepayment"),
            "reference_id": obj.get("referenceId"),
            "soft_descriptor": obj.get("softDescriptor"),
            "soft_descriptor_phone": obj.get("softDescriptorPhone"),
            "standalone": obj.get("standalone"),
            "type": obj.get("type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


