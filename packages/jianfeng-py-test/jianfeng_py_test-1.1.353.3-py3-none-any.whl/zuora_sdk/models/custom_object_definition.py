# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from zuora_sdk.models.custom_object_definition_schema import CustomObjectDefinitionSchema

class CustomObjectDefinition(BaseModel):
    """
    CustomObjectDefinition
    """
    created_by_id: Optional[StrictStr] = Field(None, alias="CreatedById", description="The creator's Id")
    created_date: Optional[datetime] = Field(None, alias="CreatedDate", description="The creation time of the custom object definition in date-time format.")
    id: Optional[StrictStr] = Field(None, alias="Id", description="The unique Id of the custom object definition")
    updated_by_id: Optional[StrictStr] = Field(None, alias="UpdatedById", description="The modifier's Id")
    updated_date: Optional[datetime] = Field(None, alias="UpdatedDate", description="The update time of the custom object definition in date-time format.")
    var_schema: Optional[CustomObjectDefinitionSchema] = Field(None, alias="schema")
    type: Optional[StrictStr] = Field(None, description="The API name of the custom object")
    __properties = ["CreatedById", "CreatedDate", "Id", "UpdatedById", "UpdatedDate", "schema", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomObjectDefinition:
        """Create an instance of CustomObjectDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomObjectDefinition:
        """Create an instance of CustomObjectDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomObjectDefinition.parse_obj(obj)

        _obj = CustomObjectDefinition.parse_obj({
            "created_by_id": obj.get("CreatedById"),
            "created_date": obj.get("CreatedDate"),
            "id": obj.get("Id"),
            "updated_by_id": obj.get("UpdatedById"),
            "updated_date": obj.get("UpdatedDate"),
            "var_schema": CustomObjectDefinitionSchema.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
            "type": obj.get("type")
        })
        return _obj


