# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from zuora_sdk.models.preview_start_date_policy import PreviewStartDatePolicy

class PreviewStartDate(BaseModel):
    """
    The start date of the preview.   # noqa: E501
    """
    preview_start_date_policy: Optional[PreviewStartDatePolicy] = Field(None, alias="previewStartDatePolicy")
    specific_date: Optional[StrictStr] = Field(None, alias="specificDate", description="The specific date for the preview start date. Required if `previewStartDatePolicy` is `specificDate`. ")
    __properties = ["previewStartDatePolicy", "specificDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewStartDate:
        """Create an instance of PreviewStartDate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewStartDate:
        """Create an instance of PreviewStartDate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewStartDate.parse_obj(obj)

        _obj = PreviewStartDate.parse_obj({
            "preview_start_date_policy": obj.get("previewStartDatePolicy"),
            "specific_date": obj.get("specificDate")
        })
        return _obj


