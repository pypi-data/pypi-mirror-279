# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class AccountBillingAndPayment(BaseModel):
    """
    Container for billing and payment information for the account.  # noqa: E501
    """
    additional_email_addresses: Optional[conlist(StrictStr)] = Field(None, alias="additionalEmailAddresses", description="A list of additional email addresses to receive email notifications. ")
    auto_pay: Optional[StrictBool] = Field(None, alias="autoPay", description="Whether future payments are automatically collected when they are due during a payment run.  ")
    bill_cycle_day: Optional[StrictInt] = Field(None, alias="billCycleDay", description="Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account. ")
    currency: Optional[StrictStr] = Field(None, description="A currency defined in the web-based UI administrative settings. ")
    default_payment_method_id: Optional[StrictStr] = Field(None, alias="defaultPaymentMethodId", description="ID of the default payment method for the account. ")
    invoice_delivery_prefs_email: Optional[StrictBool] = Field(None, alias="invoiceDeliveryPrefsEmail", description="Whether the customer wants to receive invoices through email.  ")
    invoice_delivery_prefs_print: Optional[StrictBool] = Field(None, alias="invoiceDeliveryPrefsPrint", description="Whether the customer wants to receive printed invoices, such as through postal mail. ")
    payment_gateway: Optional[StrictStr] = Field(None, alias="paymentGateway", description="The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway. ")
    payment_term: Optional[StrictStr] = Field(None, alias="paymentTerm", description="A payment-terms indicator defined in the web-based UI administrative settings, e.g., \"Net 30\". ")
    payment_gateway_number: Optional[StrictStr] = Field(None, alias="paymentGatewayNumber", description="paymentGatewayNumber\". ")
    payment_method_cascading_consent: Optional[StrictBool] = Field(None, alias="paymentMethodCascadingConsent", description="payment method cascading consent ")
    roll_up_usage: Optional[StrictBool] = Field(None, alias="rollUpUsage", description="whether roll up usage of the account to its parent account")
    __properties = ["additionalEmailAddresses", "autoPay", "billCycleDay", "currency", "defaultPaymentMethodId", "invoiceDeliveryPrefsEmail", "invoiceDeliveryPrefsPrint", "paymentGateway", "paymentTerm", "paymentGatewayNumber", "paymentMethodCascadingConsent", "rollUpUsage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountBillingAndPayment:
        """Create an instance of AccountBillingAndPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountBillingAndPayment:
        """Create an instance of AccountBillingAndPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountBillingAndPayment.parse_obj(obj)

        _obj = AccountBillingAndPayment.parse_obj({
            "additional_email_addresses": obj.get("additionalEmailAddresses"),
            "auto_pay": obj.get("autoPay"),
            "bill_cycle_day": obj.get("billCycleDay"),
            "currency": obj.get("currency"),
            "default_payment_method_id": obj.get("defaultPaymentMethodId"),
            "invoice_delivery_prefs_email": obj.get("invoiceDeliveryPrefsEmail"),
            "invoice_delivery_prefs_print": obj.get("invoiceDeliveryPrefsPrint"),
            "payment_gateway": obj.get("paymentGateway"),
            "payment_term": obj.get("paymentTerm"),
            "payment_gateway_number": obj.get("paymentGatewayNumber"),
            "payment_method_cascading_consent": obj.get("paymentMethodCascadingConsent"),
            "roll_up_usage": obj.get("rollUpUsage")
        })
        return _obj


