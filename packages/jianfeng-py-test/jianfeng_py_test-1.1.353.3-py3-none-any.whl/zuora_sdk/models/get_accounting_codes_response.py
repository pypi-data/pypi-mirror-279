# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from zuora_sdk.models.accounting_code_item_response import AccountingCodeItemResponse

class GetAccountingCodesResponse(BaseModel):
    """
    GetAccountingCodesResponse
    """
    accounting_codes: Optional[conlist(AccountingCodeItemResponse)] = Field(None, alias="accountingCodes", description="An array of all the accounting codes in your chart of accounts. Each accounting code has the following fields. ")
    next_page: Optional[StrictStr] = Field(None, alias="nextPage", description="URL to retrieve the next page of the response if it exists; otherwise absent. ")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully. ")
    __properties = ["accountingCodes", "nextPage", "success"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAccountingCodesResponse:
        """Create an instance of GetAccountingCodesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in accounting_codes (list)
        _items = []
        if self.accounting_codes:
            for _item in self.accounting_codes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountingCodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAccountingCodesResponse:
        """Create an instance of GetAccountingCodesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetAccountingCodesResponse.parse_obj(obj)

        _obj = GetAccountingCodesResponse.parse_obj({
            "accounting_codes": [AccountingCodeItemResponse.from_dict(_item) for _item in obj.get("accountingCodes")] if obj.get("accountingCodes") is not None else None,
            "next_page": obj.get("nextPage"),
            "success": obj.get("success")
        })
        return _obj


