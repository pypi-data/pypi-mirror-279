# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from zuora_sdk.models.transferred_to_accounting_status import TransferredToAccountingStatus
from zuora_sdk.models.update_journal_entry_item_request import UpdateJournalEntryItemRequest

class UpdateBasicSummaryJournalEntryRequest(BaseModel):
    """
    UpdateBasicSummaryJournalEntryRequest
    """
    journal_entry_items: Optional[conlist(UpdateJournalEntryItemRequest)] = Field(None, alias="journalEntryItems", description="Key name that represents the list of journal entry items. ")
    notes: Optional[StrictStr] = Field(None, description="Additional information about this record.  ***Character limit:*** 2,000 ")
    transferred_to_accounting: Optional[TransferredToAccountingStatus] = Field(None, alias="transferredToAccounting")
    additional_properties: Dict[str, Any] = {}
    __properties = ["journalEntryItems", "notes", "transferredToAccounting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateBasicSummaryJournalEntryRequest:
        """Create an instance of UpdateBasicSummaryJournalEntryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in journal_entry_items (list)
        _items = []
        if self.journal_entry_items:
            for _item in self.journal_entry_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['journalEntryItems'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateBasicSummaryJournalEntryRequest:
        """Create an instance of UpdateBasicSummaryJournalEntryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateBasicSummaryJournalEntryRequest.parse_obj(obj)

        _obj = UpdateBasicSummaryJournalEntryRequest.parse_obj({
            "journal_entry_items": [UpdateJournalEntryItemRequest.from_dict(_item) for _item in obj.get("journalEntryItems")] if obj.get("journalEntryItems") is not None else None,
            "notes": obj.get("notes"),
            "transferred_to_accounting": obj.get("transferredToAccounting")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


