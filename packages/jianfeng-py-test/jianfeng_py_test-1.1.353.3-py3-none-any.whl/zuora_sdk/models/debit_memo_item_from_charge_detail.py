# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr
from zuora_sdk.models.debit_memo_item_from_charge_detail_finance_information import DebitMemoItemFromChargeDetailFinanceInformation

class DebitMemoItemFromChargeDetail(BaseModel):
    """
    DebitMemoItemFromChargeDetail
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount of the debit memo item.  **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later.")
    charge_id: StrictStr = Field(..., alias="chargeId", description="The ID of the product rate plan charge that the debit memo is created from.  **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.")
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Comments about the product rate plan charge.  **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or before.")
    description: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="The description of the product rate plan charge.  **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.")
    finance_information: Optional[DebitMemoItemFromChargeDetailFinanceInformation] = Field(None, alias="financeInformation")
    memo_item_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="memoItemAmount", description="The amount of the debit memo item.  **Note**: This field is not available if you set the `zuora-version` request header to `224.0` or later.")
    product_rate_plan_charge_id: StrictStr = Field(..., alias="productRatePlanChargeId", description="The ID of the product rate plan charge that the debit memo is created from.  **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The number of units for the debit memo item.")
    service_end_date: Optional[date] = Field(None, alias="serviceEndDate", description="The service end date of the debit memo item. If not specified, the effective end date of the corresponding product rate plan will be used.")
    service_start_date: Optional[date] = Field(None, alias="serviceStartDate", description="The service start date of the debit memo item. If not specified, the effective start date of the corresponding product rate plan will be used.")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBillingFromRevenueAccounting", description="The flag to exclude the debit memo item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["amount", "chargeId", "comment", "description", "financeInformation", "memoItemAmount", "productRatePlanChargeId", "quantity", "serviceEndDate", "serviceStartDate", "excludeItemBillingFromRevenueAccounting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DebitMemoItemFromChargeDetail:
        """Create an instance of DebitMemoItemFromChargeDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DebitMemoItemFromChargeDetail:
        """Create an instance of DebitMemoItemFromChargeDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DebitMemoItemFromChargeDetail.parse_obj(obj)

        _obj = DebitMemoItemFromChargeDetail.parse_obj({
            "amount": obj.get("amount"),
            "charge_id": obj.get("chargeId"),
            "comment": obj.get("comment"),
            "description": obj.get("description"),
            "finance_information": DebitMemoItemFromChargeDetailFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "memo_item_amount": obj.get("memoItemAmount"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "quantity": obj.get("quantity"),
            "service_end_date": obj.get("serviceEndDate"),
            "service_start_date": obj.get("serviceStartDate"),
            "exclude_item_billing_from_revenue_accounting": obj.get("excludeItemBillingFromRevenueAccounting")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


