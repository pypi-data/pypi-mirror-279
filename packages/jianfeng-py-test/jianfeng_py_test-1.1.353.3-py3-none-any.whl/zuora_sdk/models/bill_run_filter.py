# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class BillRunFilter(BaseModel):
    """
    BillRunFilter
    """
    filter_type: Optional[StrictStr] = Field(None, alias="filterType", description="To create bill run at account level or subscription level. ")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The target account ID. ")
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId", description="The target subscription ID. ")
    invoice_schedule_id: Optional[StrictStr] = Field(None, alias="invoiceScheduleId", description="The target invoice schedule ID. ")
    invoice_schedule_item_id: Optional[StrictStr] = Field(None, alias="invoiceScheduleItemId", description="The target invoice schedule item ID. ")
    __properties = ["filterType", "accountId", "subscriptionId", "invoiceScheduleId", "invoiceScheduleItemId"]

    @validator('filter_type')
    def filter_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Account', 'Subscription', 'InvoiceSchedule', 'FilterCondition'):
            raise ValueError("must be one of enum values ('Account', 'Subscription', 'InvoiceSchedule', 'FilterCondition')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BillRunFilter:
        """Create an instance of BillRunFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BillRunFilter:
        """Create an instance of BillRunFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BillRunFilter.parse_obj(obj)

        _obj = BillRunFilter.parse_obj({
            "filter_type": obj.get("filterType"),
            "account_id": obj.get("accountId"),
            "subscription_id": obj.get("subscriptionId"),
            "invoice_schedule_id": obj.get("invoiceScheduleId"),
            "invoice_schedule_item_id": obj.get("invoiceScheduleItemId")
        })
        return _obj


