# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist
from zuora_sdk.models.get_payment_run_summary_total_values_response import GetPaymentRunSummaryTotalValuesResponse

class GetPaymentRunSummaryResponse(BaseModel):
    """
    GetPaymentRunSummaryResponse
    """
    number_of_credit_balance_adjustments: Optional[StrictInt] = Field(None, alias="numberOfCreditBalanceAdjustments", description="**Note:** This field is only available if you have the Credit Balance feature enabled.  The number of credit balance adjustments that are successfully processed in the payment run. ")
    number_of_credit_memos: Optional[StrictInt] = Field(None, alias="numberOfCreditMemos", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total number of credit memos that are successfully processed in the payment run. ")
    number_of_debit_memos: Optional[StrictInt] = Field(None, alias="numberOfDebitMemos", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total number of debit memos that are picked up for processing in the payment run. ")
    number_of_error_input_data: Optional[StrictInt] = Field(None, alias="numberOfErrorInputData", description="The number of input data that are processed with errors. ")
    number_of_errors: Optional[StrictInt] = Field(None, alias="numberOfErrors", description="The number of payments with the status of `Error` and `Processing`. ")
    number_of_input_data: Optional[StrictInt] = Field(None, alias="numberOfInputData", description="The total number of input data. ")
    number_of_invoices: Optional[StrictInt] = Field(None, alias="numberOfInvoices", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total number of invoices that are picked up for processing in the payment run. ")
    number_of_payments: Optional[StrictInt] = Field(None, alias="numberOfPayments", description="The number of payments that are successfully processed in the payment run. ")
    number_of_processed_input_data: Optional[StrictInt] = Field(None, alias="numberOfProcessedInputData", description="The number of input data that are successfully processed. ")
    number_of_receivables: Optional[StrictInt] = Field(None, alias="numberOfReceivables", description="The total number of receivables that are picked up for processing in the payment run.  The value of this field is the sum of the value of the `numberOfInvoices` field and that of the `numberOfDebitMemos` field. ")
    number_of_unapplied_payments: Optional[StrictInt] = Field(None, alias="numberOfUnappliedPayments", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The number of unapplied payments that are successfully processed in the payment run. ")
    number_of_unprocessed_debit_memos: Optional[StrictInt] = Field(None, alias="numberOfUnprocessedDebitMemos", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The number of debit memos with remaining positive balances after the payment run is completed. ")
    number_of_unprocessed_invoices: Optional[StrictInt] = Field(None, alias="numberOfUnprocessedInvoices", description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.  The number of invoices with remaining positive balances after the payment run is completed. ")
    number_of_unprocessed_receivables: Optional[StrictInt] = Field(None, alias="numberOfUnprocessedReceivables", description="The number of receivables with remaining positive balances after the payment run is completed. ")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully. ")
    total_values: Optional[conlist(GetPaymentRunSummaryTotalValuesResponse)] = Field(None, alias="totalValues", description="Container for total values. ")
    __properties = ["numberOfCreditBalanceAdjustments", "numberOfCreditMemos", "numberOfDebitMemos", "numberOfErrorInputData", "numberOfErrors", "numberOfInputData", "numberOfInvoices", "numberOfPayments", "numberOfProcessedInputData", "numberOfReceivables", "numberOfUnappliedPayments", "numberOfUnprocessedDebitMemos", "numberOfUnprocessedInvoices", "numberOfUnprocessedReceivables", "success", "totalValues"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetPaymentRunSummaryResponse:
        """Create an instance of GetPaymentRunSummaryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in total_values (list)
        _items = []
        if self.total_values:
            for _item in self.total_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['totalValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPaymentRunSummaryResponse:
        """Create an instance of GetPaymentRunSummaryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetPaymentRunSummaryResponse.parse_obj(obj)

        _obj = GetPaymentRunSummaryResponse.parse_obj({
            "number_of_credit_balance_adjustments": obj.get("numberOfCreditBalanceAdjustments"),
            "number_of_credit_memos": obj.get("numberOfCreditMemos"),
            "number_of_debit_memos": obj.get("numberOfDebitMemos"),
            "number_of_error_input_data": obj.get("numberOfErrorInputData"),
            "number_of_errors": obj.get("numberOfErrors"),
            "number_of_input_data": obj.get("numberOfInputData"),
            "number_of_invoices": obj.get("numberOfInvoices"),
            "number_of_payments": obj.get("numberOfPayments"),
            "number_of_processed_input_data": obj.get("numberOfProcessedInputData"),
            "number_of_receivables": obj.get("numberOfReceivables"),
            "number_of_unapplied_payments": obj.get("numberOfUnappliedPayments"),
            "number_of_unprocessed_debit_memos": obj.get("numberOfUnprocessedDebitMemos"),
            "number_of_unprocessed_invoices": obj.get("numberOfUnprocessedInvoices"),
            "number_of_unprocessed_receivables": obj.get("numberOfUnprocessedReceivables"),
            "success": obj.get("success"),
            "total_values": [GetPaymentRunSummaryTotalValuesResponse.from_dict(_item) for _item in obj.get("totalValues")] if obj.get("totalValues") is not None else None
        })
        return _obj


