# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from zuora_sdk.models.get_journal_entry_item_response import GetJournalEntryItemResponse
from zuora_sdk.models.get_journal_entry_segment_response import GetJournalEntrySegmentResponse
from zuora_sdk.models.journal_entry_status import JournalEntryStatus
from zuora_sdk.models.transferred_to_accounting_status import TransferredToAccountingStatus

class GetJournalEntryDetailTypeWithoutSuccess(BaseModel):
    """
    GetJournalEntryDetailTypeWithoutSuccess
    """
    accounting_period_name: Optional[StrictStr] = Field(None, alias="accountingPeriodName", description="Name of the accounting period that the journal entry belongs to. ")
    aggregate_currency: Optional[StrictBool] = Field(None, alias="aggregateCurrency", description="Returns true if the journal entry is aggregating currencies. That is, if the journal entry was created when the `Aggregate transactions with different currencies during a JournalRun` setting was configured to \"Yes\". Otherwise, returns `false`. ")
    currency: Optional[StrictStr] = Field(None, description="Currency used. ")
    home_currency: Optional[StrictStr] = Field(None, alias="homeCurrency", description="Home currency used. ")
    journal_entry_date: Optional[date] = Field(None, alias="journalEntryDate", description="Date of the journal entry. ")
    journal_entry_items: Optional[conlist(GetJournalEntryItemResponse)] = Field(None, alias="journalEntryItems", description="Key name that represents the list of journal entry items. ")
    notes: Optional[StrictStr] = Field(None, description="Additional information about this record. Character limit: 2,000 ")
    number: Optional[StrictStr] = Field(None, description="Journal entry number in the format JE-00000001. ")
    organization_label: Optional[StrictStr] = Field(None, alias="organizationLabel", description="Organization label. ")
    segments: Optional[conlist(GetJournalEntrySegmentResponse)] = Field(None, description="List of segments that apply to the summary journal entry. ")
    status: Optional[JournalEntryStatus] = None
    time_period_end: Optional[date] = Field(None, alias="timePeriodEnd", description="End date of time period included in the journal entry. ")
    time_period_start: Optional[date] = Field(None, alias="timePeriodStart", description="Start date of time period included in the journal entry. ")
    transaction_type: Optional[StrictStr] = Field(None, alias="transactionType", description="Transaction type of the transactions included in the summary journal entry. ")
    transfer_date_time: Optional[StrictStr] = Field(None, alias="transferDateTime", description="Date and time that transferredToAccounting was changed to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`. ")
    transferred_by: Optional[StrictStr] = Field(None, alias="transferredBy", description="User ID of the person who changed transferredToAccounting to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`. ")
    transferred_to_accounting: Optional[TransferredToAccountingStatus] = Field(None, alias="transferredToAccounting")
    additional_properties: Dict[str, Any] = {}
    __properties = ["accountingPeriodName", "aggregateCurrency", "currency", "homeCurrency", "journalEntryDate", "journalEntryItems", "notes", "number", "organizationLabel", "segments", "status", "timePeriodEnd", "timePeriodStart", "transactionType", "transferDateTime", "transferredBy", "transferredToAccounting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetJournalEntryDetailTypeWithoutSuccess:
        """Create an instance of GetJournalEntryDetailTypeWithoutSuccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in journal_entry_items (list)
        _items = []
        if self.journal_entry_items:
            for _item in self.journal_entry_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['journalEntryItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item in self.segments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['segments'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetJournalEntryDetailTypeWithoutSuccess:
        """Create an instance of GetJournalEntryDetailTypeWithoutSuccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetJournalEntryDetailTypeWithoutSuccess.parse_obj(obj)

        _obj = GetJournalEntryDetailTypeWithoutSuccess.parse_obj({
            "accounting_period_name": obj.get("accountingPeriodName"),
            "aggregate_currency": obj.get("aggregateCurrency"),
            "currency": obj.get("currency"),
            "home_currency": obj.get("homeCurrency"),
            "journal_entry_date": obj.get("journalEntryDate"),
            "journal_entry_items": [GetJournalEntryItemResponse.from_dict(_item) for _item in obj.get("journalEntryItems")] if obj.get("journalEntryItems") is not None else None,
            "notes": obj.get("notes"),
            "number": obj.get("number"),
            "organization_label": obj.get("organizationLabel"),
            "segments": [GetJournalEntrySegmentResponse.from_dict(_item) for _item in obj.get("segments")] if obj.get("segments") is not None else None,
            "status": obj.get("status"),
            "time_period_end": obj.get("timePeriodEnd"),
            "time_period_start": obj.get("timePeriodStart"),
            "transaction_type": obj.get("transactionType"),
            "transfer_date_time": obj.get("transferDateTime"),
            "transferred_by": obj.get("transferredBy"),
            "transferred_to_accounting": obj.get("transferredToAccounting")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


