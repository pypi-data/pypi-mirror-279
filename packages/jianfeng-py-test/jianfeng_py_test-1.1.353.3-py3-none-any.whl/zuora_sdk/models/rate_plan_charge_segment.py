# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator
from zuora_sdk.models.apply_discount_to import ApplyDiscountTo
from zuora_sdk.models.billing_period_alignment import BillingPeriodAlignment
from zuora_sdk.models.charge_function import ChargeFunction
from zuora_sdk.models.charge_model_configuration_for_subscription import ChargeModelConfigurationForSubscription
from zuora_sdk.models.commitment_type import CommitmentType
from zuora_sdk.models.delivery_schedule import DeliverySchedule
from zuora_sdk.models.discount_apply_detail import DiscountApplyDetail
from zuora_sdk.models.discount_level import DiscountLevel
from zuora_sdk.models.end_date_condition import EndDateCondition
from zuora_sdk.models.interval_pricing import IntervalPricing
from zuora_sdk.models.price_change_option import PriceChangeOption
from zuora_sdk.models.rate_plan_charge_tier import RatePlanChargeTier
from zuora_sdk.models.trigger_event import TriggerEvent
from zuora_sdk.models.up_to_periods_type import UpToPeriodsType
from zuora_sdk.models.validity_period_type import ValidityPeriodType

class RatePlanChargeSegment(BaseModel):
    """
    RatePlanChargeSegment
    """
    id: Optional[StrictStr] = None
    amended_by_order_on: Optional[date] = Field(None, alias="amendedByOrderOn", description="The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue. ")
    apply_discount_to: Optional[ApplyDiscountTo] = Field(None, alias="applyDiscountTo")
    charge_function: Optional[ChargeFunction] = Field(None, alias="chargeFunction")
    charge_model_configuration: Optional[ChargeModelConfigurationForSubscription] = Field(None, alias="chargeModelConfiguration")
    charged_through_date: Optional[date] = Field(None, alias="chargedThroughDate", description="The date through which a customer has been billed for the charge. ")
    commitment_type: Optional[CommitmentType] = Field(None, alias="commitmentType")
    prepaid_committed_amount: Optional[StrictStr] = Field(None, alias="prepaidCommittedAmount")
    credit_option: Optional[StrictStr] = Field(None, alias="creditOption", description="**Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information. ")
    currency: Optional[StrictStr] = Field(None, description="Currency used by the account. For example, `USD` or `EUR`.")
    delivery_schedule: Optional[DeliverySchedule] = Field(None, alias="deliverySchedule")
    number_of_deliveries: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="numberOfDeliveries")
    description: Optional[StrictStr] = Field(None, description="Description of the rate plan charge.")
    discount_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountAmount", description="The amount of the discount.")
    discount_apply_details: Optional[conlist(DiscountApplyDetail)] = Field(None, alias="discountApplyDetails", description="Container for the application details about a discount rate plan charge.   Only discount rate plan charges have values in this field. ")
    discount_class: Optional[StrictStr] = Field(None, alias="discountClass", description="The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes). ")
    discount_level: Optional[DiscountLevel] = Field(None, alias="discountLevel")
    discount_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountPercentage", description="The amount of the discount as a percentage. ")
    apply_to_billing_period_partially: Optional[StrictBool] = Field(None, alias="applyToBillingPeriodPartially")
    dmrc: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription. ")
    done: Optional[StrictBool] = Field(None, description="A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not been completed for the charge segment. ")
    drawdown_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="drawdownRate")
    drawdown_uom: Optional[StrictStr] = Field(None, alias="drawdownUom", description="Specifies the units to measure usage.")
    dtcv: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types. ")
    effective_end_date: Optional[date] = Field(None, alias="effectiveEndDate")
    effective_start_date: Optional[date] = Field(None, alias="effectiveStartDate")
    end_date_condition: Optional[EndDateCondition] = Field(None, alias="endDateCondition")
    included_units: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="includedUnits")
    input_argument_id: Optional[StrictStr] = Field(None, alias="inputArgumentId")
    is_committed: Optional[StrictBool] = Field(None, alias="isCommitted")
    is_prepaid: Optional[StrictBool] = Field(None, alias="isPrepaid")
    is_rollover: Optional[StrictBool] = Field(None, alias="isRollover")
    mrr: Optional[Union[StrictFloat, StrictInt]] = None
    original_order_date: Optional[date] = Field(None, alias="originalOrderDate")
    overage_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="overagePrice")
    prepaid_operation_type: Optional[StrictStr] = Field(None, alias="prepaidOperationType")
    prepaid_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="prepaidQuantity")
    prepaid_total_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="prepaidTotalQuantity")
    prepaid_uom: Optional[StrictStr] = Field(None, alias="prepaidUOM", description="Specifies the units to measure usage.")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    price_change_option: Optional[PriceChangeOption] = Field(None, alias="priceChangeOption")
    price_increase_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="priceIncreasePercentage")
    pricing_summary: Optional[StrictStr] = Field(None, alias="pricingSummary")
    processed_through_date: Optional[date] = Field(None, alias="processedThroughDate")
    rollover_apply: Optional[StrictStr] = Field(None, alias="rolloverApply")
    rollover_period_length: Optional[StrictInt] = Field(None, alias="rolloverPeriodLength")
    rollover_periods: Optional[StrictInt] = Field(None, alias="rolloverPeriods")
    proration_option: Optional[StrictStr] = Field(None, alias="prorationOption")
    segment: Optional[StrictInt] = None
    specific_end_date: Optional[date] = Field(None, alias="specificEndDate")
    subscription_charge_interval_pricing: Optional[conlist(IntervalPricing)] = Field(None, alias="subscriptionChargeIntervalPricing")
    tcv: Optional[Union[StrictFloat, StrictInt]] = None
    tiers: Optional[conlist(RatePlanChargeTier)] = None
    trigger_date: Optional[date] = Field(None, alias="triggerDate")
    billing_period_alignment: Optional[BillingPeriodAlignment] = Field(None, alias="billingPeriodAlignment")
    trigger_event: Optional[TriggerEvent] = Field(None, alias="triggerEvent")
    up_to_periods: Optional[StrictInt] = Field(None, alias="upToPeriods")
    up_to_periods_type: Optional[UpToPeriodsType] = Field(None, alias="upToPeriodsType")
    validity_period_type: Optional[ValidityPeriodType] = Field(None, alias="validityPeriodType")
    sales_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="salesPrice")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "amendedByOrderOn", "applyDiscountTo", "chargeFunction", "chargeModelConfiguration", "chargedThroughDate", "commitmentType", "prepaidCommittedAmount", "creditOption", "currency", "deliverySchedule", "numberOfDeliveries", "description", "discountAmount", "discountApplyDetails", "discountClass", "discountLevel", "discountPercentage", "applyToBillingPeriodPartially", "dmrc", "done", "drawdownRate", "drawdownUom", "dtcv", "effectiveEndDate", "effectiveStartDate", "endDateCondition", "includedUnits", "inputArgumentId", "isCommitted", "isPrepaid", "isRollover", "mrr", "originalOrderDate", "overagePrice", "prepaidOperationType", "prepaidQuantity", "prepaidTotalQuantity", "prepaidUOM", "quantity", "price", "priceChangeOption", "priceIncreasePercentage", "pricingSummary", "processedThroughDate", "rolloverApply", "rolloverPeriodLength", "rolloverPeriods", "prorationOption", "segment", "specificEndDate", "subscriptionChargeIntervalPricing", "tcv", "tiers", "triggerDate", "billingPeriodAlignment", "triggerEvent", "upToPeriods", "upToPeriodsType", "validityPeriodType", "salesPrice"]

    @validator('credit_option')
    def credit_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TimeBased', 'ConsumptionBased', 'FullCreditBack'):
            raise ValueError("must be one of enum values ('TimeBased', 'ConsumptionBased', 'FullCreditBack')")
        return value

    @validator('prepaid_operation_type')
    def prepaid_operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('topup', 'drawdown'):
            raise ValueError("must be one of enum values ('topup', 'drawdown')")
        return value

    @validator('rollover_apply')
    def rollover_apply_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ApplyFirst', 'ApplyLast'):
            raise ValueError("must be one of enum values ('ApplyFirst', 'ApplyLast')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RatePlanChargeSegment:
        """Create an instance of RatePlanChargeSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of charge_model_configuration
        if self.charge_model_configuration:
            _dict['chargeModelConfiguration'] = self.charge_model_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_schedule
        if self.delivery_schedule:
            _dict['deliverySchedule'] = self.delivery_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in discount_apply_details (list)
        _items = []
        if self.discount_apply_details:
            for _item in self.discount_apply_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['discountApplyDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_charge_interval_pricing (list)
        _items = []
        if self.subscription_charge_interval_pricing:
            for _item in self.subscription_charge_interval_pricing:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptionChargeIntervalPricing'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RatePlanChargeSegment:
        """Create an instance of RatePlanChargeSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RatePlanChargeSegment.parse_obj(obj)

        _obj = RatePlanChargeSegment.parse_obj({
            "id": obj.get("id"),
            "amended_by_order_on": obj.get("amendedByOrderOn"),
            "apply_discount_to": obj.get("applyDiscountTo"),
            "charge_function": obj.get("chargeFunction"),
            "charge_model_configuration": ChargeModelConfigurationForSubscription.from_dict(obj.get("chargeModelConfiguration")) if obj.get("chargeModelConfiguration") is not None else None,
            "charged_through_date": obj.get("chargedThroughDate"),
            "commitment_type": obj.get("commitmentType"),
            "prepaid_committed_amount": obj.get("prepaidCommittedAmount"),
            "credit_option": obj.get("creditOption"),
            "currency": obj.get("currency"),
            "delivery_schedule": DeliverySchedule.from_dict(obj.get("deliverySchedule")) if obj.get("deliverySchedule") is not None else None,
            "number_of_deliveries": obj.get("numberOfDeliveries"),
            "description": obj.get("description"),
            "discount_amount": obj.get("discountAmount"),
            "discount_apply_details": [DiscountApplyDetail.from_dict(_item) for _item in obj.get("discountApplyDetails")] if obj.get("discountApplyDetails") is not None else None,
            "discount_class": obj.get("discountClass"),
            "discount_level": obj.get("discountLevel"),
            "discount_percentage": obj.get("discountPercentage"),
            "apply_to_billing_period_partially": obj.get("applyToBillingPeriodPartially"),
            "dmrc": obj.get("dmrc"),
            "done": obj.get("done"),
            "drawdown_rate": obj.get("drawdownRate"),
            "drawdown_uom": obj.get("drawdownUom"),
            "dtcv": obj.get("dtcv"),
            "effective_end_date": obj.get("effectiveEndDate"),
            "effective_start_date": obj.get("effectiveStartDate"),
            "end_date_condition": obj.get("endDateCondition"),
            "included_units": obj.get("includedUnits"),
            "input_argument_id": obj.get("inputArgumentId"),
            "is_committed": obj.get("isCommitted"),
            "is_prepaid": obj.get("isPrepaid"),
            "is_rollover": obj.get("isRollover"),
            "mrr": obj.get("mrr"),
            "original_order_date": obj.get("originalOrderDate"),
            "overage_price": obj.get("overagePrice"),
            "prepaid_operation_type": obj.get("prepaidOperationType"),
            "prepaid_quantity": obj.get("prepaidQuantity"),
            "prepaid_total_quantity": obj.get("prepaidTotalQuantity"),
            "prepaid_uom": obj.get("prepaidUOM"),
            "quantity": obj.get("quantity"),
            "price": obj.get("price"),
            "price_change_option": obj.get("priceChangeOption"),
            "price_increase_percentage": obj.get("priceIncreasePercentage"),
            "pricing_summary": obj.get("pricingSummary"),
            "processed_through_date": obj.get("processedThroughDate"),
            "rollover_apply": obj.get("rolloverApply"),
            "rollover_period_length": obj.get("rolloverPeriodLength"),
            "rollover_periods": obj.get("rolloverPeriods"),
            "proration_option": obj.get("prorationOption"),
            "segment": obj.get("segment"),
            "specific_end_date": obj.get("specificEndDate"),
            "subscription_charge_interval_pricing": [IntervalPricing.from_dict(_item) for _item in obj.get("subscriptionChargeIntervalPricing")] if obj.get("subscriptionChargeIntervalPricing") is not None else None,
            "tcv": obj.get("tcv"),
            "tiers": [RatePlanChargeTier.from_dict(_item) for _item in obj.get("tiers")] if obj.get("tiers") is not None else None,
            "trigger_date": obj.get("triggerDate"),
            "billing_period_alignment": obj.get("billingPeriodAlignment"),
            "trigger_event": obj.get("triggerEvent"),
            "up_to_periods": obj.get("upToPeriods"),
            "up_to_periods_type": obj.get("upToPeriodsType"),
            "validity_period_type": obj.get("validityPeriodType"),
            "sales_price": obj.get("salesPrice")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


