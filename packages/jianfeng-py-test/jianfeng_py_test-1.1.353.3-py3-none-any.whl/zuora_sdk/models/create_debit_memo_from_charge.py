# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from zuora_sdk.models.custom_rates import CustomRates
from zuora_sdk.models.debit_memo_item_from_charge_detail import DebitMemoItemFromChargeDetail

class CreateDebitMemoFromCharge(BaseModel):
    """
    CreateDebitMemoFromCharge
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the account associated with the debit memo.  **Note**: When creating debit memos from product rate plan charges, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The number of the account associated with the debit memo.  **Note**: When creating debit memos from product rate plan charges, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.")
    auto_pay: Optional[StrictBool] = Field(None, alias="autoPay", description="Whether debit memos are automatically picked up for processing in the corresponding payment run.   By default, debit memos are automatically picked up for processing in the corresponding payment run. ")
    auto_post: Optional[StrictBool] = Field(False, alias="autoPost", description="Whether to automatically post the debit memo after it is created.   Setting this field to `true`, you do not need to separately call the [Post a debit memo](https://www.zuora.com/developer/api-references/api/operation/Put_PostDebitMemo) operation to post the debit memo. ")
    charges: Optional[conlist(DebitMemoItemFromChargeDetail, max_items=1000)] = Field(None, description="Container for product rate plan charges. The maximum number of items is 1,000.")
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Comments about the debit memo.")
    custom_rates: Optional[conlist(CustomRates, max_items=2)] = Field(None, alias="customRates", description="It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item or Reporting currency item or both).  **Note**: The API custom rate feature is permission controlled.")
    due_date: Optional[date] = Field(None, alias="dueDate", description="The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="The date when the debit memo takes effect.")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.")
    currency: Optional[StrictStr] = Field(None, description="The code of a currency as defined in Billing Settings through the Zuora UI.  If you do not specify a currency during debit memo creation, the default account currency is applied. The currency that you specify in the request must be configured and activated in Billing Settings.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Multiple_Currencies\" target=\"_blank\">Multiple Currencies</a> feature in the **Early Adopter** phase enabled. ")
    number: Optional[StrictStr] = Field(None, description="A customized memo number with the following format requirements:  - Max length: 32 - Acceptable characters: a-z,A-Z,0-9,-,_,  The value must be unique in the system, otherwise it may cause issues with bill runs and subscribe/amend. If it is not provided, memo number will be auto-generated. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "accountId", "accountNumber", "autoPay", "autoPost", "charges", "comment", "customRates", "dueDate", "effectiveDate", "reasonCode", "currency", "number"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateDebitMemoFromCharge:
        """Create an instance of CreateDebitMemoFromCharge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_rates (list)
        _items = []
        if self.custom_rates:
            for _item in self.custom_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customRates'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateDebitMemoFromCharge:
        """Create an instance of CreateDebitMemoFromCharge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateDebitMemoFromCharge.parse_obj(obj)

        _obj = CreateDebitMemoFromCharge.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "auto_pay": obj.get("autoPay"),
            "auto_post": obj.get("autoPost") if obj.get("autoPost") is not None else False,
            "charges": [DebitMemoItemFromChargeDetail.from_dict(_item) for _item in obj.get("charges")] if obj.get("charges") is not None else None,
            "comment": obj.get("comment"),
            "custom_rates": [CustomRates.from_dict(_item) for _item in obj.get("customRates")] if obj.get("customRates") is not None else None,
            "due_date": obj.get("dueDate"),
            "effective_date": obj.get("effectiveDate"),
            "reason_code": obj.get("reasonCode"),
            "currency": obj.get("currency"),
            "number": obj.get("number")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


