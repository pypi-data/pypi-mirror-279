# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from zuora_sdk.models.failed_reason import FailedReason
from zuora_sdk.models.reverse_credit_memo_response_credit_memo import ReverseCreditMemoResponseCreditMemo
from zuora_sdk.models.reverse_credit_memo_response_debit_memo import ReverseCreditMemoResponseDebitMemo

class ReverseCreditMemoResponse(BaseModel):
    """
    ReverseCreditMemoResponse
    """
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    credit_memo: Optional[ReverseCreditMemoResponseCreditMemo] = Field(None, alias="creditMemo")
    debit_memo: Optional[ReverseCreditMemoResponseDebitMemo] = Field(None, alias="debitMemo")
    __properties = ["processId", "requestId", "reasons", "success", "creditMemo", "debitMemo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReverseCreditMemoResponse:
        """Create an instance of ReverseCreditMemoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of credit_memo
        if self.credit_memo:
            _dict['creditMemo'] = self.credit_memo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debit_memo
        if self.debit_memo:
            _dict['debitMemo'] = self.debit_memo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReverseCreditMemoResponse:
        """Create an instance of ReverseCreditMemoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReverseCreditMemoResponse.parse_obj(obj)

        _obj = ReverseCreditMemoResponse.parse_obj({
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "credit_memo": ReverseCreditMemoResponseCreditMemo.from_dict(obj.get("creditMemo")) if obj.get("creditMemo") is not None else None,
            "debit_memo": ReverseCreditMemoResponseDebitMemo.from_dict(obj.get("debitMemo")) if obj.get("debitMemo") is not None else None
        })
        return _obj


