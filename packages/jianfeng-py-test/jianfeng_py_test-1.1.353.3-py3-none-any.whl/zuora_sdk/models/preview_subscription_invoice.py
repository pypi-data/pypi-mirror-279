# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from zuora_sdk.models.preview_subscription_invoice_item import PreviewSubscriptionInvoiceItem

class PreviewSubscriptionInvoice(BaseModel):
    """
    Container for invoices.    **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. Also, the response structure is changed and the following invoice related response fields are moved to this **invoice** container:       * amount    * amountWithoutTax    * taxAmount    * invoiceItems    * targetDate   # noqa: E501
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Invoice amount.")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="Invoice amount minus tax. ")
    invoice_items: Optional[conlist(PreviewSubscriptionInvoiceItem)] = Field(None, alias="invoiceItems", description="Container for invoice items. ")
    target_date: Optional[StrictStr] = Field(None, alias="targetDate", description="Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.  **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information. ")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="The tax amount of the invoice. ")
    __properties = ["amount", "amountWithoutTax", "invoiceItems", "targetDate", "taxAmount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewSubscriptionInvoice:
        """Create an instance of PreviewSubscriptionInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item in self.invoice_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoiceItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewSubscriptionInvoice:
        """Create an instance of PreviewSubscriptionInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewSubscriptionInvoice.parse_obj(obj)

        _obj = PreviewSubscriptionInvoice.parse_obj({
            "amount": obj.get("amount"),
            "amount_without_tax": obj.get("amountWithoutTax"),
            "invoice_items": [PreviewSubscriptionInvoiceItem.from_dict(_item) for _item in obj.get("invoiceItems")] if obj.get("invoiceItems") is not None else None,
            "target_date": obj.get("targetDate"),
            "tax_amount": obj.get("taxAmount")
        })
        return _obj


