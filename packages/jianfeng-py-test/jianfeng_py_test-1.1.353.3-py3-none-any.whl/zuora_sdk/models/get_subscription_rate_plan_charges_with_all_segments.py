# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conint, conlist, validator
from zuora_sdk.models.apply_discount_to import ApplyDiscountTo
from zuora_sdk.models.billing_period import BillingPeriod
from zuora_sdk.models.billing_period_alignment import BillingPeriodAlignment
from zuora_sdk.models.billing_timing import BillingTiming
from zuora_sdk.models.charge_function import ChargeFunction
from zuora_sdk.models.charge_list_price_base import ChargeListPriceBase
from zuora_sdk.models.charge_model import ChargeModel
from zuora_sdk.models.charge_model_configuration_for_subscription import ChargeModelConfigurationForSubscription
from zuora_sdk.models.charge_type import ChargeType
from zuora_sdk.models.commitment_type import CommitmentType
from zuora_sdk.models.delivery_schedule import DeliverySchedule
from zuora_sdk.models.discount_apply_detail import DiscountApplyDetail
from zuora_sdk.models.discount_level import DiscountLevel
from zuora_sdk.models.end_date_condition import EndDateCondition
from zuora_sdk.models.interval_pricing import IntervalPricing
from zuora_sdk.models.overage_calculation_option import OverageCalculationOption
from zuora_sdk.models.overage_unused_units_credit_option import OverageUnusedUnitsCreditOption
from zuora_sdk.models.price_change_option import PriceChangeOption
from zuora_sdk.models.product_category import ProductCategory
from zuora_sdk.models.rate_plan_charge_segment import RatePlanChargeSegment
from zuora_sdk.models.rate_plan_charge_tier import RatePlanChargeTier
from zuora_sdk.models.rating_group import RatingGroup
from zuora_sdk.models.smoothing_model import SmoothingModel
from zuora_sdk.models.trigger_event import TriggerEvent
from zuora_sdk.models.up_to_periods_type import UpToPeriodsType
from zuora_sdk.models.usage_record_rating_option import UsageRecordRatingOption
from zuora_sdk.models.validity_period_type import ValidityPeriodType

class GetSubscriptionRatePlanChargesWithAllSegments(BaseModel):
    """
    GetSubscriptionRatePlanChargesWithAllSegments
    """
    billing_day: Optional[StrictStr] = Field(None, alias="billingDay")
    billing_period: Optional[BillingPeriod] = Field(None, alias="billingPeriod")
    billing_period_alignment: Optional[BillingPeriodAlignment] = Field(None, alias="billingPeriodAlignment")
    billing_timing: Optional[BillingTiming] = Field(None, alias="billingTiming")
    charge_segments: Optional[conlist(RatePlanChargeSegment)] = Field(None, alias="chargeSegments", description="Billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.    Values:  * `DefaultFromCustomer` * `SpecificDayofMonth(# of the month)` * `SubscriptionStartDay` * `ChargeTriggerDay` * `SpecificDayofWeek/dayofweek`: in which dayofweek is the day in the week you define your billing periods to start.  In the response data, a day-of-the-month ordinal value (`first`-`31st`) appears in place of the hash sign above (\"#\"). If this value exceeds the number of days in a particular month, the last day of the month is used as the BCD. ")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBillingFromRevenueAccounting")
    exclude_item_booking_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBookingFromRevenueAccounting")
    invoice_schedule_id: Optional[StrictStr] = Field(None, alias="invoiceScheduleId")
    is_allocation_eligible: Optional[StrictBool] = Field(None, alias="isAllocationEligible")
    is_unbilled: Optional[StrictBool] = Field(None, alias="isUnbilled")
    list_price_base: Optional[ChargeListPriceBase] = Field(None, alias="listPriceBase")
    model: Optional[ChargeModel] = None
    name: Optional[StrictStr] = None
    number: Optional[StrictStr] = None
    number_of_periods: Optional[StrictInt] = Field(None, alias="numberOfPeriods")
    original_charge_id: Optional[StrictStr] = Field(None, alias="originalChargeId")
    overage_calculation_option: Optional[OverageCalculationOption] = Field(None, alias="overageCalculationOption")
    overage_unused_units_credit_option: Optional[OverageUnusedUnitsCreditOption] = Field(None, alias="overageUnusedUnitsCreditOption")
    product_category: Optional[ProductCategory] = Field(None, alias="productCategory")
    product_class: Optional[StrictStr] = Field(None, alias="productClass")
    product_family: Optional[StrictStr] = Field(None, alias="productFamily")
    product_line: Optional[StrictStr] = Field(None, alias="productLine")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="productRatePlanChargeId")
    product_rate_plan_charge_number: Optional[StrictStr] = Field(None, alias="productRatePlanChargeNumber")
    rating_group: Optional[RatingGroup] = Field(None, alias="ratingGroup")
    smoothing_model: Optional[SmoothingModel] = Field(None, alias="smoothingModel")
    specific_billing_period: Optional[StrictInt] = Field(None, alias="specificBillingPeriod")
    specific_list_price_base: Optional[conint(strict=True, le=200, ge=1)] = Field(None, alias="specificListPriceBase")
    type: Optional[ChargeType] = None
    unused_units_credit_rates: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unusedUnitsCreditRates")
    uom: Optional[StrictStr] = Field(None, description="Specifies the units to measure usage.")
    usage_record_rating_option: Optional[UsageRecordRatingOption] = Field(None, alias="usageRecordRatingOption")
    version: Optional[StrictInt] = None
    amended_by_order_on: Optional[date] = Field(None, alias="amendedByOrderOn", description="The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue. ")
    apply_discount_to: Optional[ApplyDiscountTo] = Field(None, alias="applyDiscountTo")
    charge_function: Optional[ChargeFunction] = Field(None, alias="chargeFunction")
    charge_model_configuration: Optional[ChargeModelConfigurationForSubscription] = Field(None, alias="chargeModelConfiguration")
    charged_through_date: Optional[date] = Field(None, alias="chargedThroughDate", description="The date through which a customer has been billed for the charge. ")
    commitment_type: Optional[CommitmentType] = Field(None, alias="commitmentType")
    prepaid_committed_amount: Optional[StrictStr] = Field(None, alias="prepaidCommittedAmount")
    product_charge_definition_id: Optional[StrictStr] = Field(None, alias="productChargeDefinitionId")
    is_stacked_discount: Optional[StrictBool] = Field(None, alias="isStackedDiscount")
    reflect_discount_in_net_amount: Optional[StrictBool] = Field(None, alias="reflectDiscountInNetAmount")
    centralized_price: Optional[StrictBool] = Field(None, alias="centralizedPrice")
    number_of_deliveries: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="numberOfDeliveries")
    credit_option: Optional[StrictStr] = Field(None, alias="creditOption", description="**Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information. ")
    currency: Optional[StrictStr] = Field(None, description="Currency used by the account. For example, `USD` or `EUR`.")
    delivery_schedule: Optional[DeliverySchedule] = Field(None, alias="deliverySchedule")
    description: Optional[StrictStr] = Field(None, description="Description of the rate plan charge.")
    discount_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountAmount", description="The amount of the discount.")
    discount_apply_details: Optional[conlist(DiscountApplyDetail)] = Field(None, alias="discountApplyDetails", description="Container for the application details about a discount rate plan charge.   Only discount rate plan charges have values in this field. ")
    discount_class: Optional[StrictStr] = Field(None, alias="discountClass", description="The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes). ")
    discount_level: Optional[DiscountLevel] = Field(None, alias="discountLevel")
    discount_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountPercentage", description="The amount of the discount as a percentage. ")
    apply_to_billing_period_partially: Optional[StrictBool] = Field(None, alias="applyToBillingPeriodPartially", description="Allow the discount duration to be aligned with the billing period partially. **Note**: This field is only available if you have the Enhanced Discounts feature enabled. ")
    dmrc: Optional[StrictStr] = Field(None, description="The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription. ")
    done: Optional[StrictBool] = Field(None, description="A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not been completed for the charge segment. ")
    drawdown_rate: Optional[StrictStr] = Field(None, alias="drawdownRate")
    drawdown_uom: Optional[StrictStr] = Field(None, alias="drawdownUom", description="Specifies the units to measure usage.")
    dtcv: Optional[StrictStr] = Field(None, description="After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types. ")
    effective_end_date: Optional[date] = Field(None, alias="effectiveEndDate")
    effective_start_date: Optional[date] = Field(None, alias="effectiveStartDate")
    end_date_condition: Optional[EndDateCondition] = Field(None, alias="endDateCondition")
    id: Optional[StrictStr] = None
    included_units: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="includedUnits")
    overage_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="overagePrice")
    input_argument_id: Optional[StrictStr] = Field(None, alias="inputArgumentId")
    is_committed: Optional[StrictBool] = Field(None, alias="isCommitted")
    is_prepaid: Optional[StrictBool] = Field(None, alias="isPrepaid")
    is_rollover: Optional[StrictBool] = Field(None, alias="isRollover")
    mrr: Optional[StrictStr] = None
    original_order_date: Optional[date] = Field(None, alias="originalOrderDate")
    prepaid_operation_type: Optional[StrictStr] = Field(None, alias="prepaidOperationType")
    prepaid_quantity: Optional[StrictStr] = Field(None, alias="prepaidQuantity")
    prepaid_total_quantity: Optional[StrictStr] = Field(None, alias="prepaidTotalQuantity")
    prepaid_uom: Optional[StrictStr] = Field(None, alias="prepaidUOM", description="Specifies the units to measure usage.")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    price_change_option: Optional[PriceChangeOption] = Field(None, alias="priceChangeOption")
    price_increase_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="priceIncreasePercentage")
    pricing_summary: Optional[StrictStr] = Field(None, alias="pricingSummary")
    processed_through_date: Optional[date] = Field(None, alias="processedThroughDate")
    rollover_apply: Optional[StrictStr] = Field(None, alias="rolloverApply")
    rollover_period_length: Optional[StrictInt] = Field(None, alias="rolloverPeriodLength")
    rollover_periods: Optional[StrictInt] = Field(None, alias="rolloverPeriods")
    proration_option: Optional[StrictStr] = Field(None, alias="prorationOption")
    segment: Optional[StrictInt] = None
    specific_end_date: Optional[date] = Field(None, alias="specificEndDate")
    subscription_charge_interval_pricing: Optional[conlist(IntervalPricing)] = Field(None, alias="subscriptionChargeIntervalPricing")
    tcv: Optional[StrictStr] = None
    tiers: Optional[conlist(RatePlanChargeTier)] = None
    trigger_date: Optional[date] = Field(None, alias="triggerDate")
    trigger_event: Optional[TriggerEvent] = Field(None, alias="triggerEvent")
    upsell_origin_charge_number: Optional[StrictStr] = Field(None, alias="upsellOriginChargeNumber", description="**Note**: The Quantity Upsell feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).  The identifier of the original upselling charge associated with the current charge. ")
    up_to_periods: Optional[StrictInt] = Field(None, alias="upToPeriods")
    up_to_periods_type: Optional[UpToPeriodsType] = Field(None, alias="upToPeriodsType")
    validity_period_type: Optional[ValidityPeriodType] = Field(None, alias="validityPeriodType")
    price_upsell_quantity_stacked: Optional[StrictBool] = Field(None, alias="priceUpsellQuantityStacked", description="This field is availabe when PriceUpsellQuantityStacked permission enabled")
    pob_policy: Optional[StrictStr] = Field(None, alias="pobPolicy", description="The POB policy type, it is available when permission EnableAdditionalRevenueFields is on ")
    sales_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="salesPrice")
    __properties = ["billingDay", "billingPeriod", "billingPeriodAlignment", "billingTiming", "chargeSegments", "excludeItemBillingFromRevenueAccounting", "excludeItemBookingFromRevenueAccounting", "invoiceScheduleId", "isAllocationEligible", "isUnbilled", "listPriceBase", "model", "name", "number", "numberOfPeriods", "originalChargeId", "overageCalculationOption", "overageUnusedUnitsCreditOption", "productCategory", "productClass", "productFamily", "productLine", "productRatePlanChargeId", "productRatePlanChargeNumber", "ratingGroup", "smoothingModel", "specificBillingPeriod", "specificListPriceBase", "type", "unusedUnitsCreditRates", "uom", "usageRecordRatingOption", "version", "amendedByOrderOn", "applyDiscountTo", "chargeFunction", "chargeModelConfiguration", "chargedThroughDate", "commitmentType", "prepaidCommittedAmount", "productChargeDefinitionId", "isStackedDiscount", "reflectDiscountInNetAmount", "centralizedPrice", "numberOfDeliveries", "creditOption", "currency", "deliverySchedule", "description", "discountAmount", "discountApplyDetails", "discountClass", "discountLevel", "discountPercentage", "applyToBillingPeriodPartially", "dmrc", "done", "drawdownRate", "drawdownUom", "dtcv", "effectiveEndDate", "effectiveStartDate", "endDateCondition", "id", "includedUnits", "overagePrice", "inputArgumentId", "isCommitted", "isPrepaid", "isRollover", "mrr", "originalOrderDate", "prepaidOperationType", "prepaidQuantity", "prepaidTotalQuantity", "prepaidUOM", "quantity", "price", "priceChangeOption", "priceIncreasePercentage", "pricingSummary", "processedThroughDate", "rolloverApply", "rolloverPeriodLength", "rolloverPeriods", "prorationOption", "segment", "specificEndDate", "subscriptionChargeIntervalPricing", "tcv", "tiers", "triggerDate", "triggerEvent", "upsellOriginChargeNumber", "upToPeriods", "upToPeriodsType", "validityPeriodType", "priceUpsellQuantityStacked", "pobPolicy", "salesPrice"]

    @validator('credit_option')
    def credit_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TimeBased', 'ConsumptionBased', 'FullCreditBack'):
            raise ValueError("must be one of enum values ('TimeBased', 'ConsumptionBased', 'FullCreditBack')")
        return value

    @validator('prepaid_operation_type')
    def prepaid_operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('topup', 'drawdown'):
            raise ValueError("must be one of enum values ('topup', 'drawdown')")
        return value

    @validator('rollover_apply')
    def rollover_apply_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ApplyFirst', 'ApplyLast'):
            raise ValueError("must be one of enum values ('ApplyFirst', 'ApplyLast')")
        return value

    @validator('pob_policy')
    def pob_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Placeholder'):
            raise ValueError("must be one of enum values ('Placeholder')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetSubscriptionRatePlanChargesWithAllSegments:
        """Create an instance of GetSubscriptionRatePlanChargesWithAllSegments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in charge_segments (list)
        _items = []
        if self.charge_segments:
            for _item in self.charge_segments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeSegments'] = _items
        # override the default output from pydantic by calling `to_dict()` of charge_model_configuration
        if self.charge_model_configuration:
            _dict['chargeModelConfiguration'] = self.charge_model_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_schedule
        if self.delivery_schedule:
            _dict['deliverySchedule'] = self.delivery_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in discount_apply_details (list)
        _items = []
        if self.discount_apply_details:
            for _item in self.discount_apply_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['discountApplyDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_charge_interval_pricing (list)
        _items = []
        if self.subscription_charge_interval_pricing:
            for _item in self.subscription_charge_interval_pricing:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptionChargeIntervalPricing'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetSubscriptionRatePlanChargesWithAllSegments:
        """Create an instance of GetSubscriptionRatePlanChargesWithAllSegments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetSubscriptionRatePlanChargesWithAllSegments.parse_obj(obj)

        _obj = GetSubscriptionRatePlanChargesWithAllSegments.parse_obj({
            "billing_day": obj.get("billingDay"),
            "billing_period": obj.get("billingPeriod"),
            "billing_period_alignment": obj.get("billingPeriodAlignment"),
            "billing_timing": obj.get("billingTiming"),
            "charge_segments": [RatePlanChargeSegment.from_dict(_item) for _item in obj.get("chargeSegments")] if obj.get("chargeSegments") is not None else None,
            "exclude_item_billing_from_revenue_accounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "exclude_item_booking_from_revenue_accounting": obj.get("excludeItemBookingFromRevenueAccounting"),
            "invoice_schedule_id": obj.get("invoiceScheduleId"),
            "is_allocation_eligible": obj.get("isAllocationEligible"),
            "is_unbilled": obj.get("isUnbilled"),
            "list_price_base": obj.get("listPriceBase"),
            "model": obj.get("model"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "number_of_periods": obj.get("numberOfPeriods"),
            "original_charge_id": obj.get("originalChargeId"),
            "overage_calculation_option": obj.get("overageCalculationOption"),
            "overage_unused_units_credit_option": obj.get("overageUnusedUnitsCreditOption"),
            "product_category": obj.get("productCategory"),
            "product_class": obj.get("productClass"),
            "product_family": obj.get("productFamily"),
            "product_line": obj.get("productLine"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "product_rate_plan_charge_number": obj.get("productRatePlanChargeNumber"),
            "rating_group": obj.get("ratingGroup"),
            "smoothing_model": obj.get("smoothingModel"),
            "specific_billing_period": obj.get("specificBillingPeriod"),
            "specific_list_price_base": obj.get("specificListPriceBase"),
            "type": obj.get("type"),
            "unused_units_credit_rates": obj.get("unusedUnitsCreditRates"),
            "uom": obj.get("uom"),
            "usage_record_rating_option": obj.get("usageRecordRatingOption"),
            "version": obj.get("version"),
            "amended_by_order_on": obj.get("amendedByOrderOn"),
            "apply_discount_to": obj.get("applyDiscountTo"),
            "charge_function": obj.get("chargeFunction"),
            "charge_model_configuration": ChargeModelConfigurationForSubscription.from_dict(obj.get("chargeModelConfiguration")) if obj.get("chargeModelConfiguration") is not None else None,
            "charged_through_date": obj.get("chargedThroughDate"),
            "commitment_type": obj.get("commitmentType"),
            "prepaid_committed_amount": obj.get("prepaidCommittedAmount"),
            "product_charge_definition_id": obj.get("productChargeDefinitionId"),
            "is_stacked_discount": obj.get("isStackedDiscount"),
            "reflect_discount_in_net_amount": obj.get("reflectDiscountInNetAmount"),
            "centralized_price": obj.get("centralizedPrice"),
            "number_of_deliveries": obj.get("numberOfDeliveries"),
            "credit_option": obj.get("creditOption"),
            "currency": obj.get("currency"),
            "delivery_schedule": DeliverySchedule.from_dict(obj.get("deliverySchedule")) if obj.get("deliverySchedule") is not None else None,
            "description": obj.get("description"),
            "discount_amount": obj.get("discountAmount"),
            "discount_apply_details": [DiscountApplyDetail.from_dict(_item) for _item in obj.get("discountApplyDetails")] if obj.get("discountApplyDetails") is not None else None,
            "discount_class": obj.get("discountClass"),
            "discount_level": obj.get("discountLevel"),
            "discount_percentage": obj.get("discountPercentage"),
            "apply_to_billing_period_partially": obj.get("applyToBillingPeriodPartially"),
            "dmrc": obj.get("dmrc"),
            "done": obj.get("done"),
            "drawdown_rate": obj.get("drawdownRate"),
            "drawdown_uom": obj.get("drawdownUom"),
            "dtcv": obj.get("dtcv"),
            "effective_end_date": obj.get("effectiveEndDate"),
            "effective_start_date": obj.get("effectiveStartDate"),
            "end_date_condition": obj.get("endDateCondition"),
            "id": obj.get("id"),
            "included_units": obj.get("includedUnits"),
            "overage_price": obj.get("overagePrice"),
            "input_argument_id": obj.get("inputArgumentId"),
            "is_committed": obj.get("isCommitted"),
            "is_prepaid": obj.get("isPrepaid"),
            "is_rollover": obj.get("isRollover"),
            "mrr": obj.get("mrr"),
            "original_order_date": obj.get("originalOrderDate"),
            "prepaid_operation_type": obj.get("prepaidOperationType"),
            "prepaid_quantity": obj.get("prepaidQuantity"),
            "prepaid_total_quantity": obj.get("prepaidTotalQuantity"),
            "prepaid_uom": obj.get("prepaidUOM"),
            "quantity": obj.get("quantity"),
            "price": obj.get("price"),
            "price_change_option": obj.get("priceChangeOption"),
            "price_increase_percentage": obj.get("priceIncreasePercentage"),
            "pricing_summary": obj.get("pricingSummary"),
            "processed_through_date": obj.get("processedThroughDate"),
            "rollover_apply": obj.get("rolloverApply"),
            "rollover_period_length": obj.get("rolloverPeriodLength"),
            "rollover_periods": obj.get("rolloverPeriods"),
            "proration_option": obj.get("prorationOption"),
            "segment": obj.get("segment"),
            "specific_end_date": obj.get("specificEndDate"),
            "subscription_charge_interval_pricing": [IntervalPricing.from_dict(_item) for _item in obj.get("subscriptionChargeIntervalPricing")] if obj.get("subscriptionChargeIntervalPricing") is not None else None,
            "tcv": obj.get("tcv"),
            "tiers": [RatePlanChargeTier.from_dict(_item) for _item in obj.get("tiers")] if obj.get("tiers") is not None else None,
            "trigger_date": obj.get("triggerDate"),
            "trigger_event": obj.get("triggerEvent"),
            "upsell_origin_charge_number": obj.get("upsellOriginChargeNumber"),
            "up_to_periods": obj.get("upToPeriods"),
            "up_to_periods_type": obj.get("upToPeriodsType"),
            "validity_period_type": obj.get("validityPeriodType"),
            "price_upsell_quantity_stacked": obj.get("priceUpsellQuantityStacked"),
            "pob_policy": obj.get("pobPolicy"),
            "sales_price": obj.get("salesPrice")
        })
        return _obj


