# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from zuora_sdk.models.refund_request_finance_information import RefundRequestFinanceInformation

class UpdateRefundRequest(BaseModel):
    """
    UpdateRefundRequest
    """
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Comments about the refund. ")
    finance_information: Optional[RefundRequestFinanceInformation] = Field(None, alias="financeInformation")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. ")
    reference_id: Optional[constr(strict=True, max_length=100, min_length=0)] = Field(None, alias="referenceId", description="The transaction ID returned by the payment gateway. Use this field to reconcile refunds between your gateway and Zuora Payments.  You can only update the reference ID for external refunds. ")
    gateway_reconciliation_status: Optional[constr(strict=True, max_length=64)] = Field(None, alias="gatewayReconciliationStatus")
    gateway_reconciliation_reason: Optional[constr(strict=True, max_length=64)] = Field(None, alias="gatewayReconciliationReason")
    payout_id: Optional[constr(strict=True, max_length=64)] = Field(None, alias="payoutId")
    additional_properties: Dict[str, Any] = {}
    __properties = ["comment", "financeInformation", "reasonCode", "referenceId", "gatewayReconciliationStatus", "gatewayReconciliationReason", "payoutId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateRefundRequest:
        """Create an instance of UpdateRefundRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateRefundRequest:
        """Create an instance of UpdateRefundRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateRefundRequest.parse_obj(obj)

        _obj = UpdateRefundRequest.parse_obj({
            "comment": obj.get("comment"),
            "finance_information": RefundRequestFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "reason_code": obj.get("reasonCode"),
            "reference_id": obj.get("referenceId"),
            "gateway_reconciliation_status": obj.get("gatewayReconciliationStatus"),
            "gateway_reconciliation_reason": obj.get("gatewayReconciliationReason"),
            "payout_id": obj.get("payoutId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


