# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from zuora_sdk.models.unapply_credit_memo_to_debit_memo import UnapplyCreditMemoToDebitMemo
from zuora_sdk.models.unapply_credit_memo_to_invoice import UnapplyCreditMemoToInvoice

class UnapplyCreditMemoRequest(BaseModel):
    """
    UnapplyCreditMemoRequest
    """
    debit_memos: Optional[conlist(UnapplyCreditMemoToDebitMemo)] = Field(None, alias="debitMemos", description="Container for debit memos that the credit memo is unapplied from. The maximum number of debit memos is 1,000. ")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="The date when the credit memo is unapplied. ")
    invoices: Optional[conlist(UnapplyCreditMemoToInvoice)] = Field(None, description="Container for invoices that the credit memo is unapplied from. The maximum number of invoices is 1,000. ")
    __properties = ["debitMemos", "effectiveDate", "invoices"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UnapplyCreditMemoRequest:
        """Create an instance of UnapplyCreditMemoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in debit_memos (list)
        _items = []
        if self.debit_memos:
            for _item in self.debit_memos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['debitMemos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item in self.invoices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UnapplyCreditMemoRequest:
        """Create an instance of UnapplyCreditMemoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UnapplyCreditMemoRequest.parse_obj(obj)

        _obj = UnapplyCreditMemoRequest.parse_obj({
            "debit_memos": [UnapplyCreditMemoToDebitMemo.from_dict(_item) for _item in obj.get("debitMemos")] if obj.get("debitMemos") is not None else None,
            "effective_date": obj.get("effectiveDate"),
            "invoices": [UnapplyCreditMemoToInvoice.from_dict(_item) for _item in obj.get("invoices")] if obj.get("invoices") is not None else None
        })
        return _obj


