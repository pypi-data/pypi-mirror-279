# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from zuora_sdk.models.ramp_interval_charge_metrics import RampIntervalChargeMetrics

class RampIntervalMetrics(BaseModel):
    """
    RampIntervalMetrics
    """
    description: Optional[StrictStr] = Field(None, description="The short description of the interval.")
    discount_tcb: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountTcb", description="The discount amount for the TCB.")
    discount_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountTcv", description="The discount amount for the TCV.")
    end_date: Optional[date] = Field(None, alias="endDate", description="The end date of the interval.")
    gross_tcb: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="grossTcb", description="The gross TCB value before discount charges are applied.")
    gross_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="grossTcv", description="The gross TCV value before discount charges are applied.")
    interval_metrics: Optional[conlist(RampIntervalChargeMetrics)] = Field(None, alias="intervalMetrics", description="Container for the detailed metrics for each rate plan charge in each ramp interval.")
    name: Optional[StrictStr] = Field(None, description="The name of the interval.")
    net_tcb: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netTcb", description="The net TCB value after discount charges are applied.")
    net_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netTcv", description="The net TCV value after discount charges are applied.")
    start_date: Optional[date] = Field(None, alias="startDate", description="The start date of the interval.")
    __properties = ["description", "discountTcb", "discountTcv", "endDate", "grossTcb", "grossTcv", "intervalMetrics", "name", "netTcb", "netTcv", "startDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RampIntervalMetrics:
        """Create an instance of RampIntervalMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in interval_metrics (list)
        _items = []
        if self.interval_metrics:
            for _item in self.interval_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['intervalMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RampIntervalMetrics:
        """Create an instance of RampIntervalMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RampIntervalMetrics.parse_obj(obj)

        _obj = RampIntervalMetrics.parse_obj({
            "description": obj.get("description"),
            "discount_tcb": obj.get("discountTcb"),
            "discount_tcv": obj.get("discountTcv"),
            "end_date": obj.get("endDate"),
            "gross_tcb": obj.get("grossTcb"),
            "gross_tcv": obj.get("grossTcv"),
            "interval_metrics": [RampIntervalChargeMetrics.from_dict(_item) for _item in obj.get("intervalMetrics")] if obj.get("intervalMetrics") is not None else None,
            "name": obj.get("name"),
            "net_tcb": obj.get("netTcb"),
            "net_tcv": obj.get("netTcv"),
            "start_date": obj.get("startDate")
        })
        return _obj


