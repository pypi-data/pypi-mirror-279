# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from zuora_sdk.models.failed_reason import FailedReason

class ServiceProviderResponse(BaseModel):
    """
    ServiceProviderResponse
    """
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    id: Optional[StrictStr] = Field(None, description="The ID of the e-invoicing service provider. ")
    name: Optional[constr(strict=True, max_length=100)] = Field(None, description="The name of the e-invoicing service provider. ")
    test: Optional[StrictBool] = Field(None, description="Whether the e-invoicing service provider's configuration is intended for testing.   - If you set this field to `true`, requests are directed to the testing integration endpoints. If you set this field to `false`, requests are directed to the production integration endpoints. ")
    provider: Optional[StrictStr] = Field(None, description="The name of the e-invoicing service provider that can help you generate e-invoice files for billing documents. ")
    service_provider_number: Optional[StrictStr] = Field(None, alias="serviceProviderNumber", description="The unique number of the e-invoicing service provider. ")
    company_identifier: Optional[StrictStr] = Field(None, alias="companyIdentifier", description="The Company Identifier is used to create a SenderSystemId, which serves to identify the system from which the transactions are sent. ")
    api_key: Optional[StrictStr] = Field(None, alias="apiKey", description="The API key is used to authenticate the e-invoicing service provider's requests. ")
    client_certificate: Optional[StrictStr] = Field(None, alias="clientCertificate", description="The client certificate is used to authenticate the e-invoicing service provider's requests, which should be in base64 encoded format. ")
    client_certificate_type: Optional[StrictStr] = Field(None, alias="clientCertificateType", description="The client certificate type is used to authenticate the e-invoicing service provider's requests. The default value is `PKCS12`. ")
    __properties = ["processId", "requestId", "reasons", "success", "id", "name", "test", "provider", "serviceProviderNumber", "companyIdentifier", "apiKey", "clientCertificate", "clientCertificateType"]

    @validator('provider')
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Sovos'):
            raise ValueError("must be one of enum values ('Sovos')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceProviderResponse:
        """Create an instance of ServiceProviderResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceProviderResponse:
        """Create an instance of ServiceProviderResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServiceProviderResponse.parse_obj(obj)

        _obj = ServiceProviderResponse.parse_obj({
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "test": obj.get("test"),
            "provider": obj.get("provider"),
            "service_provider_number": obj.get("serviceProviderNumber"),
            "company_identifier": obj.get("companyIdentifier"),
            "api_key": obj.get("apiKey"),
            "client_certificate": obj.get("clientCertificate"),
            "client_certificate_type": obj.get("clientCertificateType")
        })
        return _obj


