# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, condecimal

class CustomRates(BaseModel):
    """
    CustomRates
    """
    currency: StrictStr = Field(..., description="The currency code for either Reporting or Home currency.  **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later. ")
    custom_fx_rate: condecimal() = Field(..., alias="customFxRate", description="The Custom FX conversion rate between Home/Reporting and Transactional currency items.  **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later. ")
    rate_date: Optional[date] = Field(None, alias="rateDate", description="The date on which a particular currency rate is fixed or obtained on.  **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later. ")
    __properties = ["currency", "customFxRate", "rateDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomRates:
        """Create an instance of CustomRates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomRates:
        """Create an instance of CustomRates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomRates.parse_obj(obj)

        _obj = CustomRates.parse_obj({
            "currency": obj.get("currency"),
            "custom_fx_rate": obj.get("customFxRate"),
            "rate_date": obj.get("rateDate")
        })
        return _obj


