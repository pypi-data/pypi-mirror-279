# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class InvoiceFile(BaseModel):
    """
    InvoiceFile
    """
    id: Optional[StrictStr] = Field(None, description="The ID of the invoice PDF file. This is the ID for the file object and different from the file handle ID in the `pdfFileUrl` field. To open a file, you have to use the file handle ID. ")
    pdf_file_url: Optional[StrictStr] = Field(None, alias="pdfFileUrl", description="The REST URL for the invoice PDF file. Click the URL to open the invoice PDF file. ")
    version_number: Optional[StrictInt] = Field(None, alias="versionNumber", description="The version number of the invoice PDF file. ")
    __properties = ["id", "pdfFileUrl", "versionNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InvoiceFile:
        """Create an instance of InvoiceFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InvoiceFile:
        """Create an instance of InvoiceFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InvoiceFile.parse_obj(obj)

        _obj = InvoiceFile.parse_obj({
            "id": obj.get("id"),
            "pdf_file_url": obj.get("pdfFileUrl"),
            "version_number": obj.get("versionNumber")
        })
        return _obj


