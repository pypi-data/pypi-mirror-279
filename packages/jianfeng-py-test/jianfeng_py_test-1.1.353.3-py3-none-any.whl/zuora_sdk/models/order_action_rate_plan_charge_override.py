# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, constr
from zuora_sdk.models.charge_override_billing import ChargeOverrideBilling
from zuora_sdk.models.end_conditions import EndConditions
from zuora_sdk.models.rate_plan_charge_override_pricing import RatePlanChargeOverridePricing
from zuora_sdk.models.trigger_params import TriggerParams

class OrderActionRatePlanChargeOverride(BaseModel):
    """
    Charge associated with a rate plan.   # noqa: E501
    """
    billing: Optional[ChargeOverrideBilling] = None
    charge_number: Optional[constr(strict=True, max_length=50)] = Field(None, alias="chargeNumber", description="Charge number of the charge. For example, C-00000307.  If you do not set this field, Zuora will generate the charge number. ")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of a Rate Plan Charge object. ")
    description: Optional[constr(strict=True, max_length=500)] = Field(None, description="Description of the charge. ")
    end_date: Optional[EndConditions] = Field(None, alias="endDate")
    pricing: Optional[RatePlanChargeOverridePricing] = None
    product_rate_plan_charge_id: StrictStr = Field(..., alias="productRatePlanChargeId", description="Internal identifier of the product rate plan charge that the charge is based on. ")
    rev_rec_code: Optional[constr(strict=True, max_length=70)] = Field(None, alias="revRecCode", description="Revenue Recognition Code ")
    rev_rec_trigger_condition: Optional[StrictStr] = Field(None, alias="revRecTriggerCondition")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(None, alias="revenueRecognitionRuleName")
    start_date: Optional[TriggerParams] = Field(None, alias="startDate")
    unique_token: Optional[constr(strict=True, max_length=50)] = Field(None, alias="uniqueToken", description="Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify. ")
    __properties = ["billing", "chargeNumber", "customFields", "description", "endDate", "pricing", "productRatePlanChargeId", "revRecCode", "revRecTriggerCondition", "revenueRecognitionRuleName", "startDate", "uniqueToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderActionRatePlanChargeOverride:
        """Create an instance of OrderActionRatePlanChargeOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_date
        if self.end_date:
            _dict['endDate'] = self.end_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing
        if self.pricing:
            _dict['pricing'] = self.pricing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_date
        if self.start_date:
            _dict['startDate'] = self.start_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderActionRatePlanChargeOverride:
        """Create an instance of OrderActionRatePlanChargeOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderActionRatePlanChargeOverride.parse_obj(obj)

        _obj = OrderActionRatePlanChargeOverride.parse_obj({
            "billing": ChargeOverrideBilling.from_dict(obj.get("billing")) if obj.get("billing") is not None else None,
            "charge_number": obj.get("chargeNumber"),
            "custom_fields": obj.get("customFields"),
            "description": obj.get("description"),
            "end_date": EndConditions.from_dict(obj.get("endDate")) if obj.get("endDate") is not None else None,
            "pricing": RatePlanChargeOverridePricing.from_dict(obj.get("pricing")) if obj.get("pricing") is not None else None,
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "rev_rec_code": obj.get("revRecCode"),
            "rev_rec_trigger_condition": obj.get("revRecTriggerCondition"),
            "revenue_recognition_rule_name": obj.get("revenueRecognitionRuleName"),
            "start_date": TriggerParams.from_dict(obj.get("startDate")) if obj.get("startDate") is not None else None,
            "unique_token": obj.get("uniqueToken")
        })
        return _obj


