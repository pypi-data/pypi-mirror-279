# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class CreateAuthorizationResponsePaymentGateway(BaseModel):
    """
    The response data returned from the gateway. This field is available only if the `success` field is `false` and the support for returning additional error information from the gateway is enabled.   # noqa: E501
    """
    additional_info: Optional[Dict[str, Any]] = Field(None, alias="additionalInfo", description="The additional information returned from the gateway. The returned fields vary for gateways. Here is an example.  ``` \"additionalInfo\": {   \"ProcessorName\": \"MasterCard Saferpay Test\",   \"ProcessorResult\": \"51\",   \"ProcessorMessage\": \"Insufficient funds\",   \"ErrorName\": \"TRANSACTION_DECLINED\" } ``` ")
    gateway_response_code: Optional[StrictStr] = Field(None, alias="gatewayResponseCode", description="The HTTP response code. ")
    gateway_response_message: Optional[StrictStr] = Field(None, alias="gatewayResponseMessage", description="The error message returned from the gateway. ")
    gateway_type: Optional[StrictStr] = Field(None, alias="gatewayType", description="The gateway type. ")
    gateway_version: Optional[StrictStr] = Field(None, alias="gatewayVersion", description="The gateway version. ")
    __properties = ["additionalInfo", "gatewayResponseCode", "gatewayResponseMessage", "gatewayType", "gatewayVersion"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAuthorizationResponsePaymentGateway:
        """Create an instance of CreateAuthorizationResponsePaymentGateway from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAuthorizationResponsePaymentGateway:
        """Create an instance of CreateAuthorizationResponsePaymentGateway from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAuthorizationResponsePaymentGateway.parse_obj(obj)

        _obj = CreateAuthorizationResponsePaymentGateway.parse_obj({
            "additional_info": obj.get("additionalInfo"),
            "gateway_response_code": obj.get("gatewayResponseCode"),
            "gateway_response_message": obj.get("gatewayResponseMessage"),
            "gateway_type": obj.get("gatewayType"),
            "gateway_version": obj.get("gatewayVersion")
        })
        return _obj


