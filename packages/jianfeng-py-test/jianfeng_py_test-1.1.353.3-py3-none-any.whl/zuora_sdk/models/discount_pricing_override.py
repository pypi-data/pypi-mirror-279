# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from zuora_sdk.models.override_discount_apply_detail import OverrideDiscountApplyDetail

class DiscountPricingOverride(BaseModel):
    """
    Pricing information about a discount charge.   # noqa: E501
    """
    apply_discount_to: Optional[StrictStr] = Field(None, alias="applyDiscountTo")
    original_discount_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="originalDiscountAmount", description="The manufacturer's suggested retail discount price for standalone charge.  Only applicable if the standalone discount charge is a fixed-amount discount.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ")
    discount_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountAmount", description="Only applicable if the discount charge is a fixed-amount discount. ")
    discount_level: Optional[StrictStr] = Field(None, alias="discountLevel")
    original_discount_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="originalDiscountPercentage", description="The manufacturer's suggested retail discount percentage for standalone charge.  Only applicable if the standalone discount charge is a percentage discount.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ")
    discount_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountPercentage", description="Only applicable if the discount charge is a percentage discount. ")
    price_change_option: Optional[StrictStr] = Field(None, alias="priceChangeOption")
    discount_class: Optional[StrictStr] = Field(None, alias="discountClass", description="The discount class defines the sequence in which discount product rate plan charges are applied.  **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field. ")
    apply_to_billing_period_partially: Optional[StrictBool] = Field(None, alias="applyToBillingPeriodPartially", description="Allow the discount duration to be aligned with the billing period partially.  **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field. ")
    discount_apply_details: Optional[conlist(OverrideDiscountApplyDetail)] = Field(None, alias="discountApplyDetails", description="Charge list of discount be applied to.  **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field. ")
    __properties = ["applyDiscountTo", "originalDiscountAmount", "discountAmount", "discountLevel", "originalDiscountPercentage", "discountPercentage", "priceChangeOption", "discountClass", "applyToBillingPeriodPartially", "discountApplyDetails"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiscountPricingOverride:
        """Create an instance of DiscountPricingOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in discount_apply_details (list)
        _items = []
        if self.discount_apply_details:
            for _item in self.discount_apply_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['discountApplyDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiscountPricingOverride:
        """Create an instance of DiscountPricingOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiscountPricingOverride.parse_obj(obj)

        _obj = DiscountPricingOverride.parse_obj({
            "apply_discount_to": obj.get("applyDiscountTo"),
            "original_discount_amount": obj.get("originalDiscountAmount"),
            "discount_amount": obj.get("discountAmount"),
            "discount_level": obj.get("discountLevel"),
            "original_discount_percentage": obj.get("originalDiscountPercentage"),
            "discount_percentage": obj.get("discountPercentage"),
            "price_change_option": obj.get("priceChangeOption"),
            "discount_class": obj.get("discountClass"),
            "apply_to_billing_period_partially": obj.get("applyToBillingPeriodPartially"),
            "discount_apply_details": [OverrideDiscountApplyDetail.from_dict(_item) for _item in obj.get("discountApplyDetails")] if obj.get("discountApplyDetails") is not None else None
        })
        return _obj


