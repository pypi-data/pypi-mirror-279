# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from zuora_sdk.models.charge_model_configuration_for_subscription import ChargeModelConfigurationForSubscription
from zuora_sdk.models.tier import Tier

class UpdateRatePlanCharge(BaseModel):
    """
    UpdateRatePlanCharge
    """
    billing_period_alignment: Optional[StrictStr] = Field(None, alias="billingPeriodAlignment", description="Aligns charges within the same subscription if multiple charges begin on different dates.  Values:  * `AlignToCharge` * `AlignToSubscriptionStart` * `AlignToTermStart`  Available for the following charge types:  * Recurring * Usage-based ")
    charge_model_configuration: Optional[ChargeModelConfigurationForSubscription] = Field(None, alias="chargeModelConfiguration")
    description: Optional[StrictStr] = Field(None, description="Description of the charge. ")
    included_units: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="includedUnits", description="Specifies the number of units in the base set of units for this charge. Must be >=0.  Available for the following charge type for the Overage charge model: * Usage-based ")
    overage_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="overagePrice", description="Price for units over the allowed amount.   Available for the following charge type for the Overage and Tiered with Overage charge models:  * Usage-based ")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Price for units in the subscription rate plan.  Supports all charge types for the Flat Fee and Per Unit charge models ")
    price_change_option: Optional[StrictStr] = Field(None, alias="priceChangeOption", description="Applies an automatic price change when a termed subscription is renewed. The Billing Admin setting **Enable Automatic Price Change When Subscriptions are Renewed?** must be set to Yes to use this field.  Values:  * `NoChange` (default) * `SpecificPercentageValue` * `UseLatestProductCatalogPricing`  Available for the following charge types:  * Recurring * Usage-based  Not available for the Fixed-Amount Discount charge model. ")
    price_increase_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="priceIncreasePercentage", description="Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.  Decimal between `-100` and `100`.  Available for the following charge types:  * Recurring * Usage-based  Not available for the Fixed-Amount Discount charge model. ")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Quantity of units; must be greater than zero. ")
    rate_plan_charge_id: StrictStr = Field(..., alias="ratePlanChargeId", description="ID of a rate-plan charge for this subscription. It can be the latest version or any history version of ID. ")
    tiers: Optional[conlist(Tier)] = Field(None, description="Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:  * One-time * Recurring * Usage-based ")
    trigger_date: Optional[date] = Field(None, alias="triggerDate", description="Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to USD.  `triggerDate` cannot be updated for the following using the REST update subscription call:  * One-time charge type * Discount-Fixed Amount charge model * Discount-Percentage charge model ")
    trigger_event: Optional[StrictStr] = Field(None, alias="triggerEvent", description="Specifies when to start billing the customer for the charge.  Values:  * `UCE` * `USA` * `UCA` * `USD`  This is the date when charge changes in the REST request become effective.  `triggerEvent` cannot be updated for the following using the REST update subscription call:  * One-time charge type * Discount-Fixed Amount charge model * Discount-Percentage charge model ")
    __properties = ["billingPeriodAlignment", "chargeModelConfiguration", "description", "includedUnits", "overagePrice", "price", "priceChangeOption", "priceIncreasePercentage", "quantity", "ratePlanChargeId", "tiers", "triggerDate", "triggerEvent"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateRatePlanCharge:
        """Create an instance of UpdateRatePlanCharge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of charge_model_configuration
        if self.charge_model_configuration:
            _dict['chargeModelConfiguration'] = self.charge_model_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateRatePlanCharge:
        """Create an instance of UpdateRatePlanCharge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateRatePlanCharge.parse_obj(obj)

        _obj = UpdateRatePlanCharge.parse_obj({
            "billing_period_alignment": obj.get("billingPeriodAlignment"),
            "charge_model_configuration": ChargeModelConfigurationForSubscription.from_dict(obj.get("chargeModelConfiguration")) if obj.get("chargeModelConfiguration") is not None else None,
            "description": obj.get("description"),
            "included_units": obj.get("includedUnits"),
            "overage_price": obj.get("overagePrice"),
            "price": obj.get("price"),
            "price_change_option": obj.get("priceChangeOption"),
            "price_increase_percentage": obj.get("priceIncreasePercentage"),
            "quantity": obj.get("quantity"),
            "rate_plan_charge_id": obj.get("ratePlanChargeId"),
            "tiers": [Tier.from_dict(_item) for _item in obj.get("tiers")] if obj.get("tiers") is not None else None,
            "trigger_date": obj.get("triggerDate"),
            "trigger_event": obj.get("triggerEvent")
        })
        return _obj


