# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from zuora_sdk.models.migration_component_content import MigrationComponentContent

class MigrationClientResponse(BaseModel):
    """
    Response after migration is added.  # noqa: E501
    """
    email_ids: Optional[StrictStr] = Field(None, alias="emailIds", description="List of Emails with comma separator ")
    environment: Optional[StrictStr] = Field(None, description="Environment information")
    id: StrictStr = Field(..., description="Variable to hold the job ID.")
    migrated_by: StrictStr = Field(..., alias="migratedBy", description="User responsible for migration.")
    migration_description: StrictStr = Field(..., alias="migrationDescription", description="Description of the migration.")
    migration_end: StrictStr = Field(..., alias="migrationEnd", description="Timestamp when migration ended.")
    migration_name: StrictStr = Field(..., alias="migrationName", description="Name of the migration.")
    migration_start: StrictStr = Field(..., alias="migrationStart", description="Timestamp when migration started.")
    response: Optional[conlist(MigrationComponentContent)] = None
    source_tenant_description: StrictStr = Field(..., alias="sourceTenantDescription", description="Source Tenant Description.")
    source_tenant_name: StrictStr = Field(..., alias="sourceTenantName", description="Source Tenant Name.")
    status: StrictStr = Field(..., description="Status of the Migration Job.")
    type: Optional[StrictStr] = None
    __properties = ["emailIds", "environment", "id", "migratedBy", "migrationDescription", "migrationEnd", "migrationName", "migrationStart", "response", "sourceTenantDescription", "sourceTenantName", "status", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MigrationClientResponse:
        """Create an instance of MigrationClientResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in response (list)
        _items = []
        if self.response:
            for _item in self.response:
                if _item:
                    _items.append(_item.to_dict())
            _dict['response'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MigrationClientResponse:
        """Create an instance of MigrationClientResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MigrationClientResponse.parse_obj(obj)

        _obj = MigrationClientResponse.parse_obj({
            "email_ids": obj.get("emailIds"),
            "environment": obj.get("environment"),
            "id": obj.get("id"),
            "migrated_by": obj.get("migratedBy"),
            "migration_description": obj.get("migrationDescription"),
            "migration_end": obj.get("migrationEnd"),
            "migration_name": obj.get("migrationName"),
            "migration_start": obj.get("migrationStart"),
            "response": [MigrationComponentContent.from_dict(_item) for _item in obj.get("response")] if obj.get("response") is not None else None,
            "source_tenant_description": obj.get("sourceTenantDescription"),
            "source_tenant_name": obj.get("sourceTenantName"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj


