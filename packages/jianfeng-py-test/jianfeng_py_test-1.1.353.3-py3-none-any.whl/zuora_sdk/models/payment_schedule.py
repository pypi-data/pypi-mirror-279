# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator
from zuora_sdk.models.payment_schedule_billing_document import PaymentScheduleBillingDocument
from zuora_sdk.models.payment_schedule_item import PaymentScheduleItem
from zuora_sdk.models.payment_schedule_payment_option_fields import PaymentSchedulePaymentOptionFields

class PaymentSchedule(BaseModel):
    """
    PaymentSchedule
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="ID of the account that owns the payment schedule. ")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="Number of the account that owns the payment schedule. ")
    billing_document: Optional[PaymentScheduleBillingDocument] = Field(None, alias="billingDocument")
    cancel_date: Optional[StrictStr] = Field(None, alias="cancelDate", description="The date when the payment schedule item was cancelled. ")
    cancelled_by_id: Optional[StrictStr] = Field(None, alias="cancelledById", description="The ID of the user who cancel the payment schedule item. ")
    cancelled_on: Optional[StrictStr] = Field(None, alias="cancelledOn", description="The date and time when the payment schedule item was cancelled. ")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the user who created this payment schedule. ")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time the payment schedule is created. ")
    description: Optional[StrictStr] = Field(None, description="The description of the payment schedule. ")
    id: Optional[StrictStr] = Field(None, description="ID of the payment schedule. ")
    is_custom: Optional[StrictBool] = Field(None, alias="isCustom", description="Indicates if the payment schedule is a custom payment schedule. ")
    items: Optional[conlist(PaymentScheduleItem)] = Field(None, description="Container for payment schedule items. ")
    next_payment_date: Optional[StrictStr] = Field(None, alias="nextPaymentDate", description="The date the next payment will be processed. ")
    occurrences: Optional[StrictInt] = Field(None, description="The number of payment schedule items that are created by this payment schedule. ")
    payment_option: Optional[conlist(PaymentSchedulePaymentOptionFields)] = Field(None, alias="paymentOption", description="Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.  `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.  This field is only available if `zuora-version` is set to `337.0` or later. ")
    payment_schedule_number: Optional[StrictStr] = Field(None, alias="paymentScheduleNumber", description="Number of the payment schedule. ")
    period: Optional[StrictStr] = Field(None, description="For recurring payment schedule only. The period of payment generation. Available values include: `Monthly`, `Weekly`, `BiWeekly`.  Return `null` for custom payment schedules. ")
    prepayment: Optional[StrictBool] = Field(None, description="Indicates whether the payments created by the payment schedule are used as a reserved payment. This field is available only if the prepaid cash drawdown permission is enabled. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information. ")
    recent_payment_date: Optional[date] = Field(None, alias="recentPaymentDate", description="The date the last payment was processed. ")
    run_hour: Optional[StrictInt] = Field(None, alias="runHour", description="[0,1,2,~,22,23]  At which hour in the day in the tenantâ€™s timezone this payment will be collected.  Return `0` for custom payment schedules. ")
    standalone: Optional[StrictBool] = Field(None, description="Indicates if the payments that the payment schedule created are standalone payments. ")
    start_date: Optional[StrictStr] = Field(None, alias="startDate", description="The date when the first payment of this payment schedule is proccessed. ")
    status: Optional[StrictStr] = Field(None, description="The status of the payment schedule.  - Active: There is still payment schedule item to process. - Canceled: After a payment schedule is canceled by the user, the schedule is marked as `Canceled`. - Completed: After all payment schedule items are processed, the schedule is marked as `Completed`. ")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully. ")
    total_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalAmount", description="The total amount that will be collected by the payment schedule. ")
    total_payments_errored: Optional[StrictInt] = Field(None, alias="totalPaymentsErrored", description="The number of errored payments. ")
    total_payments_processed: Optional[StrictInt] = Field(None, alias="totalPaymentsProcessed", description="The number of processed payments. ")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the user who last updated this payment schedule. ")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time the payment schedule is last updated. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["accountId", "accountNumber", "billingDocument", "cancelDate", "cancelledById", "cancelledOn", "createdById", "createdDate", "description", "id", "isCustom", "items", "nextPaymentDate", "occurrences", "paymentOption", "paymentScheduleNumber", "period", "prepayment", "recentPaymentDate", "runHour", "standalone", "startDate", "status", "success", "totalAmount", "totalPaymentsErrored", "totalPaymentsProcessed", "updatedById", "updatedDate"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Active', 'Canceled', 'Completed'):
            raise ValueError("must be one of enum values ('Active', 'Canceled', 'Completed')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentSchedule:
        """Create an instance of PaymentSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing_document
        if self.billing_document:
            _dict['billingDocument'] = self.billing_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_option (list)
        _items = []
        if self.payment_option:
            for _item in self.payment_option:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentOption'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentSchedule:
        """Create an instance of PaymentSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentSchedule.parse_obj(obj)

        _obj = PaymentSchedule.parse_obj({
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "billing_document": PaymentScheduleBillingDocument.from_dict(obj.get("billingDocument")) if obj.get("billingDocument") is not None else None,
            "cancel_date": obj.get("cancelDate"),
            "cancelled_by_id": obj.get("cancelledById"),
            "cancelled_on": obj.get("cancelledOn"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "is_custom": obj.get("isCustom"),
            "items": [PaymentScheduleItem.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "next_payment_date": obj.get("nextPaymentDate"),
            "occurrences": obj.get("occurrences"),
            "payment_option": [PaymentSchedulePaymentOptionFields.from_dict(_item) for _item in obj.get("paymentOption")] if obj.get("paymentOption") is not None else None,
            "payment_schedule_number": obj.get("paymentScheduleNumber"),
            "period": obj.get("period"),
            "prepayment": obj.get("prepayment"),
            "recent_payment_date": obj.get("recentPaymentDate"),
            "run_hour": obj.get("runHour"),
            "standalone": obj.get("standalone"),
            "start_date": obj.get("startDate"),
            "status": obj.get("status"),
            "success": obj.get("success"),
            "total_amount": obj.get("totalAmount"),
            "total_payments_errored": obj.get("totalPaymentsErrored"),
            "total_payments_processed": obj.get("totalPaymentsProcessed"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


