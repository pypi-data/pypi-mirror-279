# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from zuora_sdk.models.invoice_schedule_subscription import InvoiceScheduleSubscription
from zuora_sdk.models.update_invoice_schedule_item import UpdateInvoiceScheduleItem

class UpdateInvoiceScheduleRequest(BaseModel):
    """
    UpdateInvoiceScheduleRequest
    """
    additional_subscriptions_to_bill: Optional[conlist(StrictStr)] = Field(None, alias="additionalSubscriptionsToBill", description="A list of the numbers of the subscriptions that need to be billed together with the invoice schedule.   One invoice schedule can have at most 600 additional subscriptions. ")
    invoice_separately: Optional[StrictBool] = Field(None, alias="invoiceSeparately", description="Whether the invoice items created from the invoice schedule appears on a separate invoice when Zuora generates invoices. ")
    next_run_date: Optional[date] = Field(None, alias="nextRunDate", description="The run date of the next execution of the invoice schedule.   By default, the next run date is the same as the run date of next pending invoice schedule item. The date can be overwritten by a different date other than the default value. If the invoice schedule has completed the execution, the next run date is `null`. ")
    notes: Optional[constr(strict=True, max_length=255)] = Field(None, description="Comments on the invoice schedule. ")
    orders: Optional[conlist(StrictStr)] = Field(None, description="A list of the IDs or numbers of the orders associated with the invoice schedule. One invoice schedule can be associated with at most 10 orders.  The orders specified in this field override all the existing orders associated with the invoice schedule. ")
    schedule_items: Optional[conlist(UpdateInvoiceScheduleItem)] = Field(None, alias="scheduleItems", description="Container for invoice schedule items. The maximum number of schedule items is 50.  The invoice schedule items specified in this field override all the existing invoice schedule items. ")
    specific_subscriptions: Optional[conlist(InvoiceScheduleSubscription)] = Field(None, alias="specificSubscriptions", description="A list of the numbers of specific subscriptions associated with the invoice schedule.  - If the subscriptions specified in this field belong to the orders specified in the `orders` field, only the specific subscriptions instead of the orders are associated with the invoice schedule.  - If only the `orders` field is specified, all the subscriptions from the order are associated with the invoice schedule.    The specific subscriptions specified in this field override all the existing specific subscriptions associated with the invoice schedule.  Example: ``` {   \"orders\": [     \"O-00000001\", \"O-00000002\"   ],   \"specificSubscriptions\": [     {       \"orderKey\": \"O-00000001\",       \"subscriptionKey\": \"S-00000001\"     }   ] } ``` - For the order with number O-00000001, only subscription S-00000001 contained in the order is associated with the invoice schedule. - For the order with number O-00000002, all subscriptions contained in the order are associated with the invoice schedule. ")
    __properties = ["additionalSubscriptionsToBill", "invoiceSeparately", "nextRunDate", "notes", "orders", "scheduleItems", "specificSubscriptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateInvoiceScheduleRequest:
        """Create an instance of UpdateInvoiceScheduleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in schedule_items (list)
        _items = []
        if self.schedule_items:
            for _item in self.schedule_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scheduleItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in specific_subscriptions (list)
        _items = []
        if self.specific_subscriptions:
            for _item in self.specific_subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specificSubscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateInvoiceScheduleRequest:
        """Create an instance of UpdateInvoiceScheduleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateInvoiceScheduleRequest.parse_obj(obj)

        _obj = UpdateInvoiceScheduleRequest.parse_obj({
            "additional_subscriptions_to_bill": obj.get("additionalSubscriptionsToBill"),
            "invoice_separately": obj.get("invoiceSeparately"),
            "next_run_date": obj.get("nextRunDate"),
            "notes": obj.get("notes"),
            "orders": obj.get("orders"),
            "schedule_items": [UpdateInvoiceScheduleItem.from_dict(_item) for _item in obj.get("scheduleItems")] if obj.get("scheduleItems") is not None else None,
            "specific_subscriptions": [InvoiceScheduleSubscription.from_dict(_item) for _item in obj.get("specificSubscriptions")] if obj.get("specificSubscriptions") is not None else None
        })
        return _obj


