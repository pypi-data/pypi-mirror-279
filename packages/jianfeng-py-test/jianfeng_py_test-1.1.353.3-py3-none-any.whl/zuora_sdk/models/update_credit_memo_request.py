# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from zuora_sdk.models.transferred_to_accounting_status import TransferredToAccountingStatus
from zuora_sdk.models.update_credit_memo_item import UpdateCreditMemoItem

class UpdateCreditMemoRequest(BaseModel):
    """
    UpdateCreditMemoRequest
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the credit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    origin__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Origin__NS", description="Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the credit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    transaction__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Transaction__NS", description="Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    auto_apply_upon_posting: Optional[StrictBool] = Field(None, alias="autoApplyUponPosting", description="Whether the credit memo automatically applies to the invoice upon posting.")
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Comments about the credit memo.")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="The date when the credit memo takes effect.")
    exclude_from_auto_apply_rules: Optional[StrictBool] = Field(None, alias="excludeFromAutoApplyRules", description="Whether the credit memo is excluded from the rule of automatically applying unapplied credit memos to invoices and debit memos during payment runs. If you set this field to `true`, a payment run does not pick up this credit memo or apply it to other invoices or debit memos.")
    items: Optional[conlist(UpdateCreditMemoItem)] = Field(None, description="Container for credit memo items.")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.")
    transferred_to_accounting: Optional[StrictStr] = Field(None, alias="transferredToAccounting")
    additional_properties: Dict[str, Any] = {}
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "Origin__NS", "SyncDate__NS", "Transaction__NS", "autoApplyUponPosting", "comment", "effectiveDate", "excludeFromAutoApplyRules", "items", "reasonCode", "transferredToAccounting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateCreditMemoRequest:
        """Create an instance of UpdateCreditMemoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateCreditMemoRequest:
        """Create an instance of UpdateCreditMemoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateCreditMemoRequest.parse_obj(obj)

        _obj = UpdateCreditMemoRequest.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "origin__ns": obj.get("Origin__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "transaction__ns": obj.get("Transaction__NS"),
            "auto_apply_upon_posting": obj.get("autoApplyUponPosting"),
            "comment": obj.get("comment"),
            "effective_date": obj.get("effectiveDate"),
            "exclude_from_auto_apply_rules": obj.get("excludeFromAutoApplyRules"),
            "items": [UpdateCreditMemoItem.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "reason_code": obj.get("reasonCode"),
            "transferred_to_accounting": obj.get("transferredToAccounting")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


