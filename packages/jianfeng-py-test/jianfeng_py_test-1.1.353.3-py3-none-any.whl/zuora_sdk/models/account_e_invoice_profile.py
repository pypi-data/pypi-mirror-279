# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class AccountEInvoiceProfile(BaseModel):
    """
    AccountEInvoiceProfile
    """
    enabled: Optional[StrictBool] = Field(None, description="enabled ")
    business_name: Optional[StrictStr] = Field(None, alias="businessName", description="businessName. ")
    business_number: Optional[StrictStr] = Field(None, alias="businessNumber", description="businessNumber. ")
    business_number_scheme_id: Optional[StrictStr] = Field(None, alias="businessNumberSchemeId", description="businessNumberSchemeId. ")
    endpoint_id: Optional[StrictStr] = Field(None, alias="endpointId", description="endpointId. ")
    endpoint_scheme_id: Optional[StrictStr] = Field(None, alias="endpointSchemeId", description="endpointSchemeId. ")
    tax_register_number: Optional[StrictStr] = Field(None, alias="taxRegisterNumber", description="taxRegisterNumber. ")
    business_category: Optional[StrictStr] = Field(None, alias="businessCategory", description="A field to identify the business category on the Account Einvoice Profile. ")
    __properties = ["enabled", "businessName", "businessNumber", "businessNumberSchemeId", "endpointId", "endpointSchemeId", "taxRegisterNumber", "businessCategory"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountEInvoiceProfile:
        """Create an instance of AccountEInvoiceProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountEInvoiceProfile:
        """Create an instance of AccountEInvoiceProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountEInvoiceProfile.parse_obj(obj)

        _obj = AccountEInvoiceProfile.parse_obj({
            "enabled": obj.get("enabled"),
            "business_name": obj.get("businessName"),
            "business_number": obj.get("businessNumber"),
            "business_number_scheme_id": obj.get("businessNumberSchemeId"),
            "endpoint_id": obj.get("endpointId"),
            "endpoint_scheme_id": obj.get("endpointSchemeId"),
            "tax_register_number": obj.get("taxRegisterNumber"),
            "business_category": obj.get("businessCategory")
        })
        return _obj


