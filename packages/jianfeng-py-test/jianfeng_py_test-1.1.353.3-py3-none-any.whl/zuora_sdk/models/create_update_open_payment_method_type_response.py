# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class CreateUpdateOpenPaymentMethodTypeResponse(BaseModel):
    """
    CreateUpdateOpenPaymentMethodTypeResponse
    """
    payment_method_type: Optional[StrictStr] = Field(None, alias="paymentMethodType", description="The API name of the custom payment method type. ")
    publish_date: Optional[StrictStr] = Field(None, alias="publishDate", description="The date when the custom payment method type was published. It is empty if the custom payment method type has not been published yet. ")
    revision: Optional[StrictInt] = Field(None, description="The revision number of the custom payment method type, which starts from 1 and increases by 1 when you update a published revision for the first time. ")
    status: Optional[StrictStr] = Field(None, description="The status of the custom payment method type. ")
    __properties = ["paymentMethodType", "publishDate", "revision", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateUpdateOpenPaymentMethodTypeResponse:
        """Create an instance of CreateUpdateOpenPaymentMethodTypeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateUpdateOpenPaymentMethodTypeResponse:
        """Create an instance of CreateUpdateOpenPaymentMethodTypeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateUpdateOpenPaymentMethodTypeResponse.parse_obj(obj)

        _obj = CreateUpdateOpenPaymentMethodTypeResponse.parse_obj({
            "payment_method_type": obj.get("paymentMethodType"),
            "publish_date": obj.get("publishDate"),
            "revision": obj.get("revision"),
            "status": obj.get("status")
        })
        return _obj


