# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from zuora_sdk.models.credit_memo_item_from_invoice_item_finance_information import CreditMemoItemFromInvoiceItemFinanceInformation

class CreditMemoItemFromWriteOffInvoice(BaseModel):
    """
    CreditMemoItemFromWriteOffInvoice
    """
    comment: Optional[StrictStr] = Field(None, description="Comments about the credit memo item. ")
    finance_information: Optional[CreditMemoItemFromInvoiceItemFinanceInformation] = Field(None, alias="financeInformation")
    invoice_item_id: Optional[StrictStr] = Field(None, alias="invoiceItemId", description="The ID of the invoice item. ")
    service_end_date: Optional[date] = Field(None, alias="serviceEndDate", description="The service end date of the credit memo item.  ")
    service_start_date: Optional[date] = Field(None, alias="serviceStartDate", description="The service start date of the credit memo item.  ")
    sku_name: Optional[StrictStr] = Field(None, alias="skuName", description="The name of the charge associated with the invoice. ")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="unitOfMeasure", description="The definable unit that you measure when determining charges. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["comment", "financeInformation", "invoiceItemId", "serviceEndDate", "serviceStartDate", "skuName", "unitOfMeasure"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreditMemoItemFromWriteOffInvoice:
        """Create an instance of CreditMemoItemFromWriteOffInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreditMemoItemFromWriteOffInvoice:
        """Create an instance of CreditMemoItemFromWriteOffInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreditMemoItemFromWriteOffInvoice.parse_obj(obj)

        _obj = CreditMemoItemFromWriteOffInvoice.parse_obj({
            "comment": obj.get("comment"),
            "finance_information": CreditMemoItemFromInvoiceItemFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "invoice_item_id": obj.get("invoiceItemId"),
            "service_end_date": obj.get("serviceEndDate"),
            "service_start_date": obj.get("serviceStartDate"),
            "sku_name": obj.get("skuName"),
            "unit_of_measure": obj.get("unitOfMeasure")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


