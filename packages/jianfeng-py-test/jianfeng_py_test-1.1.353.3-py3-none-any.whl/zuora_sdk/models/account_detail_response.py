# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from zuora_sdk.models.account_basic_info import AccountBasicInfo
from zuora_sdk.models.account_billing_and_payment import AccountBillingAndPayment
from zuora_sdk.models.account_e_invoice_profile import AccountEInvoiceProfile
from zuora_sdk.models.account_metrics import AccountMetrics
from zuora_sdk.models.contact import Contact
from zuora_sdk.models.failed_reason import FailedReason
from zuora_sdk.models.tax_info import TaxInfo

class AccountDetailResponse(BaseModel):
    """
    AccountDetailResponse
    """
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully. ")
    basic_info: Optional[AccountBasicInfo] = Field(None, alias="basicInfo")
    bill_to_contact: Optional[Contact] = Field(None, alias="billToContact")
    billing_and_payment: Optional[AccountBillingAndPayment] = Field(None, alias="billingAndPayment")
    metrics: Optional[AccountMetrics] = None
    sold_to_contact: Optional[Contact] = Field(None, alias="soldToContact")
    tax_info: Optional[TaxInfo] = Field(None, alias="taxInfo")
    metrics_data: Optional[conlist(AccountMetrics)] = Field(None, alias="metricsData", description="Container for account metrics of different currencies.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Multiple_Currencies\" target=\"_blank\">Multiple Currencies</a> feature in the **Early Adopter** phase enabled. ")
    einvoice_profile: Optional[AccountEInvoiceProfile] = Field(None, alias="einvoiceProfile")
    __properties = ["processId", "requestId", "reasons", "success", "basicInfo", "billToContact", "billingAndPayment", "metrics", "soldToContact", "taxInfo", "metricsData", "einvoiceProfile"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountDetailResponse:
        """Create an instance of AccountDetailResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of basic_info
        if self.basic_info:
            _dict['basicInfo'] = self.basic_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_and_payment
        if self.billing_and_payment:
            _dict['billingAndPayment'] = self.billing_and_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact
        if self.sold_to_contact:
            _dict['soldToContact'] = self.sold_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_info
        if self.tax_info:
            _dict['taxInfo'] = self.tax_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metrics_data (list)
        _items = []
        if self.metrics_data:
            for _item in self.metrics_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metricsData'] = _items
        # override the default output from pydantic by calling `to_dict()` of einvoice_profile
        if self.einvoice_profile:
            _dict['einvoiceProfile'] = self.einvoice_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountDetailResponse:
        """Create an instance of AccountDetailResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountDetailResponse.parse_obj(obj)

        _obj = AccountDetailResponse.parse_obj({
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "basic_info": AccountBasicInfo.from_dict(obj.get("basicInfo")) if obj.get("basicInfo") is not None else None,
            "bill_to_contact": Contact.from_dict(obj.get("billToContact")) if obj.get("billToContact") is not None else None,
            "billing_and_payment": AccountBillingAndPayment.from_dict(obj.get("billingAndPayment")) if obj.get("billingAndPayment") is not None else None,
            "metrics": AccountMetrics.from_dict(obj.get("metrics")) if obj.get("metrics") is not None else None,
            "sold_to_contact": Contact.from_dict(obj.get("soldToContact")) if obj.get("soldToContact") is not None else None,
            "tax_info": TaxInfo.from_dict(obj.get("taxInfo")) if obj.get("taxInfo") is not None else None,
            "metrics_data": [AccountMetrics.from_dict(_item) for _item in obj.get("metricsData")] if obj.get("metricsData") is not None else None,
            "einvoice_profile": AccountEInvoiceProfile.from_dict(obj.get("einvoiceProfile")) if obj.get("einvoiceProfile") is not None else None
        })
        return _obj


