# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from zuora_sdk.models.product_category import ProductCategory
from zuora_sdk.models.product_object_ns_fields_item_type_ns import ProductObjectNSFieldsItemTypeNS

class CreateProductRequest(BaseModel):
    """
    CreateProductRequest
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the product's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    item_type__ns: Optional[StrictStr] = Field(None, alias="ItemType__NS")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the product was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sku: Optional[constr(strict=True, max_length=50)] = Field(None, alias="SKU", description="The unique SKU for the product.  **Values**:    - leave null for automatically generated string   - an alphanumeric string of 50 characters or fewer ")
    name: constr(strict=True, max_length=100) = Field(..., alias="Name", description="The name of the product. This information is displayed in the product catalog pages in the web-based UI. ")
    product_number: Optional[constr(strict=True, max_length=100)] = Field(None, alias="ProductNumber", description="The natural key of the product.  **Values**:    - leave null for automatically generated string   - an alphanumeric string of 100 characters or fewer  **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later. ")
    category: Optional[ProductCategory] = Field(None, alias="Category")
    description: Optional[constr(strict=True, max_length=500)] = Field(None, alias="Description", description="A description of the product. ")
    effective_start_date: date = Field(..., alias="EffectiveStartDate", description="The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format. ")
    effective_end_date: date = Field(..., alias="EffectiveEndDate", description="The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format. ")
    allow_feature_changes: Optional[StrictBool] = Field(None, alias="AllowFeatureChanges", description="Controls whether to allow your users to add or remove features while creating or amending a subscription.  **Values**: true, false (default) ")
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "ItemType__NS", "SyncDate__NS", "SKU", "Name", "ProductNumber", "Category", "Description", "EffectiveStartDate", "EffectiveEndDate", "AllowFeatureChanges"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateProductRequest:
        """Create an instance of CreateProductRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateProductRequest:
        """Create an instance of CreateProductRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateProductRequest.parse_obj(obj)

        _obj = CreateProductRequest.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "item_type__ns": obj.get("ItemType__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "sku": obj.get("SKU"),
            "name": obj.get("Name"),
            "product_number": obj.get("ProductNumber"),
            "category": obj.get("Category"),
            "description": obj.get("Description"),
            "effective_start_date": obj.get("EffectiveStartDate"),
            "effective_end_date": obj.get("EffectiveEndDate"),
            "allow_feature_changes": obj.get("AllowFeatureChanges")
        })
        return _obj


