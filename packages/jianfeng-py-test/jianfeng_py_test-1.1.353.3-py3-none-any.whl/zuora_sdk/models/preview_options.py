# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

class PreviewOptions(BaseModel):
    """
    PreviewOptions
    """
    preview_number_of_periods: Optional[StrictInt] = Field(None, alias="previewNumberOfPeriods", description="The number of periods to preview when the value of the `previewThroughType` field is set to `NumberOfPeriods`. ")
    preview_thru_type: Optional[StrictStr] = Field(None, alias="previewThruType")
    preview_types: Optional[conlist(StrictStr)] = Field(None, alias="previewTypes", description="One or more types of the preview. It can include:  * ChargeMetrics: charge level metrics will be returned in the response, including: `cmrr`, `tcv`, `tcb`, and `tax`. * BillingDocs: `invoices` and `creditMemos` will be returned in the response. Note `creditMemos` is only available if the Invoice Settlement feature is enabled. * OrderDeltaMetrics: order delta metrics will be returned in the response, including: `orderDeltaMrr`, `orderDeltaTcb` and  `orderDeltaTcv`. * OrderMetrics: order metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv`, and `elp`. **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the OrderDeltaMetrics. It is recommended that all customers use the [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/). Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported. * RampMetrics: ramp metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv` metrics for each charge and each ramp interval. * RampDeltaMetrics: ramp metrics changes will be returned in the response, including: `deltaQuantity`, `deltaMrr`, `deltaTcb`, `deltaTcv` metrics for each charge and each ramp interval. ")
    specific_preview_thru_date: Optional[date] = Field(None, alias="specificPreviewThruDate", description="The end date of the order preview. You can preview the invoice charges through the preview through date. (Invoice preview only)   **Note:** This field is only applicable if the 'previewThruType' field is set to 'SpecificDate'. ")
    __properties = ["previewNumberOfPeriods", "previewThruType", "previewTypes", "specificPreviewThruDate"]

    @validator('preview_types')
    def preview_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('ChargeMetrics', 'BillingDocs', 'OrderDeltaMetrics', 'OrderMetrics', 'RampMetrics', 'RampDeltaMetrics'):
                raise ValueError("each list item must be one of ('ChargeMetrics', 'BillingDocs', 'OrderDeltaMetrics', 'OrderMetrics', 'RampMetrics', 'RampDeltaMetrics')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewOptions:
        """Create an instance of PreviewOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewOptions:
        """Create an instance of PreviewOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewOptions.parse_obj(obj)

        _obj = PreviewOptions.parse_obj({
            "preview_number_of_periods": obj.get("previewNumberOfPeriods"),
            "preview_thru_type": obj.get("previewThruType"),
            "preview_types": obj.get("previewTypes"),
            "specific_preview_thru_date": obj.get("specificPreviewThruDate")
        })
        return _obj


