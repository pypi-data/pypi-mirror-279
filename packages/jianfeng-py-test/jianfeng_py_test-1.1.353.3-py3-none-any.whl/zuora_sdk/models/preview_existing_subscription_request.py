# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from zuora_sdk.models.preview_start_date import PreviewStartDate
from zuora_sdk.models.preview_through_date import PreviewThroughDate
from zuora_sdk.models.quantity_for_usage_charges import QuantityForUsageCharges

class PreviewExistingSubscriptionRequest(BaseModel):
    """
    Preview the existing subscription by subscription ID or number.   # noqa: E501
    """
    preview_start_date: Optional[PreviewStartDate] = Field(None, alias="previewStartDate")
    preview_through_date: Optional[PreviewThroughDate] = Field(None, alias="previewThroughDate")
    quantity_for_usage_charges: Optional[conlist(QuantityForUsageCharges)] = Field(None, alias="quantityForUsageCharges", description="Container for usage charges. ")
    __properties = ["previewStartDate", "previewThroughDate", "quantityForUsageCharges"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewExistingSubscriptionRequest:
        """Create an instance of PreviewExistingSubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of preview_start_date
        if self.preview_start_date:
            _dict['previewStartDate'] = self.preview_start_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preview_through_date
        if self.preview_through_date:
            _dict['previewThroughDate'] = self.preview_through_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in quantity_for_usage_charges (list)
        _items = []
        if self.quantity_for_usage_charges:
            for _item in self.quantity_for_usage_charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['quantityForUsageCharges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewExistingSubscriptionRequest:
        """Create an instance of PreviewExistingSubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewExistingSubscriptionRequest.parse_obj(obj)

        _obj = PreviewExistingSubscriptionRequest.parse_obj({
            "preview_start_date": PreviewStartDate.from_dict(obj.get("previewStartDate")) if obj.get("previewStartDate") is not None else None,
            "preview_through_date": PreviewThroughDate.from_dict(obj.get("previewThroughDate")) if obj.get("previewThroughDate") is not None else None,
            "quantity_for_usage_charges": [QuantityForUsageCharges.from_dict(_item) for _item in obj.get("quantityForUsageCharges")] if obj.get("quantityForUsageCharges") is not None else None
        })
        return _obj


