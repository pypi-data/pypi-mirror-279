# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class RefundItemPart(BaseModel):
    """
    RefundItemPart
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount of the refund part item. ")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the Zuora user who created the refund part item. ")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the refund part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10. ")
    credit_memo_item_id: Optional[StrictStr] = Field(None, alias="creditMemoItemId", description="The ID of the credit memo item associated with the refund part item. ")
    credit_tax_item_id: Optional[StrictStr] = Field(None, alias="creditTaxItemId", description="The ID of the credit memo taxation item associated with the refund part item. ")
    id: Optional[StrictStr] = Field(None, description="The ID of the refund part item. ")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the Zuora user who last updated the refund part item. ")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the refund part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10. ")
    organization_label: Optional[StrictStr] = Field(None, alias="organizationLabel")
    __properties = ["amount", "createdById", "createdDate", "creditMemoItemId", "creditTaxItemId", "id", "updatedById", "updatedDate", "organizationLabel"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RefundItemPart:
        """Create an instance of RefundItemPart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RefundItemPart:
        """Create an instance of RefundItemPart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RefundItemPart.parse_obj(obj)

        _obj = RefundItemPart.parse_obj({
            "amount": obj.get("amount"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "credit_memo_item_id": obj.get("creditMemoItemId"),
            "credit_tax_item_id": obj.get("creditTaxItemId"),
            "id": obj.get("id"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate"),
            "organization_label": obj.get("organizationLabel")
        })
        return _obj


