# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ElectronicPaymentOptions(BaseModel):
    """
    Container for the electronic payment options.   # noqa: E501
    """
    payment_gateway_id: Optional[StrictStr] = Field(None, alias="paymentGatewayId", description="Specifies the ID of a payment gateway to override the default gateway. If this field is not specified, the default payment gateway will be used to process the payment. ")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="Specifies an electronic payment method. It can be one that has already been associated with an invoice owner, or an orphan payment method, which is not associated with any invoice owner. For an orphan payment method, this operation will then associate it with the account that this order will be created under. ")
    __properties = ["paymentGatewayId", "paymentMethodId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ElectronicPaymentOptions:
        """Create an instance of ElectronicPaymentOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ElectronicPaymentOptions:
        """Create an instance of ElectronicPaymentOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ElectronicPaymentOptions.parse_obj(obj)

        _obj = ElectronicPaymentOptions.parse_obj({
            "payment_gateway_id": obj.get("paymentGatewayId"),
            "payment_method_id": obj.get("paymentMethodId")
        })
        return _obj


