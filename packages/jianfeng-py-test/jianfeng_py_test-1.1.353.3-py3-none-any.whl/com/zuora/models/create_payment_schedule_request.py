# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator
from com.zuora.models.create_payment_schedule_request_items import CreatePaymentScheduleRequestItems
from com.zuora.models.payment_schedule_billing_document import PaymentScheduleBillingDocument
from com.zuora.models.payment_schedule_payment_option_fields import PaymentSchedulePaymentOptionFields

class CreatePaymentScheduleRequest(BaseModel):
    """
    CreatePaymentScheduleRequest
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="ID of the customer account the payment schedule belongs to.  **Note:** `accountId` and `accountNumber` cannot both be `null`. When both fields are specified, the two values must match each other. ")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="Account number of the customer account the payment schedule belongs to.  **Note:** `accountId` and `accountNumber` cannot both be `null`. When both fields are specified, the two values must match each other. ")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount of each payment schedule item in the payment schedule.  **Note:** - This field is required when `items` is not specified. - This field will be ignored when `items` is specified. - When creating recurring payment schedules, there are 2 options to specify amounts:     - Specify `totalAmount` and `occurrences`, `amount` will be calculated.   - Specify `amount` and `occurrences`, `totalAmount` will be calculated.   You must specify either `totalAmount` or `amount`. Specifying both fields at the same time is not allowed. ")
    billing_document: Optional[PaymentScheduleBillingDocument] = Field(None, alias="billingDocument")
    currency: Optional[StrictStr] = Field(None, description="Currency of the payment schedule.  **Note:** - This field is optional. The default value is the account's default currency. - This field will be ignored when `items` is specified. ")
    description: Optional[StrictStr] = Field(None, description="Description of the payment schedule. Max length is 255. ")
    items: Optional[conlist(CreatePaymentScheduleRequestItems)] = Field(None, description="Container array for payment schedule items. ")
    occurrences: Optional[StrictInt] = Field(None, description="The number of payment schedule item to be created. Maximum value is 1000.  **Note:** - This field is required when `items` is not specified. - This field will be ignored when `items` is specified. ")
    payment_gateway_id: Optional[StrictStr] = Field(None, alias="paymentGatewayId", description="ID of the payment gateway.  **Note:** - This field is optional. The default value is the account's default payment gateway ID. If no payment gateway ID is found on the cusotmer account level, the default value will be the tenant's default payment gateway ID. - This field will be ignored when `items` is specified. ")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="ID of the payment method.  **Note:** - This field is optional. The default value is the account's default payment method ID. - This field will be ignored when `items` is specified. ")
    payment_option: Optional[conlist(PaymentSchedulePaymentOptionFields)] = Field(None, alias="paymentOption", description="Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.   Here is an example: ``` \"paymentOption\": [   {     \"type\": \"GatewayOptions\",     \"detail\": {       \"SecCode\":\"WEB\"     }   } ] ```  `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.  To enable this field, submit a request at [Zuora Global Support](https://support.zuora.com/). This field is only available if `zuora-version` is set to `337.0` or later. ")
    payment_schedule_number: Optional[StrictStr] = Field(None, alias="paymentScheduleNumber", description="You can use this field to specify the number of the payment schedule. Only characters from the following sets are allowed: A-Z, a-z, 0-9, and `-`.  Payment numbers must start with a letter. In addition,`-` can only be used at most once and cannot be placed at the beginning or the end of the payment numbers. ")
    period: Optional[StrictStr] = Field(None, description="The frequency for the payment collection since the `startDate`.  **Note:** - Thie field is required when `items` is not specified. - This field will be ignored when `items` is specified. - If `startDate` is `30` or `31` and `period` is `Monthly`, when in February, payment schedule will use the last day of February for payment collection. ")
    prepayment: Optional[StrictBool] = Field(None, description="Indicates whether the payments created by the payment schedule will be used as reserved payments. This field will only be available if the prepaid cash drawdown permission is enabled. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information. ")
    run_hour: Optional[StrictInt] = Field(None, alias="runHour", description="Specifies at which hour in the day in the tenant’s time zone when this payment will be collected. Available values: `[0,1,2,~,22,23]`.  **Note:** - If the time difference between your tenant’s timezone and the timezone where Zuora servers are is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half hour later than your scheduled time. - If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs. - This field is optional. The default value is `0`. - This field will be ignored when `items` is specified. ")
    standalone: Optional[StrictBool] = Field(None, description="Indicate whether the payments created by the payment schedule are standalone payments or not. When setting to `true`, standalone payments will be created. When setting to `false`, you can either specify a billing document, or not specifying any billing documents. In the later case, unapplied payments will be created. If set to `null`, standalone payment will be created.  **Note**:  - This field is only available if the Standalone Payment is enabled. Do not include this field if Standalone Payment is not enabled. - If Standalone Payment is enabled, default value is `true`. ")
    start_date: Optional[date] = Field(None, alias="startDate", description="The date for the first payment collection.  **Note:** - This field is required when `items` is not specified. - This field will be ignored when `items` is specified. ")
    total_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalAmount", description="The total amount of that the payment schedule will collect. This field is only available for recurring payment schedules.   **Note**: - When creating recurring payment schedules, there are 2 options to specify amounts:      - Specify `totalAmount` and `occurrences`, `amount` will be calculated.   - Specify `amount` and `occurrences`, `totalAmount` will be calculated.      You must specify either `totalAmount` or `amount`. Specifying both fields at the same time is not allowed. - If the Standalone Payments feature is enabled and `standalone` is set to `true` for the payment schedule, `totalAmount` will be ignored. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["accountId", "accountNumber", "amount", "billingDocument", "currency", "description", "items", "occurrences", "paymentGatewayId", "paymentMethodId", "paymentOption", "paymentScheduleNumber", "period", "prepayment", "runHour", "standalone", "startDate", "totalAmount"]

    @validator('period')
    def period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Monthly', 'Weekly', 'BiWeekly'):
            raise ValueError("must be one of enum values ('Monthly', 'Weekly', 'BiWeekly')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePaymentScheduleRequest:
        """Create an instance of CreatePaymentScheduleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing_document
        if self.billing_document:
            _dict['billingDocument'] = self.billing_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_option (list)
        _items = []
        if self.payment_option:
            for _item in self.payment_option:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentOption'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePaymentScheduleRequest:
        """Create an instance of CreatePaymentScheduleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePaymentScheduleRequest.parse_obj(obj)

        _obj = CreatePaymentScheduleRequest.parse_obj({
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "amount": obj.get("amount"),
            "billing_document": PaymentScheduleBillingDocument.from_dict(obj.get("billingDocument")) if obj.get("billingDocument") is not None else None,
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "items": [CreatePaymentScheduleRequestItems.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "occurrences": obj.get("occurrences"),
            "payment_gateway_id": obj.get("paymentGatewayId"),
            "payment_method_id": obj.get("paymentMethodId"),
            "payment_option": [PaymentSchedulePaymentOptionFields.from_dict(_item) for _item in obj.get("paymentOption")] if obj.get("paymentOption") is not None else None,
            "payment_schedule_number": obj.get("paymentScheduleNumber"),
            "period": obj.get("period"),
            "prepayment": obj.get("prepayment"),
            "run_hour": obj.get("runHour"),
            "standalone": obj.get("standalone"),
            "start_date": obj.get("startDate"),
            "total_amount": obj.get("totalAmount")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


