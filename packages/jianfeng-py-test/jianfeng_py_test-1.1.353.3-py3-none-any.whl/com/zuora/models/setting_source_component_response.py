# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from com.zuora.models.setting_component_key_value import SettingComponentKeyValue

class SettingSourceComponentResponse(BaseModel):
    """
    Provides details about the different components that need to be compared and deployed.  # noqa: E501
    """
    custom_fields: Optional[conlist(SettingComponentKeyValue)] = Field(None, alias="customFields")
    custom_objects: Optional[conlist(SettingComponentKeyValue)] = Field(None, alias="customObjects")
    data_access_control: Optional[conlist(SettingComponentKeyValue)] = Field(None, alias="dataAccessControl")
    notifications: Optional[conlist(SettingComponentKeyValue)] = None
    product_catalog: Optional[conlist(SettingComponentKeyValue)] = Field(None, alias="productCatalog")
    settings: Optional[conlist(SettingComponentKeyValue)] = None
    workflows: Optional[conlist(SettingComponentKeyValue)] = None
    __properties = ["customFields", "customObjects", "dataAccessControl", "notifications", "productCatalog", "settings", "workflows"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SettingSourceComponentResponse:
        """Create an instance of SettingSourceComponentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_objects (list)
        _items = []
        if self.custom_objects:
            for _item in self.custom_objects:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customObjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_access_control (list)
        _items = []
        if self.data_access_control:
            for _item in self.data_access_control:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataAccessControl'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notifications (list)
        _items = []
        if self.notifications:
            for _item in self.notifications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_catalog (list)
        _items = []
        if self.product_catalog:
            for _item in self.product_catalog:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productCatalog'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in settings (list)
        _items = []
        if self.settings:
            for _item in self.settings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['settings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in workflows (list)
        _items = []
        if self.workflows:
            for _item in self.workflows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workflows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SettingSourceComponentResponse:
        """Create an instance of SettingSourceComponentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SettingSourceComponentResponse.parse_obj(obj)

        _obj = SettingSourceComponentResponse.parse_obj({
            "custom_fields": [SettingComponentKeyValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "custom_objects": [SettingComponentKeyValue.from_dict(_item) for _item in obj.get("customObjects")] if obj.get("customObjects") is not None else None,
            "data_access_control": [SettingComponentKeyValue.from_dict(_item) for _item in obj.get("dataAccessControl")] if obj.get("dataAccessControl") is not None else None,
            "notifications": [SettingComponentKeyValue.from_dict(_item) for _item in obj.get("notifications")] if obj.get("notifications") is not None else None,
            "product_catalog": [SettingComponentKeyValue.from_dict(_item) for _item in obj.get("productCatalog")] if obj.get("productCatalog") is not None else None,
            "settings": [SettingComponentKeyValue.from_dict(_item) for _item in obj.get("settings")] if obj.get("settings") is not None else None,
            "workflows": [SettingComponentKeyValue.from_dict(_item) for _item in obj.get("workflows")] if obj.get("workflows") is not None else None
        })
        return _obj


