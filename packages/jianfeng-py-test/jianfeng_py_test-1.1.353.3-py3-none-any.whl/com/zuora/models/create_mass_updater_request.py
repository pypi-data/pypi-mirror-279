# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictBytes, StrictStr

class CreateMassUpdaterRequest(BaseModel):
    """
    CreateMassUpdaterRequest
    """
    file: Union[StrictBytes, StrictStr] = Field(..., description="File containing data about the mass action you want to perform. The file requirements are the same as when uploading a file through the Mass Updater in the Zuora UI. The file must be a `.csv` file or a zipped `.csv` file.  The maximum file size is 4 MB.  The data in the file must be formatted according to the mass action type you want to perform. ")
    params: StrictStr = Field(..., description="Container for the following fields. You must format this parameter as a JSON object.  * `actionType` (string, **Required**) - Type of mass action you want to perform. The following mass actions are supported: `UpdateAccountingCode`, `CreateRevenueSchedule`, `UpdateRevenueSchedule`, `DeleteRevenueSchedule`, `ImportFXRate`, and `MPU`.  * `checksum` (string) - An MD5 checksum that is used to validate the integrity of   the uploaded file. The checksum is a 32-character string. ")
    __properties = ["file", "params"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateMassUpdaterRequest:
        """Create an instance of CreateMassUpdaterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateMassUpdaterRequest:
        """Create an instance of CreateMassUpdaterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateMassUpdaterRequest.parse_obj(obj)

        _obj = CreateMassUpdaterRequest.parse_obj({
            "file": obj.get("file"),
            "params": obj.get("params")
        })
        return _obj


