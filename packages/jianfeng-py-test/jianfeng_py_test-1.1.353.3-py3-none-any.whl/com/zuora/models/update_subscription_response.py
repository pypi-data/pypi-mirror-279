# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from com.zuora.models.charge_metrics import ChargeMetrics
from com.zuora.models.preview_subscription_invoice import PreviewSubscriptionInvoice
from com.zuora.models.preview_subscription_invoice_item import PreviewSubscriptionInvoiceItem
from com.zuora.models.subscription_credit_memo import SubscriptionCreditMemo

class UpdateSubscriptionResponse(BaseModel):
    """
    UpdateSubscriptionResponse
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Invoice amount. Preview mode only. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="Invoice amount minus tax. Preview mode only. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ")
    charge_metrics: Optional[ChargeMetrics] = Field(None, alias="chargeMetrics")
    credit_memo: Optional[SubscriptionCreditMemo] = Field(None, alias="creditMemo")
    credit_memo_id: Optional[StrictStr] = Field(None, alias="creditMemoId", description="The credit memo ID, if a credit memo is generated during the subscription process.  **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. ")
    invoice: Optional[PreviewSubscriptionInvoice] = None
    invoice_id: Optional[StrictStr] = Field(None, alias="invoiceId", description="Invoice ID, if an invoice is generated during the update. ")
    invoice_items: Optional[conlist(PreviewSubscriptionInvoiceItem)] = Field(None, alias="invoiceItems", description="This field is only available REST API max version 206.0. Container for invoice items. ")
    invoice_target_date: Optional[date] = Field(None, alias="invoiceTargetDate", description="Date through which charges are calculated on the invoice, as yyyy-mm-dd. Preview mode only.  **Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information. ")
    paid_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="paidAmount", description="Payment amount, if a payment is collected ")
    payment_id: Optional[StrictStr] = Field(None, alias="paymentId", description="Payment ID, if a payment is collected. ")
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId", description="The ID of the resulting new subscription. ")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully. ")
    target_date: Optional[date] = Field(None, alias="targetDate", description="Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.  **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information. ")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="Tax amount on the invoice. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ")
    total_delta_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalDeltaMrr", description="Change in the subscription monthly recurring revenue as a result of the update. ")
    total_delta_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalDeltaTcv", description="Change in the total contracted value of the subscription as a result of the update. ")
    order_numbers: Optional[conlist(StrictStr)] = Field(None, alias="orderNumbers", description="The order numbers. It is available for Orders Tenants. ")
    __properties = ["amount", "amountWithoutTax", "chargeMetrics", "creditMemo", "creditMemoId", "invoice", "invoiceId", "invoiceItems", "invoiceTargetDate", "paidAmount", "paymentId", "subscriptionId", "success", "targetDate", "taxAmount", "totalDeltaMrr", "totalDeltaTcv", "orderNumbers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateSubscriptionResponse:
        """Create an instance of UpdateSubscriptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of charge_metrics
        if self.charge_metrics:
            _dict['chargeMetrics'] = self.charge_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_memo
        if self.credit_memo:
            _dict['creditMemo'] = self.credit_memo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item in self.invoice_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoiceItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateSubscriptionResponse:
        """Create an instance of UpdateSubscriptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateSubscriptionResponse.parse_obj(obj)

        _obj = UpdateSubscriptionResponse.parse_obj({
            "amount": obj.get("amount"),
            "amount_without_tax": obj.get("amountWithoutTax"),
            "charge_metrics": ChargeMetrics.from_dict(obj.get("chargeMetrics")) if obj.get("chargeMetrics") is not None else None,
            "credit_memo": SubscriptionCreditMemo.from_dict(obj.get("creditMemo")) if obj.get("creditMemo") is not None else None,
            "credit_memo_id": obj.get("creditMemoId"),
            "invoice": PreviewSubscriptionInvoice.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "invoice_id": obj.get("invoiceId"),
            "invoice_items": [PreviewSubscriptionInvoiceItem.from_dict(_item) for _item in obj.get("invoiceItems")] if obj.get("invoiceItems") is not None else None,
            "invoice_target_date": obj.get("invoiceTargetDate"),
            "paid_amount": obj.get("paidAmount"),
            "payment_id": obj.get("paymentId"),
            "subscription_id": obj.get("subscriptionId"),
            "success": obj.get("success"),
            "target_date": obj.get("targetDate"),
            "tax_amount": obj.get("taxAmount"),
            "total_delta_mrr": obj.get("totalDeltaMrr"),
            "total_delta_tcv": obj.get("totalDeltaTcv"),
            "order_numbers": obj.get("orderNumbers")
        })
        return _obj


