# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class TimeSlicedElpNetMetrics(BaseModel):
    """
    TimeSlicedElpNetMetrics
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The extended list price which is calculated by the original product catalog list price multiplied by the delta quantity.")
    end_date: Optional[date] = Field(None, alias="endDate", description="The latest date that the metric applies.")
    generated_reason: Optional[StrictStr] = Field(None, alias="generatedReason")
    invoice_owner: Optional[StrictStr] = Field(None, alias="invoiceOwner", description="The acount number of the billing account that is billed for the subscription.")
    order_item_id: Optional[StrictStr] = Field(None, alias="orderItemId", description="The ID of the order item referenced by the order metrics.")
    start_date: Optional[date] = Field(None, alias="startDate", description="The earliest date that the metric applies.")
    subscription_owner: Optional[StrictStr] = Field(None, alias="subscriptionOwner", description="The acount number of the billing account that owns the subscription.")
    tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The tax amount in the metric when the tax permission is enabled.")
    term_number: Optional[StrictInt] = Field(None, alias="termNumber")
    type: Optional[StrictStr] = None
    __properties = ["amount", "endDate", "generatedReason", "invoiceOwner", "orderItemId", "startDate", "subscriptionOwner", "tax", "termNumber", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TimeSlicedElpNetMetrics:
        """Create an instance of TimeSlicedElpNetMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TimeSlicedElpNetMetrics:
        """Create an instance of TimeSlicedElpNetMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TimeSlicedElpNetMetrics.parse_obj(obj)

        _obj = TimeSlicedElpNetMetrics.parse_obj({
            "amount": obj.get("amount"),
            "end_date": obj.get("endDate"),
            "generated_reason": obj.get("generatedReason"),
            "invoice_owner": obj.get("invoiceOwner"),
            "order_item_id": obj.get("orderItemId"),
            "start_date": obj.get("startDate"),
            "subscription_owner": obj.get("subscriptionOwner"),
            "tax": obj.get("tax"),
            "term_number": obj.get("termNumber"),
            "type": obj.get("type")
        })
        return _obj


