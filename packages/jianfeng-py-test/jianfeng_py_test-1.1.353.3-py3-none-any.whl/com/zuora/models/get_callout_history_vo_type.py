# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class GetCalloutHistoryVOType(BaseModel):
    """
    GetCalloutHistoryVOType
    """
    attempted_num: Optional[StrictStr] = Field(None, alias="attemptedNum", description="The number of times the callout was retried. ")
    create_time: Optional[StrictStr] = Field(None, alias="createTime", description="The time that the calloutHistory record was made. ")
    event_category: Optional[StrictStr] = Field(None, alias="eventCategory", description="The event category for the callout. ")
    event_context: Optional[StrictStr] = Field(None, alias="eventContext", description="The context of the callout event. ")
    notification: Optional[StrictStr] = Field(None, description="The name of the notification. ")
    request_method: Optional[StrictStr] = Field(None, alias="requestMethod", description="The request method set in notifications settings. ")
    request_url: Optional[StrictStr] = Field(None, alias="requestUrl", description="The base url set in notifications settings. ")
    response_code: Optional[StrictStr] = Field(None, alias="responseCode", description="The responseCode of the request. ")
    response_content: Optional[StrictStr] = Field(None, alias="responseContent")
    __properties = ["attemptedNum", "createTime", "eventCategory", "eventContext", "notification", "requestMethod", "requestUrl", "responseCode", "responseContent"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetCalloutHistoryVOType:
        """Create an instance of GetCalloutHistoryVOType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetCalloutHistoryVOType:
        """Create an instance of GetCalloutHistoryVOType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetCalloutHistoryVOType.parse_obj(obj)

        _obj = GetCalloutHistoryVOType.parse_obj({
            "attempted_num": obj.get("attemptedNum"),
            "create_time": obj.get("createTime"),
            "event_category": obj.get("eventCategory"),
            "event_context": obj.get("eventContext"),
            "notification": obj.get("notification"),
            "request_method": obj.get("requestMethod"),
            "request_url": obj.get("requestUrl"),
            "response_code": obj.get("responseCode"),
            "response_content": obj.get("responseContent")
        })
        return _obj


