# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.billing_adjustment_exclusion import BillingAdjustmentExclusion

class CreateBillingAdjustmentRequest(BaseModel):
    """
    CreateBillingAdjustmentRequest
    """
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The account number for which the adjustment is created.    **Note**: The account number should be of the subscription owner.  **Note**: Only one of accountNumber or subscriptionNumber should be provided. ")
    charge_numbers: Optional[conlist(StrictStr)] = Field(None, alias="chargeNumbers", description="An optional container to specify charge numbers in the subscription for which the adjustment needs to be created. ")
    deferred_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="deferredRevenueAccountingCode", description="The accounting code for the deferred revenue, such as Monthly Recurring Liability. ")
    end_date: date = Field(..., alias="endDate", description="The end date of the adjustment, in `yyyy-mm-dd` format. This is inclusive. ")
    exclusion: Optional[conlist(BillingAdjustmentExclusion)] = Field(None, description="The charge numbers and the corresponding dates for exclusion of adjustment. ")
    reason: Optional[StrictStr] = Field(None, description="The reason for the adjustment. ")
    recognized_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="recognizedRevenueAccountingCode", description="The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges. ")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(None, alias="revenueRecognitionRuleName", description="The name of the revenue recognition rule governing the revenue schedule. ")
    start_date: date = Field(..., alias="startDate", description="The start date of the adjustment, in `yyyy-mm-dd` format. This is inclusive. ")
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber", description="The subscription number for which the adjustment is created.  **Note**: Only one of accountNumber or subscriptionNumber should be provided. ")
    type: Optional[StrictStr] = None
    __properties = ["accountNumber", "chargeNumbers", "deferredRevenueAccountingCode", "endDate", "exclusion", "reason", "recognizedRevenueAccountingCode", "revenueRecognitionRuleName", "startDate", "subscriptionNumber", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateBillingAdjustmentRequest:
        """Create an instance of CreateBillingAdjustmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in exclusion (list)
        _items = []
        if self.exclusion:
            for _item in self.exclusion:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exclusion'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateBillingAdjustmentRequest:
        """Create an instance of CreateBillingAdjustmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateBillingAdjustmentRequest.parse_obj(obj)

        _obj = CreateBillingAdjustmentRequest.parse_obj({
            "account_number": obj.get("accountNumber"),
            "charge_numbers": obj.get("chargeNumbers"),
            "deferred_revenue_accounting_code": obj.get("deferredRevenueAccountingCode"),
            "end_date": obj.get("endDate"),
            "exclusion": [BillingAdjustmentExclusion.from_dict(_item) for _item in obj.get("exclusion")] if obj.get("exclusion") is not None else None,
            "reason": obj.get("reason"),
            "recognized_revenue_accounting_code": obj.get("recognizedRevenueAccountingCode"),
            "revenue_recognition_rule_name": obj.get("revenueRecognitionRuleName"),
            "start_date": obj.get("startDate"),
            "subscription_number": obj.get("subscriptionNumber"),
            "type": obj.get("type")
        })
        return _obj


