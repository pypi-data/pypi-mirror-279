# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from com.zuora.models.debit_memo_item_from_invoice_item_request import DebitMemoItemFromInvoiceItemRequest

class CreateDebitMemoFromInvoiceRequest(BaseModel):
    """
    CreateDebitMemoFromInvoiceRequest
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    auto_pay: Optional[StrictBool] = Field(None, alias="autoPay", description="Whether debit memos are automatically picked up for processing in the corresponding payment run.  By default, debit memos are automatically picked up for processing in the corresponding payment run. ")
    auto_post: Optional[StrictBool] = Field(False, alias="autoPost", description="Whether to automatically post the debit memo after it is created.  Setting this field to `true`, you do not need to separately call the [Post debit memo](https://www.zuora.com/developer/api-references/api/operation/Put_PostDebitMemo) operation to post the debit memo. ")
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Comments about the debit memo.  ")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="The date when the debit memo takes effect. ")
    invoice_id: Optional[StrictStr] = Field(None, alias="invoiceId", description="The ID of the invoice that the debit memo is created from. * If this field is specified, its value must be the same as the value of the `invoiceId` path parameter. Otherwise, its value overrides the value of the `invoiceId` path parameter.  * If this field is not specified, the value of the `invoiceId` path parameter is used.  ")
    items: Optional[conlist(DebitMemoItemFromInvoiceItemRequest, max_items=1000)] = Field(None, description="Container for items. The maximum number of items is 1,000. ")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. ")
    tax_auto_calculation: Optional[StrictBool] = Field(True, alias="taxAutoCalculation", description="Whether to automatically calculate taxes in the debit memo. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "autoPay", "autoPost", "comment", "effectiveDate", "invoiceId", "items", "reasonCode", "taxAutoCalculation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateDebitMemoFromInvoiceRequest:
        """Create an instance of CreateDebitMemoFromInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateDebitMemoFromInvoiceRequest:
        """Create an instance of CreateDebitMemoFromInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateDebitMemoFromInvoiceRequest.parse_obj(obj)

        _obj = CreateDebitMemoFromInvoiceRequest.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "auto_pay": obj.get("autoPay"),
            "auto_post": obj.get("autoPost") if obj.get("autoPost") is not None else False,
            "comment": obj.get("comment"),
            "effective_date": obj.get("effectiveDate"),
            "invoice_id": obj.get("invoiceId"),
            "items": [DebitMemoItemFromInvoiceItemRequest.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "reason_code": obj.get("reasonCode"),
            "tax_auto_calculation": obj.get("taxAutoCalculation") if obj.get("taxAutoCalculation") is not None else True
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


