# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from com.zuora.models.bulk_update_order_line_item import BulkUpdateOrderLineItem
from com.zuora.models.processing_options import ProcessingOptions

class BulkUpdateOrderLineItemsRequest(BaseModel):
    """
    BulkUpdateOrderLineItemsRequest
    """
    order_line_items: Optional[conlist(BulkUpdateOrderLineItem)] = Field(None, alias="orderLineItems")
    processing_options: Optional[ProcessingOptions] = Field(None, alias="processingOptions")
    __properties = ["orderLineItems", "processingOptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BulkUpdateOrderLineItemsRequest:
        """Create an instance of BulkUpdateOrderLineItemsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in order_line_items (list)
        _items = []
        if self.order_line_items:
            for _item in self.order_line_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderLineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of processing_options
        if self.processing_options:
            _dict['processingOptions'] = self.processing_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BulkUpdateOrderLineItemsRequest:
        """Create an instance of BulkUpdateOrderLineItemsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BulkUpdateOrderLineItemsRequest.parse_obj(obj)

        _obj = BulkUpdateOrderLineItemsRequest.parse_obj({
            "order_line_items": [BulkUpdateOrderLineItem.from_dict(_item) for _item in obj.get("orderLineItems")] if obj.get("orderLineItems") is not None else None,
            "processing_options": ProcessingOptions.from_dict(obj.get("processingOptions")) if obj.get("processingOptions") is not None else None
        })
        return _obj


