# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator

class BillRunSchedule(BaseModel):
    """
    Container for information about the scheduled bill run.   # noqa: E501
    """
    repeat_from: Optional[date] = Field(None, alias="repeatFrom", description="The start date of the scheduled bill run. ")
    repeat_to: Optional[date] = Field(None, alias="repeatTo", description="The end date of of the scheduled bill run. ")
    repeat_type: Optional[StrictStr] = Field(None, alias="repeatType", description="The repeat type of the bill run. ")
    run_time: Optional[StrictInt] = Field(None, alias="runTime", description="The scheduled run time (hour) of day.  **Values:** 0 - 23 ")
    weekly_on_day: Optional[conlist(StrictStr)] = Field(None, alias="weeklyOnDay", description="The repeat day in a week. ")
    monthly_on_end_of_month: Optional[StrictBool] = Field(None, alias="monthlyOnEndOfMonth", description="Whether to schedule monthly bill run on the end of month or the specific day of month. This field is available only when repeatType is set to monthly and repeatFrom is set to the end of month.  For example: - When repeatFrom = '2024-04-30' and monthlyOnEndOfMonth = true, next bill run will be scheduled on 2024-05-31 - When repeatFrom = '2024-04-30' and monthlyOnEndOfMonth = false, next bill run will be scheduled on 2024-05-30 ")
    __properties = ["repeatFrom", "repeatTo", "repeatType", "runTime", "weeklyOnDay", "monthlyOnEndOfMonth"]

    @validator('repeat_type')
    def repeat_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'Daily', 'Weekly', 'Monthly'):
            raise ValueError("must be one of enum values ('None', 'Daily', 'Weekly', 'Monthly')")
        return value

    @validator('weekly_on_day')
    def weekly_on_day_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'):
                raise ValueError("each list item must be one of ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BillRunSchedule:
        """Create an instance of BillRunSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BillRunSchedule:
        """Create an instance of BillRunSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BillRunSchedule.parse_obj(obj)

        _obj = BillRunSchedule.parse_obj({
            "repeat_from": obj.get("repeatFrom"),
            "repeat_to": obj.get("repeatTo"),
            "repeat_type": obj.get("repeatType"),
            "run_time": obj.get("runTime"),
            "weekly_on_day": obj.get("weeklyOnDay"),
            "monthly_on_end_of_month": obj.get("monthlyOnEndOfMonth")
        })
        return _obj


