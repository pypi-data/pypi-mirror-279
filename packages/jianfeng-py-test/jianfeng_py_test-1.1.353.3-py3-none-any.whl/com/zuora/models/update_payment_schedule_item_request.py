# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, condecimal, conlist
from com.zuora.models.payment_schedule_linked_payment_id import PaymentScheduleLinkedPaymentID
from com.zuora.models.payment_schedule_payment_option_fields import PaymentSchedulePaymentOptionFields

class UpdatePaymentScheduleItemRequest(BaseModel):
    """
    UpdatePaymentScheduleItemRequest
    """
    amount: Optional[condecimal()] = Field(None, description="The amount of the payment. ")
    currency: Optional[StrictStr] = Field(None, description="The currency of the payment. ")
    description: Optional[StrictStr] = Field(None, description="The description of the payment schedule item. ")
    link_payments: Optional[conlist(PaymentScheduleLinkedPaymentID)] = Field(None, alias="linkPayments", description="Container for payments linked to the payment schedule item. ")
    payment_gateway_id: Optional[StrictStr] = Field(None, alias="paymentGatewayId", description="ID of the payment gateway of the payment schedule item. ")
    payment_id: Optional[StrictStr] = Field(None, alias="paymentId", description="ID of the payment to be linked to the payment schedule item.  **Note**: This feild is version controlled. To enable this field, you must set `zuora-version` to equal or smaller than `336.0`. ")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="ID of the payment method of the payment schedule item. ")
    payment_option: Optional[conlist(PaymentSchedulePaymentOptionFields)] = Field(None, alias="paymentOption", description="Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.  Here is an example: ``` \"paymentOption\": [   {     \"type\": \"GatewayOptions\",     \"detail\": {       \"SecCode\":\"WEB\"     }   } ] ```  `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.  To enable this field, submit a request at [Zuora Global Support](https://support.zuora.com/). This field is only available if `zuora-version` is set to `337.0` or later. ")
    run_hour: Optional[StrictInt] = Field(None, alias="runHour", description="At which hour of the day in the tenantâ€™s timezone this payment will be collected. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs. ")
    scheduled_date: Optional[date] = Field(None, alias="scheduledDate", description="The scheduled date when the payment is processed. ")
    unlink_payments: Optional[conlist(PaymentScheduleLinkedPaymentID)] = Field(None, alias="unlinkPayments", description="Container for payments to be unlinked from the payment schedule item. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["amount", "currency", "description", "linkPayments", "paymentGatewayId", "paymentId", "paymentMethodId", "paymentOption", "runHour", "scheduledDate", "unlinkPayments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdatePaymentScheduleItemRequest:
        """Create an instance of UpdatePaymentScheduleItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in link_payments (list)
        _items = []
        if self.link_payments:
            for _item in self.link_payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['linkPayments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_option (list)
        _items = []
        if self.payment_option:
            for _item in self.payment_option:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentOption'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in unlink_payments (list)
        _items = []
        if self.unlink_payments:
            for _item in self.unlink_payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['unlinkPayments'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdatePaymentScheduleItemRequest:
        """Create an instance of UpdatePaymentScheduleItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdatePaymentScheduleItemRequest.parse_obj(obj)

        _obj = UpdatePaymentScheduleItemRequest.parse_obj({
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "link_payments": [PaymentScheduleLinkedPaymentID.from_dict(_item) for _item in obj.get("linkPayments")] if obj.get("linkPayments") is not None else None,
            "payment_gateway_id": obj.get("paymentGatewayId"),
            "payment_id": obj.get("paymentId"),
            "payment_method_id": obj.get("paymentMethodId"),
            "payment_option": [PaymentSchedulePaymentOptionFields.from_dict(_item) for _item in obj.get("paymentOption")] if obj.get("paymentOption") is not None else None,
            "run_hour": obj.get("runHour"),
            "scheduled_date": obj.get("scheduledDate"),
            "unlink_payments": [PaymentScheduleLinkedPaymentID.from_dict(_item) for _item in obj.get("unlinkPayments")] if obj.get("unlinkPayments") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


