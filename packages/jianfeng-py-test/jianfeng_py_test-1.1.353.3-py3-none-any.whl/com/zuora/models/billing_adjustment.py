# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, condecimal

class BillingAdjustment(BaseModel):
    """
    BillingAdjustment
    """
    adjustment_id: Optional[StrictStr] = Field(None, alias="adjustmentId", description="The system generated Adjustment Id. ")
    adjustment_number: Optional[StrictStr] = Field(None, alias="adjustmentNumber", description="The system generated Adjustment Number. ")
    amount: Optional[condecimal()] = Field(None, description="The amount of the adjustment. ")
    billing_date: Optional[date] = Field(None, alias="billingDate", description="The billing date is same as the delivery date of the adjustment, in `yyyy-mm-dd` format. ")
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="The charge number in the subscription for which the adjustment is created. ")
    credit_memo_number: Optional[StrictStr] = Field(None, alias="creditMemoNumber", description="The Credit Memo generated for the adjustment. ")
    deferred_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="deferredRevenueAccountingCode", description="The accounting code for the deferred revenue, such as Monthly Recurring Liability. ")
    delivery_date: Optional[date] = Field(None, alias="deliveryDate", description="The adjustment date, in `yyyy-mm-dd` format. ")
    delivery_day: Optional[StrictStr] = Field(None, alias="deliveryDay", description="The adjustment day of the week. ")
    eligible: Optional[StrictBool] = Field(None, description="The eligible flag is set as true for a successfully created adjustment. ")
    reason: Optional[StrictStr] = Field(None, description="The reason for the adjustment. ")
    recognized_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="recognizedRevenueAccountingCode", description="The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges. ")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(None, alias="revenueRecognitionRuleName", description="The name of the revenue recognition rule governing the revenue schedule. ")
    status: Optional[StrictStr] = Field(None, description="The status of the adjustment will be `Billed` or `Cancelled`. ")
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber", description="The subscription number for which the adjustment is created. ")
    __properties = ["adjustmentId", "adjustmentNumber", "amount", "billingDate", "chargeNumber", "creditMemoNumber", "deferredRevenueAccountingCode", "deliveryDate", "deliveryDay", "eligible", "reason", "recognizedRevenueAccountingCode", "revenueRecognitionRuleName", "status", "subscriptionNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BillingAdjustment:
        """Create an instance of BillingAdjustment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BillingAdjustment:
        """Create an instance of BillingAdjustment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BillingAdjustment.parse_obj(obj)

        _obj = BillingAdjustment.parse_obj({
            "adjustment_id": obj.get("adjustmentId"),
            "adjustment_number": obj.get("adjustmentNumber"),
            "amount": obj.get("amount"),
            "billing_date": obj.get("billingDate"),
            "charge_number": obj.get("chargeNumber"),
            "credit_memo_number": obj.get("creditMemoNumber"),
            "deferred_revenue_accounting_code": obj.get("deferredRevenueAccountingCode"),
            "delivery_date": obj.get("deliveryDate"),
            "delivery_day": obj.get("deliveryDay"),
            "eligible": obj.get("eligible"),
            "reason": obj.get("reason"),
            "recognized_revenue_accounting_code": obj.get("recognizedRevenueAccountingCode"),
            "revenue_recognition_rule_name": obj.get("revenueRecognitionRuleName"),
            "status": obj.get("status"),
            "subscription_number": obj.get("subscriptionNumber")
        })
        return _obj


