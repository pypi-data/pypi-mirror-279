# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.migration_component_content import MigrationComponentContent

class CompareSchemaKeyValue(BaseModel):
    """
    When a comparison is made between a source and target tenant, it sends a response to the user interface.  # noqa: E501
    """
    difference: Optional[Dict[str, conlist(StrictStr)]] = Field(None, description="Returns the different components list.")
    response: Optional[conlist(MigrationComponentContent)] = Field(None, description="Provides the total reponse of the components.")
    segregation_keys: Optional[conlist(StrictStr)] = Field(None, alias="segregationKeys", description="Provides separation of components.")
    __properties = ["difference", "response", "segregationKeys"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompareSchemaKeyValue:
        """Create an instance of CompareSchemaKeyValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in difference (dict of array)
        _field_dict_of_array = {}
        if self.difference:
            for _key in self.difference:
                if self.difference[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.difference[_key]
                    ]
            _dict['difference'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each item in response (list)
        _items = []
        if self.response:
            for _item in self.response:
                if _item:
                    _items.append(_item.to_dict())
            _dict['response'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompareSchemaKeyValue:
        """Create an instance of CompareSchemaKeyValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompareSchemaKeyValue.parse_obj(obj)

        _obj = CompareSchemaKeyValue.parse_obj({
            "difference": obj.get("difference"),
            "response": [MigrationComponentContent.from_dict(_item) for _item in obj.get("response")] if obj.get("response") is not None else None,
            "segregation_keys": obj.get("segregationKeys")
        })
        return _obj


