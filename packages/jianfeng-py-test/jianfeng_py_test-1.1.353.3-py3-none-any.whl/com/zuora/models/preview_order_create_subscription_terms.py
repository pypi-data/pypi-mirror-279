# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from com.zuora.models.initial_term import InitialTerm
from com.zuora.models.renewal_term import RenewalTerm

class PreviewOrderCreateSubscriptionTerms(BaseModel):
    """
    Container for the terms and renewal settings of the subscription.   # noqa: E501
    """
    auto_renew: Optional[StrictBool] = Field(None, alias="autoRenew", description="Specifies whether the subscription automatically renews at the end of the each term. Only applicable if the type of the first term is `TERMED`. ")
    initial_term: InitialTerm = Field(..., alias="initialTerm")
    renewal_setting: Optional[StrictStr] = Field(None, alias="renewalSetting")
    renewal_terms: Optional[conlist(RenewalTerm)] = Field(None, alias="renewalTerms", description="List of renewal terms of the subscription. Only applicable if the type of the first term is `TERMED` and the value of the `renewalSetting` field is `RENEW_WITH_SPECIFIC_TERM`. ")
    __properties = ["autoRenew", "initialTerm", "renewalSetting", "renewalTerms"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewOrderCreateSubscriptionTerms:
        """Create an instance of PreviewOrderCreateSubscriptionTerms from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of initial_term
        if self.initial_term:
            _dict['initialTerm'] = self.initial_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in renewal_terms (list)
        _items = []
        if self.renewal_terms:
            for _item in self.renewal_terms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['renewalTerms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewOrderCreateSubscriptionTerms:
        """Create an instance of PreviewOrderCreateSubscriptionTerms from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewOrderCreateSubscriptionTerms.parse_obj(obj)

        _obj = PreviewOrderCreateSubscriptionTerms.parse_obj({
            "auto_renew": obj.get("autoRenew"),
            "initial_term": InitialTerm.from_dict(obj.get("initialTerm")) if obj.get("initialTerm") is not None else None,
            "renewal_setting": obj.get("renewalSetting"),
            "renewal_terms": [RenewalTerm.from_dict(_item) for _item in obj.get("renewalTerms")] if obj.get("renewalTerms") is not None else None
        })
        return _obj


