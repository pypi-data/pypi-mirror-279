# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from com.zuora.models.payment_request_finance_information import PaymentRequestFinanceInformation

class UpdatePaymentRequest(BaseModel):
    """
    UpdatePaymentRequest
    """
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Comments about the payment. ")
    finance_information: Optional[PaymentRequestFinanceInformation] = Field(None, alias="financeInformation")
    gateway_state: Optional[StrictStr] = Field(None, alias="gatewayState", description="This field is mainly used for gateway reconciliation. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Payment_Operations/DA_Electronic_Payment_Processing#Gateway_Reconciliation_Consideration\" target=\"_blank\">Electronic payment processing</a> for details.  You must have the **Edit Payment Gateway Status** <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/User_Roles/e_Payments_Roles\" target=\"_blank\">user permission</a> to update this field. ")
    payment_schedule_key: Optional[StrictStr] = Field(None, alias="paymentScheduleKey", description="The unique ID or the number of the payment schedule to be linked with the payment. See [Link payments to payment schedules](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Payment_Schedules/Link_payments_with_payment_schedules) for more information.")
    reference_id: Optional[constr(strict=True, max_length=100, min_length=0)] = Field(None, alias="referenceId", description="The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.  You can only update the reference ID for external payments. ")
    gateway_reconciliation_status: Optional[constr(strict=True, max_length=64)] = Field(None, alias="gatewayReconciliationStatus")
    gateway_reconciliation_reason: Optional[constr(strict=True, max_length=64)] = Field(None, alias="gatewayReconciliationReason")
    payout_id: Optional[constr(strict=True, max_length=64)] = Field(None, alias="payoutId")
    additional_properties: Dict[str, Any] = {}
    __properties = ["comment", "financeInformation", "gatewayState", "paymentScheduleKey", "referenceId", "gatewayReconciliationStatus", "gatewayReconciliationReason", "payoutId"]

    @validator('gateway_state')
    def gateway_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NotSubmitted', 'Submitted', 'Settled', 'FailedToSettle'):
            raise ValueError("must be one of enum values ('NotSubmitted', 'Submitted', 'Settled', 'FailedToSettle')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdatePaymentRequest:
        """Create an instance of UpdatePaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdatePaymentRequest:
        """Create an instance of UpdatePaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdatePaymentRequest.parse_obj(obj)

        _obj = UpdatePaymentRequest.parse_obj({
            "comment": obj.get("comment"),
            "finance_information": PaymentRequestFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "gateway_state": obj.get("gatewayState"),
            "payment_schedule_key": obj.get("paymentScheduleKey"),
            "reference_id": obj.get("referenceId"),
            "gateway_reconciliation_status": obj.get("gatewayReconciliationStatus"),
            "gateway_reconciliation_reason": obj.get("gatewayReconciliationReason"),
            "payout_id": obj.get("payoutId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


