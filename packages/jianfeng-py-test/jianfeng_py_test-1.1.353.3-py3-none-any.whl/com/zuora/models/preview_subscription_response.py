# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, conlist
from com.zuora.models.charge_metrics import ChargeMetrics
from com.zuora.models.preview_subscription_invoice import PreviewSubscriptionInvoice
from com.zuora.models.preview_subscription_invoice_item import PreviewSubscriptionInvoiceItem
from com.zuora.models.subscription_credit_memo import SubscriptionCreditMemo

class PreviewSubscriptionResponse(BaseModel):
    """
    PreviewSubscriptionResponse
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Invoice amount. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="Invoice amount minus tax. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ")
    charge_metrics: Optional[conlist(ChargeMetrics)] = Field(None, alias="chargeMetrics")
    contracted_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="contractedMrr", description="Monthly recurring revenue of the subscription. ")
    credit_memo: Optional[SubscriptionCreditMemo] = Field(None, alias="creditMemo")
    document_date: Optional[date] = Field(None, alias="documentDate", description="The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.  - If this field is specified, the specified date is used as the billing document date.  - If this field is not specified, the date specified in the `targetDate` is used as the billing document date. ")
    invoice: Optional[PreviewSubscriptionInvoice] = None
    invoice_items: Optional[conlist(PreviewSubscriptionInvoiceItem)] = Field(None, alias="invoiceItems", description="Container for invoice items. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ")
    invoice_target_date: Optional[date] = Field(None, alias="invoiceTargetDate", description="Date through which charges are calculated on the invoice, as yyyy-mm-dd.  **Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, 196.0, and 206.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information. ")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully. ")
    target_date: Optional[date] = Field(None, alias="targetDate", description="Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.  **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information. ")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="Tax amount on the invoice. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ")
    total_contracted_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalContractedValue", description="Total contracted value of the subscription. ")
    __properties = ["amount", "amountWithoutTax", "chargeMetrics", "contractedMrr", "creditMemo", "documentDate", "invoice", "invoiceItems", "invoiceTargetDate", "success", "targetDate", "taxAmount", "totalContractedValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewSubscriptionResponse:
        """Create an instance of PreviewSubscriptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in charge_metrics (list)
        _items = []
        if self.charge_metrics:
            for _item in self.charge_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of credit_memo
        if self.credit_memo:
            _dict['creditMemo'] = self.credit_memo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item in self.invoice_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoiceItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewSubscriptionResponse:
        """Create an instance of PreviewSubscriptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewSubscriptionResponse.parse_obj(obj)

        _obj = PreviewSubscriptionResponse.parse_obj({
            "amount": obj.get("amount"),
            "amount_without_tax": obj.get("amountWithoutTax"),
            "charge_metrics": [ChargeMetrics.from_dict(_item) for _item in obj.get("chargeMetrics")] if obj.get("chargeMetrics") is not None else None,
            "contracted_mrr": obj.get("contractedMrr"),
            "credit_memo": SubscriptionCreditMemo.from_dict(obj.get("creditMemo")) if obj.get("creditMemo") is not None else None,
            "document_date": obj.get("documentDate"),
            "invoice": PreviewSubscriptionInvoice.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "invoice_items": [PreviewSubscriptionInvoiceItem.from_dict(_item) for _item in obj.get("invoiceItems")] if obj.get("invoiceItems") is not None else None,
            "invoice_target_date": obj.get("invoiceTargetDate"),
            "success": obj.get("success"),
            "target_date": obj.get("targetDate"),
            "tax_amount": obj.get("taxAmount"),
            "total_contracted_value": obj.get("totalContractedValue")
        })
        return _obj


