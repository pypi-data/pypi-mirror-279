# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from com.zuora.models.create_order_change_plan_rate_plan_override import CreateOrderChangePlanRatePlanOverride

class CreateOrderChangePlan(BaseModel):
    """
    Information about an order action of type `changePlan`.   Use the change plan type of order action to replace the existing rate plans in a subscription with other rate plans.  **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.  If you want to create a pending order through the \"change plan\" order action, and if the charge's trigger condition is `Specific Date`, you must set a charge number in the `chargeNumber` field for the \"change plan\" order action. In this case, if you do not set it, Zuora will not generate the charge number for you.  See more information about pending orders in <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/AA_Overview_of_Orders/Pending_orders_and_subscriptions\" target=\"_blank\">Pending orders and subscriptions</a>.   # noqa: E501
    """
    effective_policy: Optional[StrictStr] = Field(None, alias="effectivePolicy")
    external_catalog_plan_id: Optional[StrictStr] = Field(None, alias="externalCatalogPlanId", description="An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** Please provide only one of `externalCatalogPlanId`, `ratePlanId` or `productRatePlanId`. If more than 1 field is provided then the request would fail. ")
    new_product_rate_plan: CreateOrderChangePlanRatePlanOverride = Field(..., alias="newProductRatePlan")
    product_rate_plan_id: Optional[StrictStr] = Field(None, alias="productRatePlanId", description="ID of the product rate plan that the removed rate plan is based on. ")
    product_rate_plan_number: Optional[StrictStr] = Field(None, alias="productRatePlanNumber", description="Number of a product rate plan for this subscription. ")
    rate_plan_id: Optional[StrictStr] = Field(None, alias="ratePlanId", description="ID of the rate plan to remove. This can be the latest version or any history version of ID. Note that the removal of a rate plan through the Change Plan order action supports the function of <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/Order_actions_tutorials/E2_Remove_rate_plan_on_subscription_before_future-dated_removals\" target=\"_blank\">removal before future-dated removals</a>, as in a Remove Product order action. ")
    reset_bcd: Optional[StrictBool] = Field(False, alias="resetBcd", description="If resetBcd is true then reset the Account BCD to the effective date; if it is false keep the original BCD. ")
    sub_type: Optional[StrictStr] = Field(None, alias="subType")
    subscription_rate_plan_number: Optional[StrictStr] = Field(None, alias="subscriptionRatePlanNumber", description="Number of a rate plan for this subscription. ")
    __properties = ["effectivePolicy", "externalCatalogPlanId", "newProductRatePlan", "productRatePlanId", "productRatePlanNumber", "ratePlanId", "resetBcd", "subType", "subscriptionRatePlanNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateOrderChangePlan:
        """Create an instance of CreateOrderChangePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of new_product_rate_plan
        if self.new_product_rate_plan:
            _dict['newProductRatePlan'] = self.new_product_rate_plan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateOrderChangePlan:
        """Create an instance of CreateOrderChangePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateOrderChangePlan.parse_obj(obj)

        _obj = CreateOrderChangePlan.parse_obj({
            "effective_policy": obj.get("effectivePolicy"),
            "external_catalog_plan_id": obj.get("externalCatalogPlanId"),
            "new_product_rate_plan": CreateOrderChangePlanRatePlanOverride.from_dict(obj.get("newProductRatePlan")) if obj.get("newProductRatePlan") is not None else None,
            "product_rate_plan_id": obj.get("productRatePlanId"),
            "product_rate_plan_number": obj.get("productRatePlanNumber"),
            "rate_plan_id": obj.get("ratePlanId"),
            "reset_bcd": obj.get("resetBcd") if obj.get("resetBcd") is not None else False,
            "sub_type": obj.get("subType"),
            "subscription_rate_plan_number": obj.get("subscriptionRatePlanNumber")
        })
        return _obj


