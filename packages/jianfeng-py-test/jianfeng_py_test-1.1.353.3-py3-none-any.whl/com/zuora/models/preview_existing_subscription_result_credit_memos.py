# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from com.zuora.models.preview_existing_subscription_credit_memo_item_result import PreviewExistingSubscriptionCreditMemoItemResult

class PreviewExistingSubscriptionResultCreditMemos(BaseModel):
    """
    PreviewExistingSubscriptionResultCreditMemos
    """
    credit_memo_number: Optional[StrictStr] = Field(None, alias="creditMemoNumber", description="The credit memo number.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Credit memo amount.")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="Credit memo amount minus tax.")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="The tax amount of the credit memo.")
    target_date: Optional[date] = Field(None, alias="targetDate", description="Date through which to calculate charges if a credit memo is generated, as yyyy-mm-dd.")
    credit_memo_items: Optional[conlist(PreviewExistingSubscriptionCreditMemoItemResult)] = Field(None, alias="creditMemoItems", description="Container for credit memo items.")
    status: Optional[StrictStr] = Field(None, description="The status of the credit memo.")
    is_from_existing_credit_memo: Optional[StrictBool] = Field(None, alias="isFromExistingCreditMemo", description="Indicates whether the credit memo information is from an existing credit memo.")
    __properties = ["creditMemoNumber", "amount", "amountWithoutTax", "taxAmount", "targetDate", "creditMemoItems", "status", "isFromExistingCreditMemo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewExistingSubscriptionResultCreditMemos:
        """Create an instance of PreviewExistingSubscriptionResultCreditMemos from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in credit_memo_items (list)
        _items = []
        if self.credit_memo_items:
            for _item in self.credit_memo_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditMemoItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewExistingSubscriptionResultCreditMemos:
        """Create an instance of PreviewExistingSubscriptionResultCreditMemos from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewExistingSubscriptionResultCreditMemos.parse_obj(obj)

        _obj = PreviewExistingSubscriptionResultCreditMemos.parse_obj({
            "credit_memo_number": obj.get("creditMemoNumber"),
            "amount": obj.get("amount"),
            "amount_without_tax": obj.get("amountWithoutTax"),
            "tax_amount": obj.get("taxAmount"),
            "target_date": obj.get("targetDate"),
            "credit_memo_items": [PreviewExistingSubscriptionCreditMemoItemResult.from_dict(_item) for _item in obj.get("creditMemoItems")] if obj.get("creditMemoItems") is not None else None,
            "status": obj.get("status"),
            "is_from_existing_credit_memo": obj.get("isFromExistingCreditMemo")
        })
        return _obj


