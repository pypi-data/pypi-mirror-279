# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr, validator
from com.zuora.models.gateway_state import GatewayState
from com.zuora.models.get_refund_credit_memo_finance_information import GetRefundCreditMemoFinanceInformation
from com.zuora.models.payment_method_type import PaymentMethodType

class RefundCreditMemoResponse(BaseModel):
    """
    RefundCreditMemoResponse
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    origin__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Origin__NS", description="Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    syncto_net_suite__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SynctoNetSuite__NS", description="Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The total amount of the refund.")
    cancelled_on: Optional[StrictStr] = Field(None, alias="cancelledOn", description="The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.")
    comment: Optional[StrictStr] = Field(None, description="Comments about the refund.")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the Zuora user who created the refund.")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-06 15:31:10.")
    credit_memo_id: Optional[StrictStr] = Field(None, alias="creditMemoId", description="The ID of the credit memo that is refunded.")
    finance_information: Optional[GetRefundCreditMemoFinanceInformation] = Field(None, alias="financeInformation")
    gateway_id: Optional[StrictStr] = Field(None, alias="gatewayId", description="The ID of the gateway instance that processes the refund.")
    gateway_response: Optional[StrictStr] = Field(None, alias="gatewayResponse", description="The message returned from the payment gateway for the refund. This message is gateway-dependent.")
    gateway_response_code: Optional[StrictStr] = Field(None, alias="gatewayResponseCode", description="The response code returned from the payment gateway for the refund. This code is gateway-dependent.")
    gateway_state: Optional[StrictStr] = Field(None, alias="gatewayState")
    id: Optional[StrictStr] = Field(None, description="The ID of the created refund.")
    marked_for_submission_on: Optional[StrictStr] = Field(None, alias="markedForSubmissionOn", description="The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.")
    method_type: Optional[StrictStr] = Field(None, alias="methodType")
    number: Optional[StrictStr] = Field(None, description="The unique identification number of the refund.")
    payment_id: Optional[StrictStr] = Field(None, alias="paymentId", description="The ID of the payment associated with the refund.")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="The unique ID of the payment method that the customer used to make the refund.")
    payment_method_snapshot_id: Optional[StrictStr] = Field(None, alias="paymentMethodSnapshotId", description="The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction.")
    reference_id: Optional[StrictStr] = Field(None, alias="referenceId", description="The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.")
    refund_date: Optional[StrictStr] = Field(None, alias="refundDate", description="The date when the refund takes effect, in yyyy-mm-dd format.")
    refund_transaction_time: Optional[StrictStr] = Field(None, alias="refundTransactionTime", description="The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.")
    second_refund_reference_id: Optional[StrictStr] = Field(None, alias="secondRefundReferenceId", description="The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.")
    settled_on: Optional[datetime] = Field(None, alias="settledOn", description="The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.")
    soft_descriptor: Optional[StrictStr] = Field(None, alias="softDescriptor", description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.")
    soft_descriptor_phone: Optional[StrictStr] = Field(None, alias="softDescriptorPhone", description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.")
    status: Optional[StrictStr] = Field(None, description="The status of the refund.")
    submitted_on: Optional[StrictStr] = Field(None, alias="submittedOn", description="The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully.")
    type: Optional[StrictStr] = Field(None, description="The type of the refund.")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the Zuora user who last updated the refund.")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-07 15:36:10.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "Origin__NS", "SyncDate__NS", "SynctoNetSuite__NS", "accountId", "amount", "cancelledOn", "comment", "createdById", "createdDate", "creditMemoId", "financeInformation", "gatewayId", "gatewayResponse", "gatewayResponseCode", "gatewayState", "id", "markedForSubmissionOn", "methodType", "number", "paymentId", "paymentMethodId", "paymentMethodSnapshotId", "reasonCode", "referenceId", "refundDate", "refundTransactionTime", "secondRefundReferenceId", "settledOn", "softDescriptor", "softDescriptorPhone", "status", "submittedOn", "success", "type", "updatedById", "updatedDate"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Processed', 'Canceled', 'Error', 'Processing'):
            raise ValueError("must be one of enum values ('Processed', 'Canceled', 'Error', 'Processing')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('External', 'Electronic'):
            raise ValueError("must be one of enum values ('External', 'Electronic')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RefundCreditMemoResponse:
        """Create an instance of RefundCreditMemoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RefundCreditMemoResponse:
        """Create an instance of RefundCreditMemoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RefundCreditMemoResponse.parse_obj(obj)

        _obj = RefundCreditMemoResponse.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "origin__ns": obj.get("Origin__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "syncto_net_suite__ns": obj.get("SynctoNetSuite__NS"),
            "account_id": obj.get("accountId"),
            "amount": obj.get("amount"),
            "cancelled_on": obj.get("cancelledOn"),
            "comment": obj.get("comment"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "credit_memo_id": obj.get("creditMemoId"),
            "finance_information": GetRefundCreditMemoFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "gateway_id": obj.get("gatewayId"),
            "gateway_response": obj.get("gatewayResponse"),
            "gateway_response_code": obj.get("gatewayResponseCode"),
            "gateway_state": obj.get("gatewayState"),
            "id": obj.get("id"),
            "marked_for_submission_on": obj.get("markedForSubmissionOn"),
            "method_type": obj.get("methodType"),
            "number": obj.get("number"),
            "payment_id": obj.get("paymentId"),
            "payment_method_id": obj.get("paymentMethodId"),
            "payment_method_snapshot_id": obj.get("paymentMethodSnapshotId"),
            "reason_code": obj.get("reasonCode"),
            "reference_id": obj.get("referenceId"),
            "refund_date": obj.get("refundDate"),
            "refund_transaction_time": obj.get("refundTransactionTime"),
            "second_refund_reference_id": obj.get("secondRefundReferenceId"),
            "settled_on": obj.get("settledOn"),
            "soft_descriptor": obj.get("softDescriptor"),
            "soft_descriptor_phone": obj.get("softDescriptorPhone"),
            "status": obj.get("status"),
            "submitted_on": obj.get("submittedOn"),
            "success": obj.get("success"),
            "type": obj.get("type"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


