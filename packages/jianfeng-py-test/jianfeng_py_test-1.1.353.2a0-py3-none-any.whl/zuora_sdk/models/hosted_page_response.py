# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HostedPageResponse(BaseModel):
    """
    HostedPageResponse
    """ # noqa: E501
    page_id: Optional[StrictStr] = Field(default=None, description="Page ID of the Payment Page that Zuora assigns when it is created. ", alias="pageId")
    page_name: Optional[StrictStr] = Field(default=None, description="Name of the Payment Page that specified during the page configuration. ", alias="pageName")
    page_type: Optional[StrictStr] = Field(default=None, description="Payment method type of this Payment Page, e.g. 'Credit Card', 'ACH', or 'Bank Transfer'. ", alias="pageType")
    page_version: Optional[StrictStr] = Field(default=None, description="Version of the Payment Page. 2 for Payment Pages 2.0. ", alias="pageVersion")
    __properties: ClassVar[List[str]] = ["pageId", "pageName", "pageType", "pageVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HostedPageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HostedPageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pageId": obj.get("pageId"),
            "pageName": obj.get("pageName"),
            "pageType": obj.get("pageType"),
            "pageVersion": obj.get("pageVersion")
        })
        return _obj


