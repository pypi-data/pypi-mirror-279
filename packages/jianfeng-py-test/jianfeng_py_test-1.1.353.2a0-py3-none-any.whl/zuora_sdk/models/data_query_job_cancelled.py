# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DataQueryJobCancelled(BaseModel):
    """
    A cancelled data query job. 
    """ # noqa: E501
    created_by: Optional[Annotated[str, Field(min_length=64, strict=True, max_length=64)]] = Field(default=None, description="The query job creator's Id. ", alias="createdBy")
    id: Optional[Annotated[str, Field(min_length=64, strict=True, max_length=64)]] = Field(default=None, description="Internal identifier of the query job. ")
    query: Optional[StrictStr] = Field(default=None, description="The query that was submitted. ")
    remaining_retries: Optional[StrictInt] = Field(default=None, description="The number of times that Zuora will retry the query if Zuora is unable to perform the query. ", alias="remainingRetries")
    updated_on: Optional[datetime] = Field(default=None, description="Date and time when the query job was last updated, in ISO 8601 format. ", alias="updatedOn")
    query_status: Optional[StrictStr] = Field(default=None, description="Status of the query job. ", alias="queryStatus")
    __properties: ClassVar[List[str]] = ["createdBy", "id", "query", "remainingRetries", "updatedOn", "queryStatus"]

    @field_validator('query_status')
    def query_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['cancelled']):
            raise ValueError("must be one of enum values ('cancelled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataQueryJobCancelled from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataQueryJobCancelled from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdBy": obj.get("createdBy"),
            "id": obj.get("id"),
            "query": obj.get("query"),
            "remainingRetries": obj.get("remainingRetries"),
            "updatedOn": obj.get("updatedOn"),
            "queryStatus": obj.get("queryStatus")
        })
        return _obj


