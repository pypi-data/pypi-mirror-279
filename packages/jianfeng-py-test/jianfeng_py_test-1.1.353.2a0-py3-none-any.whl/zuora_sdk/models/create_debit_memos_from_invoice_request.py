# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.debit_memo_item_from_invoice_item_request import DebitMemoItemFromInvoiceItemRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateDebitMemosFromInvoiceRequest(BaseModel):
    """
    CreateDebitMemosFromInvoiceRequest
    """ # noqa: E501
    auto_pay: Optional[StrictBool] = Field(default=None, description="Whether debit memos are automatically picked up for processing in the corresponding payment run.  By default, debit memos are automatically picked up for processing in the corresponding payment run. ", alias="autoPay")
    auto_post: Optional[StrictBool] = Field(default=False, description="Whether to automatically post the debit memo after it is created.  Setting this field to `true`, you do not need to separately call the [Post debit memo](https://www.zuora.com/developer/api-references/api/operation/Put_PostDebitMemo) operation to post the debit memo. ", alias="autoPost")
    comment: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Comments about the debit memo.  ")
    effective_date: Optional[date] = Field(default=None, description="The date when the debit memo takes effect. ", alias="effectiveDate")
    invoice_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice that the debit memo is created from. ", alias="invoiceId")
    items: Optional[Annotated[List[DebitMemoItemFromInvoiceItemRequest], Field(max_length=1000)]] = Field(default=None, description="Container for items. The maximum number of items is 1,000. ")
    reason_code: Optional[StrictStr] = Field(default=None, description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. ", alias="reasonCode")
    tax_auto_calculation: Optional[StrictBool] = Field(default=True, description="Whether to automatically calculate taxes in the debit memo. ", alias="taxAutoCalculation")
    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationStatus__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="SyncDate__NS")
    __properties: ClassVar[List[str]] = ["autoPay", "autoPost", "comment", "effectiveDate", "invoiceId", "items", "reasonCode", "taxAutoCalculation", "IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateDebitMemosFromInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateDebitMemosFromInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoPay": obj.get("autoPay"),
            "autoPost": obj.get("autoPost") if obj.get("autoPost") is not None else False,
            "comment": obj.get("comment"),
            "effectiveDate": obj.get("effectiveDate"),
            "invoiceId": obj.get("invoiceId"),
            "items": [DebitMemoItemFromInvoiceItemRequest.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "reasonCode": obj.get("reasonCode"),
            "taxAutoCalculation": obj.get("taxAutoCalculation") if obj.get("taxAutoCalculation") is not None else True,
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS")
        })
        return _obj


