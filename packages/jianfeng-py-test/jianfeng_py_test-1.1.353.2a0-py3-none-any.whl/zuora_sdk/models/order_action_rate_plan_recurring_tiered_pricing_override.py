# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from zuora_sdk.models.charge_list_price_base import ChargeListPriceBase
from zuora_sdk.models.charge_tier import ChargeTier
from zuora_sdk.models.price_change_option import PriceChangeOption
from typing import Optional, Set
from typing_extensions import Self

class OrderActionRatePlanRecurringTieredPricingOverride(BaseModel):
    """
    Pricing information about a recurring charge that uses the \"tiered pricing\" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased. 
    """ # noqa: E501
    price_change_option: Optional[StrictStr] = Field(default=None, alias="priceChangeOption")
    price_increase_percentage: Optional[Union[Annotated[float, Field(strict=True, ge=-100)], Annotated[int, Field(strict=True, ge=-100)]]] = Field(default=None, description="Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`. ", alias="priceIncreasePercentage")
    list_price_base: Optional[StrictStr] = Field(default=None, alias="listPriceBase")
    quantity: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Number of units purchased. ")
    specific_list_price_base: Optional[Annotated[int, Field(le=200, strict=True, ge=1)]] = Field(default=None, description="The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`. ", alias="specificListPriceBase")
    tiers: Optional[List[ChargeTier]] = Field(default=None, description="List of cumulative pricing tiers in the charge. ")
    __properties: ClassVar[List[str]] = ["priceChangeOption", "priceIncreasePercentage", "listPriceBase", "quantity", "specificListPriceBase", "tiers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderActionRatePlanRecurringTieredPricingOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderActionRatePlanRecurringTieredPricingOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "priceChangeOption": obj.get("priceChangeOption"),
            "priceIncreasePercentage": obj.get("priceIncreasePercentage"),
            "listPriceBase": obj.get("listPriceBase"),
            "quantity": obj.get("quantity"),
            "specificListPriceBase": obj.get("specificListPriceBase"),
            "tiers": [ChargeTier.from_dict(_item) for _item in obj["tiers"]] if obj.get("tiers") is not None else None
        })
        return _obj


