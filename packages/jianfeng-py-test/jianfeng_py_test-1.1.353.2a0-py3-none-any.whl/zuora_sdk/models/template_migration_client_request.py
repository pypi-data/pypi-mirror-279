# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.migration_component_content import MigrationComponentContent
from typing import Optional, Set
from typing_extensions import Self

class TemplateMigrationClientRequest(BaseModel):
    """
    Request to add a new Template migration. TemplateMigrationClientRequest object contains request details of target tenant, source tenant, and template information needed for migration. 
    """ # noqa: E501
    comments: Optional[StrictStr] = None
    description: StrictStr = Field(description="Description of the migration.")
    email_ids: Optional[StrictStr] = Field(default=None, description="List of Emails with comma separator.", alias="emailIds")
    entity_uuid: StrictStr = Field(description="Entity UUID", alias="entityUuid")
    meta_data: Optional[Dict[str, Any]] = Field(default=None, description="Json node object contains metadata.", alias="metaData")
    name: StrictStr = Field(description="Name of the migration.")
    request: Optional[List[MigrationComponentContent]] = Field(default=None, description="List of settings need to be migrated.")
    send_email: StrictBool = Field(description="Flag determines whether or not to send an email.", alias="sendEmail")
    __properties: ClassVar[List[str]] = ["comments", "description", "emailIds", "entityUuid", "metaData", "name", "request", "sendEmail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateMigrationClientRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in request (list)
        _items = []
        if self.request:
            for _item in self.request:
                if _item:
                    _items.append(_item.to_dict())
            _dict['request'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateMigrationClientRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": obj.get("comments"),
            "description": obj.get("description"),
            "emailIds": obj.get("emailIds"),
            "entityUuid": obj.get("entityUuid"),
            "metaData": obj.get("metaData"),
            "name": obj.get("name"),
            "request": [MigrationComponentContent.from_dict(_item) for _item in obj["request"]] if obj.get("request") is not None else None,
            "sendEmail": obj.get("sendEmail")
        })
        return _obj


