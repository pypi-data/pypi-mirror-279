# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.ramp_interval_metrics import RampIntervalMetrics
from typing import Optional, Set
from typing_extensions import Self

class RampMetrics(BaseModel):
    """
    RampMetrics
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The short description of the ramp.")
    discount_tcb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The discount amount for the TCB.", alias="discountTcb")
    discount_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The discount amount for the TCV.", alias="discountTcv")
    gross_tcb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The gross TCB value before discount charges are applied.", alias="grossTcb")
    gross_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The gross TCV value before discount charges are applied.", alias="grossTcv")
    intervals: Optional[List[RampIntervalMetrics]] = Field(default=None, description="Container for the intervals that the ramp is split into in its timeline.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the ramp.")
    net_tcb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The net TCB value after discount charges are applied.", alias="netTcb")
    net_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The net TCV value after discount charges are applied.", alias="netTcv")
    number: Optional[StrictStr] = Field(default=None, description="The number of the ramp. It is automaticcally generated by the billing system.")
    __properties: ClassVar[List[str]] = ["description", "discountTcb", "discountTcv", "grossTcb", "grossTcv", "intervals", "name", "netTcb", "netTcv", "number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RampMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in intervals (list)
        _items = []
        if self.intervals:
            for _item in self.intervals:
                if _item:
                    _items.append(_item.to_dict())
            _dict['intervals'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RampMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "discountTcb": obj.get("discountTcb"),
            "discountTcv": obj.get("discountTcv"),
            "grossTcb": obj.get("grossTcb"),
            "grossTcv": obj.get("grossTcv"),
            "intervals": [RampIntervalMetrics.from_dict(_item) for _item in obj["intervals"]] if obj.get("intervals") is not None else None,
            "name": obj.get("name"),
            "netTcb": obj.get("netTcb"),
            "netTcv": obj.get("netTcv"),
            "number": obj.get("number")
        })
        return _obj


