# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CustomObjectRecordBatchAction(BaseModel):
    """
    The batch action on custom object records
    """ # noqa: E501
    allow_partial_success: Optional[StrictBool] = Field(default=False, description="Indicates whether the records that pass the schema validation should be updated when not all records in the request pass the schema validation.  Only applicable when `type` is `update`. ", alias="allowPartialSuccess")
    ids: Optional[List[StrictStr]] = Field(default=None, description="Ids of the custom object records that you want to delete. Each ID must be a string of 36 characters. Only applicable when `type` is `delete`.")
    records: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Object records that you want to update. Only applicable when `type` is `update`.")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["allowPartialSuccess", "ids", "records", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomObjectRecordBatchAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomObjectRecordBatchAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowPartialSuccess": obj.get("allowPartialSuccess") if obj.get("allowPartialSuccess") is not None else False,
            "ids": obj.get("ids"),
            "records": obj.get("records"),
            "type": obj.get("type")
        })
        return _obj


