# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetWorkflowResponseTasks(BaseModel):
    """
    An object containing task counts. 
    """ # noqa: E501
    error: Optional[StrictInt] = Field(default=None, description="The number of tasks in **Error** state. ")
    pending: Optional[StrictInt] = Field(default=None, description="The number of tasks in **Pending** state. ")
    processing: Optional[StrictInt] = Field(default=None, description="The number of tasks in **Processing** state. ")
    queued: Optional[StrictInt] = Field(default=None, description="The number of tasks in **Queued** state. ")
    stopped: Optional[StrictInt] = Field(default=None, description="The number of tasks in **Stopped** state. ")
    success: Optional[StrictInt] = Field(default=None, description="The number of tasks in **Success** state. ")
    total: Optional[StrictInt] = Field(default=None, description="The total number of tasks. ")
    __properties: ClassVar[List[str]] = ["error", "pending", "processing", "queued", "stopped", "success", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetWorkflowResponseTasks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetWorkflowResponseTasks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error": obj.get("error"),
            "pending": obj.get("pending"),
            "processing": obj.get("processing"),
            "queued": obj.get("queued"),
            "stopped": obj.get("stopped"),
            "success": obj.get("success"),
            "total": obj.get("total")
        })
        return _obj


