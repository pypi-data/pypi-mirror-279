# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.create_payment_method_bank_transfer_account_holder_info import CreatePaymentMethodBankTransferAccountHolderInfo
from typing import Optional, Set
from typing_extensions import Self

class CreatePaymentMethodBankTransfer(BaseModel):
    """
    CreatePaymentMethodBankTransfer
    """ # noqa: E501
    iban: Optional[StrictStr] = Field(default=None, description="The International Bank Account Number. This field is required if the `type` field is set to `SEPA`. ", alias="IBAN")
    account_holder_info: Optional[CreatePaymentMethodBankTransferAccountHolderInfo] = Field(default=None, alias="accountHolderInfo")
    account_number: Optional[StrictStr] = Field(default=None, description="The number of the customer's bank account. This field is required for the following bank transfer payment methods:   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`)   - Canadian Pre-Authorized Debit (`PAD`) ", alias="accountNumber")
    bank_code: Optional[StrictStr] = Field(default=None, description="The sort code or number that identifies the bank. This is also known as the sort code. This field is required for the following bank transfer payment methods:   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`) ", alias="bankCode")
    branch_code: Optional[StrictStr] = Field(default=None, description="The branch code of the bank used for direct debit. This field is required for the following bank transfer payment methods:   - Sweden Direct Debit (`Autogiro`)   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`) ", alias="branchCode")
    business_identification_code: Optional[StrictStr] = Field(default=None, description="The BIC code used for SEPA. ", alias="businessIdentificationCode")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency used for payment method authorization.  If this field is not specified, `currency` specified for the account is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used. ", alias="currencyCode")
    identity_number: Optional[StrictStr] = Field(default=None, description="The identity number of the customer. This field is required for the following bank transfer payment methods:   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`) ", alias="identityNumber")
    __properties: ClassVar[List[str]] = ["IBAN", "accountHolderInfo", "accountNumber", "bankCode", "branchCode", "businessIdentificationCode", "currencyCode", "identityNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePaymentMethodBankTransfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_holder_info
        if self.account_holder_info:
            _dict['accountHolderInfo'] = self.account_holder_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePaymentMethodBankTransfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IBAN": obj.get("IBAN"),
            "accountHolderInfo": CreatePaymentMethodBankTransferAccountHolderInfo.from_dict(obj["accountHolderInfo"]) if obj.get("accountHolderInfo") is not None else None,
            "accountNumber": obj.get("accountNumber"),
            "bankCode": obj.get("bankCode"),
            "branchCode": obj.get("branchCode"),
            "businessIdentificationCode": obj.get("businessIdentificationCode"),
            "currencyCode": obj.get("currencyCode"),
            "identityNumber": obj.get("identityNumber")
        })
        return _obj


