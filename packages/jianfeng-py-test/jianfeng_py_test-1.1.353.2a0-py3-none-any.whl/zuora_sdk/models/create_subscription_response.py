# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreateSubscriptionResponse(BaseModel):
    """
    CreateSubscriptionResponse
    """ # noqa: E501
    contracted_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly recurring revenue of the subscription. ", alias="contractedMrr")
    credit_memo_id: Optional[StrictStr] = Field(default=None, description="The credit memo ID, if a credit memo is generated during the subscription process.  **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. ", alias="creditMemoId")
    invoice_id: Optional[StrictStr] = Field(default=None, description="Invoice ID, if an invoice is generated during the subscription process. ", alias="invoiceId")
    paid_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Payment amount, if a payment is collected. ", alias="paidAmount")
    payment_id: Optional[StrictStr] = Field(default=None, description="Payment ID, if a payment is collected. ", alias="paymentId")
    subscription_id: Optional[StrictStr] = Field(default=None, alias="subscriptionId")
    subscription_number: Optional[StrictStr] = Field(default=None, alias="subscriptionNumber")
    success: Optional[StrictBool] = Field(default=None, description="Returns `true` if the request was processed successfully. ")
    total_contracted_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total contracted value of the subscription. ", alias="totalContractedValue")
    __properties: ClassVar[List[str]] = ["contractedMrr", "creditMemoId", "invoiceId", "paidAmount", "paymentId", "subscriptionId", "subscriptionNumber", "success", "totalContractedValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSubscriptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSubscriptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractedMrr": obj.get("contractedMrr"),
            "creditMemoId": obj.get("creditMemoId"),
            "invoiceId": obj.get("invoiceId"),
            "paidAmount": obj.get("paidAmount"),
            "paymentId": obj.get("paymentId"),
            "subscriptionId": obj.get("subscriptionId"),
            "subscriptionNumber": obj.get("subscriptionNumber"),
            "success": obj.get("success"),
            "totalContractedValue": obj.get("totalContractedValue")
        })
        return _obj


