# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.bulk_pdf_generation_job_status import BulkPDFGenerationJobStatus
from zuora_sdk.models.bulk_pdf_generation_step_status import BulkPDFGenerationStepStatus
from typing import Optional, Set
from typing_extensions import Self

class GetBulkPdfGenerationJobResponse(BaseModel):
    """
    GetBulkPdfGenerationJobResponse
    """ # noqa: E501
    job_id: Optional[StrictStr] = Field(default=None, description="Unique Id for the Triggered Job", alias="jobId")
    job_name: Optional[StrictStr] = Field(default=None, description="Name of the Job provided during the POST request of the Job", alias="jobName")
    status: Optional[BulkPDFGenerationJobStatus] = None
    step_status: Optional[BulkPDFGenerationStepStatus] = Field(default=None, alias="stepStatus")
    file_urls: Optional[List[StrictStr]] = Field(default=None, description="Collection of S3 Pre-Signed URL(s) that can be downloaded", alias="fileUrls")
    created_on: Optional[StrictStr] = Field(default=None, description="Job Created Time", alias="createdOn")
    created_by: Optional[StrictStr] = Field(default=None, description="Id of the user who created the job", alias="createdBy")
    success: Optional[StrictBool] = Field(default=None, description="Returns `true` if the request was processed successfully.")
    __properties: ClassVar[List[str]] = ["jobId", "jobName", "status", "stepStatus", "fileUrls", "createdOn", "createdBy", "success"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBulkPdfGenerationJobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBulkPdfGenerationJobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobId": obj.get("jobId"),
            "jobName": obj.get("jobName"),
            "status": obj.get("status"),
            "stepStatus": obj.get("stepStatus"),
            "fileUrls": obj.get("fileUrls"),
            "createdOn": obj.get("createdOn"),
            "createdBy": obj.get("createdBy"),
            "success": obj.get("success")
        })
        return _obj


