# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BookingDateJob(BaseModel):
    """
    BookingDateJob
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Job id")
    created_on: Optional[StrictInt] = Field(default=None, alias="createdOn")
    created_on_readable: Optional[StrictStr] = Field(default=None, alias="createdOnReadable")
    updated_on: Optional[StrictInt] = Field(default=None, alias="updatedOn")
    updated_on_readable: Optional[StrictStr] = Field(default=None, alias="updatedOnReadable")
    updated_by_username: Optional[StrictStr] = Field(default=None, alias="updatedByUsername")
    status: Optional[StrictStr] = Field(default=None, description="Data Backfill job type")
    batch_sent_count: Optional[StrictInt] = Field(default=None, alias="batchSentCount")
    batch_finished_count: Optional[StrictInt] = Field(default=None, alias="batchFinishedCount")
    error_count: Optional[StrictInt] = Field(default=None, alias="errorCount")
    progress: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "createdOn", "createdOnReadable", "updatedOn", "updatedOnReadable", "updatedByUsername", "status", "batchSentCount", "batchFinishedCount", "errorCount", "progress"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCEPTED', 'PROCESSING', 'COMPLETED', 'FAILED', 'STOPPED']):
            raise ValueError("must be one of enum values ('ACCEPTED', 'PROCESSING', 'COMPLETED', 'FAILED', 'STOPPED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BookingDateJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BookingDateJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdOn": obj.get("createdOn"),
            "createdOnReadable": obj.get("createdOnReadable"),
            "updatedOn": obj.get("updatedOn"),
            "updatedOnReadable": obj.get("updatedOnReadable"),
            "updatedByUsername": obj.get("updatedByUsername"),
            "status": obj.get("status"),
            "batchSentCount": obj.get("batchSentCount"),
            "batchFinishedCount": obj.get("batchFinishedCount"),
            "errorCount": obj.get("errorCount"),
            "progress": obj.get("progress")
        })
        return _obj


