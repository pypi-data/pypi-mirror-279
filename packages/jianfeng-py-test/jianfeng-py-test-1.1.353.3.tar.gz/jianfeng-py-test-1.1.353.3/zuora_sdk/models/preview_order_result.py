# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from zuora_sdk.models.order_ramp_metrics import OrderRampMetrics
from zuora_sdk.models.preview_order_result_charge_metrics import PreviewOrderResultChargeMetrics
from zuora_sdk.models.preview_order_result_credit_memos import PreviewOrderResultCreditMemos
from zuora_sdk.models.preview_order_result_delta_metrics import PreviewOrderResultDeltaMetrics
from zuora_sdk.models.preview_order_result_invoices import PreviewOrderResultInvoices
from zuora_sdk.models.preview_result_order_metrics_inner import PreviewResultOrderMetricsInner

class PreviewOrderResult(BaseModel):
    """
    The result of each type of preview. Returned only when the current request is preview call.  # noqa: E501
    """
    charge_metrics: Optional[conlist(PreviewOrderResultChargeMetrics)] = Field(None, alias="chargeMetrics")
    credit_memos: Optional[conlist(PreviewOrderResultCreditMemos)] = Field(None, alias="creditMemos", description="This field is only available if you have the Invoice Settlement feature enabled.")
    invoices: Optional[conlist(PreviewOrderResultInvoices)] = None
    order_delta_metrics: Optional[PreviewOrderResultDeltaMetrics] = Field(None, alias="orderDeltaMetrics")
    order_metrics: Optional[conlist(PreviewResultOrderMetricsInner)] = Field(None, alias="orderMetrics", description="**Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects.   * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr)  * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv)  * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb)   It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/).   Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported. ")
    ramp_metrics: Optional[conlist(OrderRampMetrics)] = Field(None, alias="rampMetrics", description="**Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.  The ramp metrics. ")
    __properties = ["chargeMetrics", "creditMemos", "invoices", "orderDeltaMetrics", "orderMetrics", "rampMetrics"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewOrderResult:
        """Create an instance of PreviewOrderResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in charge_metrics (list)
        _items = []
        if self.charge_metrics:
            for _item in self.charge_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credit_memos (list)
        _items = []
        if self.credit_memos:
            for _item in self.credit_memos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditMemos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item in self.invoices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of order_delta_metrics
        if self.order_delta_metrics:
            _dict['orderDeltaMetrics'] = self.order_delta_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_metrics (list)
        _items = []
        if self.order_metrics:
            for _item in self.order_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ramp_metrics (list)
        _items = []
        if self.ramp_metrics:
            for _item in self.ramp_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rampMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewOrderResult:
        """Create an instance of PreviewOrderResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewOrderResult.parse_obj(obj)

        _obj = PreviewOrderResult.parse_obj({
            "charge_metrics": [PreviewOrderResultChargeMetrics.from_dict(_item) for _item in obj.get("chargeMetrics")] if obj.get("chargeMetrics") is not None else None,
            "credit_memos": [PreviewOrderResultCreditMemos.from_dict(_item) for _item in obj.get("creditMemos")] if obj.get("creditMemos") is not None else None,
            "invoices": [PreviewOrderResultInvoices.from_dict(_item) for _item in obj.get("invoices")] if obj.get("invoices") is not None else None,
            "order_delta_metrics": PreviewOrderResultDeltaMetrics.from_dict(obj.get("orderDeltaMetrics")) if obj.get("orderDeltaMetrics") is not None else None,
            "order_metrics": [PreviewResultOrderMetricsInner.from_dict(_item) for _item in obj.get("orderMetrics")] if obj.get("orderMetrics") is not None else None,
            "ramp_metrics": [OrderRampMetrics.from_dict(_item) for _item in obj.get("rampMetrics")] if obj.get("rampMetrics") is not None else None
        })
        return _obj


