# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, constr

class CreateOrderRatePlanFeatureOverride(BaseModel):
    """
    Information about feature in rate plan.   # noqa: E501
    """
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="A container for custom fields of the feature. ")
    description: Optional[constr(strict=True, max_length=500)] = Field(None, description="A description of the feature.")
    feature_id: StrictStr = Field(..., alias="featureId", description="Internal identifier of the feature in the product catalog. ")
    __properties = ["customFields", "description", "featureId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateOrderRatePlanFeatureOverride:
        """Create an instance of CreateOrderRatePlanFeatureOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateOrderRatePlanFeatureOverride:
        """Create an instance of CreateOrderRatePlanFeatureOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateOrderRatePlanFeatureOverride.parse_obj(obj)

        _obj = CreateOrderRatePlanFeatureOverride.parse_obj({
            "custom_fields": obj.get("customFields"),
            "description": obj.get("description"),
            "feature_id": obj.get("featureId")
        })
        return _obj


