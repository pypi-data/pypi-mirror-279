# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class CollectDebitMemoResponseProcessedPayment(BaseModel):
    """
    The information about the payment that newly processed to the debit memo.  # noqa: E501
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The total amount of the payment.")
    gateway_id: Optional[StrictStr] = Field(None, alias="gatewayId", description="The ID of the gateway instance that processes the payment.")
    gateway_response: Optional[StrictStr] = Field(None, alias="gatewayResponse", description="The message returned from the payment gateway for the payment. This message is gateway-dependent.")
    gateway_response_code: Optional[StrictStr] = Field(None, alias="gatewayResponseCode", description="The code returned from the payment gateway for the payment. This code is gateway-dependent.")
    id: Optional[StrictStr] = Field(None, description="The unique ID of the created payment. For example, 4028905f5a87c0ff015a87eb6b75007f.")
    number: Optional[StrictStr] = Field(None, description="The unique identification number of the payment. For example, P-00000001.")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="The unique ID of the payment method that the customer used to make the payment.")
    status: Optional[StrictStr] = None
    __properties = ["amount", "gatewayId", "gatewayResponse", "gatewayResponseCode", "id", "number", "paymentMethodId", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CollectDebitMemoResponseProcessedPayment:
        """Create an instance of CollectDebitMemoResponseProcessedPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CollectDebitMemoResponseProcessedPayment:
        """Create an instance of CollectDebitMemoResponseProcessedPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CollectDebitMemoResponseProcessedPayment.parse_obj(obj)

        _obj = CollectDebitMemoResponseProcessedPayment.parse_obj({
            "amount": obj.get("amount"),
            "gateway_id": obj.get("gatewayId"),
            "gateway_response": obj.get("gatewayResponse"),
            "gateway_response_code": obj.get("gatewayResponseCode"),
            "id": obj.get("id"),
            "number": obj.get("number"),
            "payment_method_id": obj.get("paymentMethodId"),
            "status": obj.get("status")
        })
        return _obj


