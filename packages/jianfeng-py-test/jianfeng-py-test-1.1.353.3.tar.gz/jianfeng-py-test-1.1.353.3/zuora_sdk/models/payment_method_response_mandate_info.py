# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class PaymentMethodResponseMandateInfo(BaseModel):
    """
    The mandate information for the Credit Card, Apple Pay, Google Pay, Credit Card Reference Transaction, ACH, or Bank Transfer payment method.  The following mandate fields are common to all supported payment methods: * `mandateId` * `mandateReason` * `mandateStatus`  The following mandate fields are specific to the ACH and Bank Transfer payment methods: * `mandateReceivedStatus` * `existingMandateStatus` * `mandateCreationDate` * `mandateUpdateDate`  The following mandate fields are specific to the Credit Card, Apple Pay, and Google Pay payment methods: * `mitTransactionId` * `mitProfileAgreedOn` * `mitConsentAgreementRef` * `mitConsentAgreementSrc` * `mitProfileType` * `mitProfileAction`   # noqa: E501
    """
    existing_mandate_status: Optional[StrictStr] = Field(None, alias="existingMandateStatus")
    mandate_creation_date: Optional[date] = Field(None, alias="mandateCreationDate", description="The date on which the mandate was created. ")
    mandate_id: Optional[StrictStr] = Field(None, alias="mandateId", description="The mandate ID. ")
    mandate_reason: Optional[StrictStr] = Field(None, alias="mandateReason", description="The reason of the mandate from the gateway side. ")
    mandate_received_status: Optional[StrictStr] = Field(None, alias="mandateReceivedStatus")
    mandate_status: Optional[StrictStr] = Field(None, alias="mandateStatus", description="The status of the mandate from the gateway side. ")
    mandate_update_date: Optional[date] = Field(None, alias="mandateUpdateDate", description="The date on which the mandate was updated. ")
    mit_consent_agreement_ref: Optional[StrictStr] = Field(None, alias="mitConsentAgreementRef", description="Reference for the consent agreement that you have established with the customer.   ")
    mit_consent_agreement_src: Optional[StrictStr] = Field(None, alias="mitConsentAgreementSrc")
    mit_profile_action: Optional[StrictStr] = Field(None, alias="mitProfileAction")
    mit_profile_agreed_on: Optional[date] = Field(None, alias="mitProfileAgreedOn", description="The date on which the stored credential profile is agreed. The date format is `yyyy-mm-dd`. ")
    mit_profile_type: Optional[StrictStr] = Field(None, alias="mitProfileType", description="Indicates the type of the stored credential profile. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Recurring` set to this field. ")
    mit_transaction_id: Optional[constr(strict=True, max_length=128)] = Field(None, alias="mitTransactionId", description="Specifies the ID of the transaction. Only applicable if you set the `mitProfileAction` field to `Persist`. ")
    __properties = ["existingMandateStatus", "mandateCreationDate", "mandateId", "mandateReason", "mandateReceivedStatus", "mandateStatus", "mandateUpdateDate", "mitConsentAgreementRef", "mitConsentAgreementSrc", "mitProfileAction", "mitProfileAgreedOn", "mitProfileType", "mitTransactionId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentMethodResponseMandateInfo:
        """Create an instance of PaymentMethodResponseMandateInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentMethodResponseMandateInfo:
        """Create an instance of PaymentMethodResponseMandateInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentMethodResponseMandateInfo.parse_obj(obj)

        _obj = PaymentMethodResponseMandateInfo.parse_obj({
            "existing_mandate_status": obj.get("existingMandateStatus"),
            "mandate_creation_date": obj.get("mandateCreationDate"),
            "mandate_id": obj.get("mandateId"),
            "mandate_reason": obj.get("mandateReason"),
            "mandate_received_status": obj.get("mandateReceivedStatus"),
            "mandate_status": obj.get("mandateStatus"),
            "mandate_update_date": obj.get("mandateUpdateDate"),
            "mit_consent_agreement_ref": obj.get("mitConsentAgreementRef"),
            "mit_consent_agreement_src": obj.get("mitConsentAgreementSrc"),
            "mit_profile_action": obj.get("mitProfileAction"),
            "mit_profile_agreed_on": obj.get("mitProfileAgreedOn"),
            "mit_profile_type": obj.get("mitProfileType"),
            "mit_transaction_id": obj.get("mitTransactionId")
        })
        return _obj


