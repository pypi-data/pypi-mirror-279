# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from zuora_sdk.models.get_public_notification_definition_response_callout import GetPublicNotificationDefinitionResponseCallout
from zuora_sdk.models.get_public_notification_definition_response_filter_rule import GetPublicNotificationDefinitionResponseFilterRule

class GetPublicNotificationDefinitionResponse(BaseModel):
    """
    GetPublicNotificationDefinitionResponse
    """
    active: Optional[StrictBool] = Field(None, description="The status of the notification definition. The default value is `true`.")
    associated_account: Optional[StrictStr] = Field(None, alias="associatedAccount", description="Indicates with which type of account this notification is associated. ")
    callout: Optional[GetPublicNotificationDefinitionResponseCallout] = None
    callout_active: Optional[StrictBool] = Field(None, alias="calloutActive", description="The status of the callout action. The default value is `false`.")
    communication_profile_id: Optional[StrictStr] = Field(None, alias="communicationProfileId", description="The profile that the notification definition belongs to.")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="The ID of the user who created the notification definition.")
    created_on: Optional[StrictStr] = Field(None, alias="createdOn", description="The time when the notification definition was created. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00")
    description: Optional[constr(strict=True, max_length=255)] = Field(None, description="Description of the notification definition")
    email_active: Optional[StrictBool] = Field(None, alias="emailActive", description="The status of the email action. The default value is `false`.")
    email_template_id: Optional[StrictStr] = Field(None, alias="emailTemplateId", description="The ID of the email template. In the request, there should be at least one email template or callout.")
    event_type_name: Optional[constr(strict=True, min_length=1)] = Field(None, alias="eventTypeName", description="The name of the event type.")
    event_type_namespace: Optional[StrictStr] = Field(None, alias="eventTypeNamespace", description="The namespace of the `eventTypeName` field.  ")
    filter_rule: Optional[GetPublicNotificationDefinitionResponseFilterRule] = Field(None, alias="filterRule")
    filter_rule_params: Optional[Dict[str, StrictStr]] = Field(None, alias="filterRuleParams", description="The parameter values used to configure the filter rule. ")
    id: Optional[StrictStr] = Field(None, description="The ID associated with this notification definition.")
    name: Optional[constr(strict=True, max_length=255)] = Field(None, description="The name of the notification definition.")
    updated_by: Optional[StrictStr] = Field(None, alias="updatedBy", description="The ID of the user who updated the notification definition.")
    updated_on: Optional[StrictStr] = Field(None, alias="updatedOn", description="The time when the notification was updated. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00")
    __properties = ["active", "associatedAccount", "callout", "calloutActive", "communicationProfileId", "createdBy", "createdOn", "description", "emailActive", "emailTemplateId", "eventTypeName", "eventTypeNamespace", "filterRule", "filterRuleParams", "id", "name", "updatedBy", "updatedOn"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetPublicNotificationDefinitionResponse:
        """Create an instance of GetPublicNotificationDefinitionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of callout
        if self.callout:
            _dict['callout'] = self.callout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter_rule
        if self.filter_rule:
            _dict['filterRule'] = self.filter_rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPublicNotificationDefinitionResponse:
        """Create an instance of GetPublicNotificationDefinitionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetPublicNotificationDefinitionResponse.parse_obj(obj)

        _obj = GetPublicNotificationDefinitionResponse.parse_obj({
            "active": obj.get("active"),
            "associated_account": obj.get("associatedAccount"),
            "callout": GetPublicNotificationDefinitionResponseCallout.from_dict(obj.get("callout")) if obj.get("callout") is not None else None,
            "callout_active": obj.get("calloutActive"),
            "communication_profile_id": obj.get("communicationProfileId"),
            "created_by": obj.get("createdBy"),
            "created_on": obj.get("createdOn"),
            "description": obj.get("description"),
            "email_active": obj.get("emailActive"),
            "email_template_id": obj.get("emailTemplateId"),
            "event_type_name": obj.get("eventTypeName"),
            "event_type_namespace": obj.get("eventTypeNamespace"),
            "filter_rule": GetPublicNotificationDefinitionResponseFilterRule.from_dict(obj.get("filterRule")) if obj.get("filterRule") is not None else None,
            "filter_rule_params": obj.get("filterRuleParams"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "updated_by": obj.get("updatedBy"),
            "updated_on": obj.get("updatedOn")
        })
        return _obj


