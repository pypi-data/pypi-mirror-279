# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr
from zuora_sdk.models.post_scheduled_event_request_parameters_value import PostScheduledEventRequestParametersValue

class PostScheduledEventRequest(BaseModel):
    """
    namespace.name pair should be unique universally  # noqa: E501
    """
    active: Optional[StrictBool] = Field(True, description="Indicate whether the scheduled event is active or inactive.")
    api_field: StrictStr = Field(..., alias="apiField", description="The base field of the base object in the `apiObject` field, should be in date or timestamp format. The scheduled event notifications are triggered based on this date and the event parameters (before or after a specified number of days) from notification definitions. Should be specified in the pattern: ^[A-Z][\\\\w\\\\-]*$   See [Custom Scheduled Events](https://knowledgecenter.zuora.com/Central_Platform/Events_and_Notifications/A_Z_Custom_Scheduled_Events) for all available base fields. ")
    api_object: StrictStr = Field(..., alias="apiObject", description="The base object that the scheduled event is defined upon. The base object should contain a date or timestamp format field. Should be specified in the pattern: ^[A-Z][\\\\w\\\\-]*$             See [Custom Scheduled Events](https://knowledgecenter.zuora.com/Central_Platform/Events_and_Notifications/A_Z_Custom_Scheduled_Events) for all available base objects. ")
    condition: Optional[constr(strict=True, max_length=65535)] = Field(None, description="The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The scheduled event is triggered only if the condition is evaluated as true. The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Scheduled events with invalid merge fields will fail to evaluate, thus will not be triggered. For example, to trigger an invoice due date scheduled event to only invoices with an amount over 1000, you would define the following condition:  ```Invoice.Amount > 1000```  `Invoice.Amount` refers to the `Amount` field of the Zuora object `Invoice`. ")
    description: Optional[constr(strict=True, max_length=1000)] = Field(None, description="The description of the scheduled event.")
    display_name: constr(strict=True, max_length=500, min_length=1) = Field(..., alias="displayName", description="The display name of the scheduled event.")
    hours: conint(strict=True, le=23, ge=0) = Field(..., description="The scheduled time (hour) that the scheduled event notifications are sent. This time is based on the localized timezone of your tenant.")
    minutes: conint(strict=True, le=59, ge=0) = Field(..., description="The scheduled time (minute) that the scheduled event notifications are sent. This time is based on the localized timezone of your tenant.")
    name: constr(strict=True, max_length=200, min_length=1) = Field(..., description="The name of the scheduled event. Should be unique, contain no space, and be in the pattern: ^[A-Za-z]{1,}[\\\\w\\\\-]*$")
    parameters: Optional[Dict[str, PostScheduledEventRequestParametersValue]] = Field(None, description="The parameter definitions of the filter rule. The names of the parameters must match with the filter rule and can't be duplicated. You should specify all the parameters when creating scheduled event notifications.")
    __properties = ["active", "apiField", "apiObject", "condition", "description", "displayName", "hours", "minutes", "name", "parameters"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostScheduledEventRequest:
        """Create an instance of PostScheduledEventRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key in self.parameters:
                if self.parameters[_key]:
                    _field_dict[_key] = self.parameters[_key].to_dict()
            _dict['parameters'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostScheduledEventRequest:
        """Create an instance of PostScheduledEventRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostScheduledEventRequest.parse_obj(obj)

        _obj = PostScheduledEventRequest.parse_obj({
            "active": obj.get("active") if obj.get("active") is not None else True,
            "api_field": obj.get("apiField"),
            "api_object": obj.get("apiObject"),
            "condition": obj.get("condition"),
            "description": obj.get("description"),
            "display_name": obj.get("displayName"),
            "hours": obj.get("hours"),
            "minutes": obj.get("minutes"),
            "name": obj.get("name"),
            "parameters": dict(
                (_k, PostScheduledEventRequestParametersValue.from_dict(_v))
                for _k, _v in obj.get("parameters").items()
            )
            if obj.get("parameters") is not None
            else None
        })
        return _obj


