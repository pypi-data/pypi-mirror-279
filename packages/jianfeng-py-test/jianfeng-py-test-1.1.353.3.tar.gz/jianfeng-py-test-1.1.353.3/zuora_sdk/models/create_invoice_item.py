# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, condecimal, conlist, constr
from zuora_sdk.models.create_discount_item import CreateDiscountItem
from zuora_sdk.models.create_taxation_item import CreateTaxationItem
from zuora_sdk.models.rev_rec_trigger import RevRecTrigger
from zuora_sdk.models.tax_mode import TaxMode

class CreateInvoiceItem(BaseModel):
    """
    CreateInvoiceItem
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    accounting_code: Optional[StrictStr] = Field(None, alias="accountingCode", description="The accounting code associated with the invoice item. ")
    adjustment_liability_accounting_code: Optional[StrictStr] = Field(None, alias="adjustmentLiabilityAccountingCode", description="The accounting code for adjustment liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    adjustment_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="adjustmentRevenueAccountingCode", description="The accounting code for adjustment revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    amount: condecimal() = Field(..., description="The amount of the invoice item.   - For tax-inclusive invoice items, the amount indicates the invoice item amount including tax.  - For tax-exclusive invoice items, the amount indicates the invoice item amount excluding tax. ")
    booking_reference: Optional[StrictStr] = Field(None, alias="bookingReference", description="The booking reference of the invoice item.")
    charge_date: Optional[StrictStr] = Field(None, alias="chargeDate", description="The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.")
    charge_name: Optional[StrictStr] = Field(None, alias="chargeName", description="The name of the charge associated with the invoice item.   This field is required if the `productRatePlanChargeId` field is not specified in the request. ")
    contract_asset_accounting_code: Optional[StrictStr] = Field(None, alias="contractAssetAccountingCode", description="The accounting code for contract asset.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    contract_liability_accounting_code: Optional[StrictStr] = Field(None, alias="contractLiabilityAccountingCode", description="The accounting code for contract liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    contract_recognized_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="contractRecognizedRevenueAccountingCode", description="The accounting code for contract recognized revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    deferred_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="deferredRevenueAccountingCode", description="The accounting code for the deferred revenue, such as Monthly Recurring Liability.  **Note:** This field is only available if you have Zuora Finance enabled. ")
    description: Optional[StrictStr] = Field(None, description="The description of the invoice item. ")
    discount_items: Optional[conlist(CreateDiscountItem)] = Field(None, alias="discountItems", description="Container for discount items. The maximum number of discount items is 10. ")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBillingFromRevenueAccounting", description="The flag to exclude the invoice item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    item_type: Optional[StrictStr] = Field(None, alias="itemType", description="The type of the invoice item. ")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="productRatePlanChargeId", description="The ID of the product rate plan charge that the invoice item is created from.  If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding product rate plan charge, regardless of the values specified in the request body: - `chargeName` - `sku` - `uom` - `taxCode` - `taxMode` - `accountingCode` - `deferredRevenueAccountingCode`  - `recognizedRevenueAccountingCode` ")
    purchase_order_number: Optional[StrictStr] = Field(None, alias="purchaseOrderNumber", description="The purchase order number associated with the invoice item. ")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(1, description="The number of units for the invoice item.")
    recognized_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="recognizedRevenueAccountingCode", description="The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.  **Note:** This field is only available if you have Zuora Finance enabled. ")
    rev_rec_code: Optional[StrictStr] = Field(None, alias="revRecCode", description="The revenue recognition code. ")
    rev_rec_trigger_condition: Optional[StrictStr] = Field(None, alias="revRecTriggerCondition")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(None, alias="revenueRecognitionRuleName", description="The name of the revenue recognition rule governing the revenue schedule.  **Note:** This field is only available if you have Zuora Finance enabled. ")
    service_end_date: Optional[date] = Field(None, alias="serviceEndDate", description="The service end date of the invoice item. ")
    service_start_date: date = Field(..., alias="serviceStartDate", description="The service start date of the invoice item. ")
    sku: Optional[StrictStr] = Field(None, description="The SKU of the invoice item. The SKU of the invoice item must be different from the SKU of any existing product. ")
    tax_code: Optional[StrictStr] = Field(None, alias="taxCode", description="The tax code identifies which tax rules and tax rates to apply to the invoice item.  **Note**: This field is only available only if you have Taxation enabled. ")
    tax_items: Optional[conlist(CreateTaxationItem)] = Field(None, alias="taxItems", description="Container for taxation items. The maximum number of taxation items is 5.  **Note**: This field is only available only if you have Taxation enabled. ")
    tax_mode: Optional[StrictStr] = Field(None, alias="taxMode")
    unbilled_receivables_accounting_code: Optional[StrictStr] = Field(None, alias="unbilledReceivablesAccountingCode", description="The accounting code for unbilled receivables.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unitPrice", description="The per-unit price of the invoice item. To pass Level 3 data to the gateway, this field is required and must be greater than zero. ")
    uom: Optional[StrictStr] = Field(None, description="The unit of measure. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "accountingCode", "adjustmentLiabilityAccountingCode", "adjustmentRevenueAccountingCode", "amount", "bookingReference", "chargeDate", "chargeName", "contractAssetAccountingCode", "contractLiabilityAccountingCode", "contractRecognizedRevenueAccountingCode", "deferredRevenueAccountingCode", "description", "discountItems", "excludeItemBillingFromRevenueAccounting", "itemType", "productRatePlanChargeId", "purchaseOrderNumber", "quantity", "recognizedRevenueAccountingCode", "revRecCode", "revRecTriggerCondition", "revenueRecognitionRuleName", "serviceEndDate", "serviceStartDate", "sku", "taxCode", "taxItems", "taxMode", "unbilledReceivablesAccountingCode", "unitPrice", "uom"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateInvoiceItem:
        """Create an instance of CreateInvoiceItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in discount_items (list)
        _items = []
        if self.discount_items:
            for _item in self.discount_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['discountItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_items (list)
        _items = []
        if self.tax_items:
            for _item in self.tax_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxItems'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateInvoiceItem:
        """Create an instance of CreateInvoiceItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateInvoiceItem.parse_obj(obj)

        _obj = CreateInvoiceItem.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "accounting_code": obj.get("accountingCode"),
            "adjustment_liability_accounting_code": obj.get("adjustmentLiabilityAccountingCode"),
            "adjustment_revenue_accounting_code": obj.get("adjustmentRevenueAccountingCode"),
            "amount": obj.get("amount"),
            "booking_reference": obj.get("bookingReference"),
            "charge_date": obj.get("chargeDate"),
            "charge_name": obj.get("chargeName"),
            "contract_asset_accounting_code": obj.get("contractAssetAccountingCode"),
            "contract_liability_accounting_code": obj.get("contractLiabilityAccountingCode"),
            "contract_recognized_revenue_accounting_code": obj.get("contractRecognizedRevenueAccountingCode"),
            "deferred_revenue_accounting_code": obj.get("deferredRevenueAccountingCode"),
            "description": obj.get("description"),
            "discount_items": [CreateDiscountItem.from_dict(_item) for _item in obj.get("discountItems")] if obj.get("discountItems") is not None else None,
            "exclude_item_billing_from_revenue_accounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "item_type": obj.get("itemType"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "purchase_order_number": obj.get("purchaseOrderNumber"),
            "quantity": obj.get("quantity") if obj.get("quantity") is not None else 1,
            "recognized_revenue_accounting_code": obj.get("recognizedRevenueAccountingCode"),
            "rev_rec_code": obj.get("revRecCode"),
            "rev_rec_trigger_condition": obj.get("revRecTriggerCondition"),
            "revenue_recognition_rule_name": obj.get("revenueRecognitionRuleName"),
            "service_end_date": obj.get("serviceEndDate"),
            "service_start_date": obj.get("serviceStartDate"),
            "sku": obj.get("sku"),
            "tax_code": obj.get("taxCode"),
            "tax_items": [CreateTaxationItem.from_dict(_item) for _item in obj.get("taxItems")] if obj.get("taxItems") is not None else None,
            "tax_mode": obj.get("taxMode"),
            "unbilled_receivables_accounting_code": obj.get("unbilledReceivablesAccountingCode"),
            "unit_price": obj.get("unitPrice"),
            "uom": obj.get("uom")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


