# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from zuora_sdk.models.setting_source_component_response import SettingSourceComponentResponse

class TemplateDetailResponse(BaseModel):
    """
    Contains all template details.  # noqa: E501
    """
    active: Optional[StrictBool] = Field(None, description="Whether or not the template is active.")
    content: Optional[SettingSourceComponentResponse] = None
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="Information about the user who created it.")
    created_on: Optional[StrictStr] = Field(None, alias="createdOn", description="When it is created.")
    description: Optional[StrictStr] = Field(None, description="Template description which contains the information about the created template.")
    entity_name: Optional[StrictStr] = Field(None, alias="entityName", description="Name of the Entity")
    environment: Optional[StrictStr] = Field(None, description="Details of the environment in which the template was created.")
    errors: Optional[StrictStr] = Field(None, description="Error information.")
    id: Optional[StrictStr] = Field(None, description="Id of the template.")
    name: Optional[StrictStr] = Field(None, description="Name of the template.")
    status: Optional[StrictStr] = Field(None, description="The status of the template creation, such as whether it is in progress, completed, or failed.")
    tenant_name: Optional[StrictStr] = Field(None, alias="tenantName", description="Tenant's name for whom the template is created.")
    __properties = ["active", "content", "createdBy", "createdOn", "description", "entityName", "environment", "errors", "id", "name", "status", "tenantName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TemplateDetailResponse:
        """Create an instance of TemplateDetailResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TemplateDetailResponse:
        """Create an instance of TemplateDetailResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TemplateDetailResponse.parse_obj(obj)

        _obj = TemplateDetailResponse.parse_obj({
            "active": obj.get("active"),
            "content": SettingSourceComponentResponse.from_dict(obj.get("content")) if obj.get("content") is not None else None,
            "created_by": obj.get("createdBy"),
            "created_on": obj.get("createdOn"),
            "description": obj.get("description"),
            "entity_name": obj.get("entityName"),
            "environment": obj.get("environment"),
            "errors": obj.get("errors"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "tenant_name": obj.get("tenantName")
        })
        return _obj


