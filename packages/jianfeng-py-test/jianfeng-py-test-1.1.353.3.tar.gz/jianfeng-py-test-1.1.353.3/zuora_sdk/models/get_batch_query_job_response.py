# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from zuora_sdk.models.get_batch_query_response import GetBatchQueryResponse

class GetBatchQueryJobResponse(BaseModel):
    """
    GetBatchQueryJobResponse
    """
    batches: Optional[conlist(GetBatchQueryResponse)] = Field(None, description="A JSON array object that contains a list of batch objects. ")
    encrypted: Optional[StrictStr] = None
    format: Optional[StrictStr] = None
    id: Optional[StrictStr] = Field(None, description="The job ID created for the AQuA API request. The job ID can be used for querying for the query status.   The ID exists only if the JSON request can be parsed and validated successfully. Otherwise, the job ID is null. ")
    name: Optional[StrictStr] = Field(None, description="The name of the job. 32 character limit. ")
    partner: Optional[StrictStr] = Field(None, description="The partner field indicates the unique ID of a data integration partner. The dropdown list of this field displays partner IDs for the past thirty days.  It must be used together with \"project\" field to uniquely identify a data integration target.  For example, if a continuous AQuA session is to retrieve data incrementally for a Salesforce.com Org 00170000011K3Ub, you can use partner as \"Salesforce\", and \"project\" as \"00170000011K3Ub.\"   This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.  **Note**: Zuora highly recommends you use the stateless mode instead of the stateful mode to extract bulk data. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Bulk_data__extraction_from_Zuora_using_AQuA\" target=\"_blank\">Bulk data extraction from Zuora using AQuA</a> for best practices.  **Note**: Submit a request at <a href=\"http://support.zuora.com\" target=\"_blank\">Zuora Global Support</a> to obtain a partner ID. ")
    project: Optional[StrictStr] = Field(None, description="The project field contains the unique ID of a data integration project for a particular partner. The dropdown list of this field displays project IDs for the past thirty days.  This field must be used together with partner field to uniquely identify a data integration target.   This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null. ")
    offset: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="This field specifies the time offset for AQuA queries in stateful mode. It is an integer in the range 0 to 3,600 seconds.  For example, if you set this field to 600 seconds and you post a query in stateful mode at 2:00 AM, it will query against data created or updated between the completion time of the previous query and 1:50 AM.  The value of this field will override the value you configured in **Settings** > **Administration** > **AQuA API Stateful Mode Time Offset**.     ")
    use_last_completed_job_queries: Optional[StrictBool] = Field(None, alias="useLastCompletedJobQueries", description="If this flag is set to `true`, then all the previous queries are merged with existing queries.  If the flag is set to `false`, then the previous queries are ignored, and only the new query is executed. ")
    start_time: Optional[StrictStr] = Field(None, alias="startTime", description="The start time of the query.  ")
    status: Optional[StrictStr] = None
    localized_status: Optional[StrictStr] = Field(None, alias="localizedStatus")
    version: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The API version you want to use.   The supported versions are as follows:   - `1.1`. It supports both modes   - `1.0`. Default. It supports stateless modes only.  See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/BA_Stateless_and_Stateful_Modes\" target=\"_blank\">Stateless and stateful modes</a> for more information. ")
    error_code: Optional[StrictStr] = Field(None, alias="errorCode", description="The error code used to identify the failure reason.")
    message: Optional[StrictStr] = Field(None, description="The error message used to describe the failure reason detail.")
    __properties = ["batches", "encrypted", "format", "id", "name", "partner", "project", "offset", "useLastCompletedJobQueries", "startTime", "status", "localizedStatus", "version", "errorCode", "message"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetBatchQueryJobResponse:
        """Create an instance of GetBatchQueryJobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in batches (list)
        _items = []
        if self.batches:
            for _item in self.batches:
                if _item:
                    _items.append(_item.to_dict())
            _dict['batches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetBatchQueryJobResponse:
        """Create an instance of GetBatchQueryJobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetBatchQueryJobResponse.parse_obj(obj)

        _obj = GetBatchQueryJobResponse.parse_obj({
            "batches": [GetBatchQueryResponse.from_dict(_item) for _item in obj.get("batches")] if obj.get("batches") is not None else None,
            "encrypted": obj.get("encrypted"),
            "format": obj.get("format"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "partner": obj.get("partner"),
            "project": obj.get("project"),
            "offset": obj.get("offset"),
            "use_last_completed_job_queries": obj.get("useLastCompletedJobQueries"),
            "start_time": obj.get("startTime"),
            "status": obj.get("status"),
            "localized_status": obj.get("localizedStatus"),
            "version": obj.get("version"),
            "error_code": obj.get("errorCode"),
            "message": obj.get("message")
        })
        return _obj


