# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, constr
from zuora_sdk.models.event_type import EventType

class PostEventTriggerRequest(BaseModel):
    """
    PostEventTriggerRequest
    """
    active: StrictBool = Field(..., description="The status of the event trigger.")
    base_object: constr(strict=True, max_length=100, min_length=1) = Field(..., alias="baseObject", description="The base object that the trigger rule is defined upon. Should be specified in the pattern: ^[A-Z][\\\\w\\\\-]*$")
    condition: constr(strict=True, max_length=5000, min_length=1) = Field(..., description="The JEXL expression to be evaluated against object changes. See above for more information and an example.")
    description: Optional[constr(strict=True, max_length=1000)] = Field(None, description="The description of the event trigger.")
    event_type: EventType = Field(..., alias="eventType")
    __properties = ["active", "baseObject", "condition", "description", "eventType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostEventTriggerRequest:
        """Create an instance of PostEventTriggerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of event_type
        if self.event_type:
            _dict['eventType'] = self.event_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostEventTriggerRequest:
        """Create an instance of PostEventTriggerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostEventTriggerRequest.parse_obj(obj)

        _obj = PostEventTriggerRequest.parse_obj({
            "active": obj.get("active"),
            "base_object": obj.get("baseObject"),
            "condition": obj.get("condition"),
            "description": obj.get("description"),
            "event_type": EventType.from_dict(obj.get("eventType")) if obj.get("eventType") is not None else None
        })
        return _obj


