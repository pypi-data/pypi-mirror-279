# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, constr, validator
from zuora_sdk.models.create_non_ref_refund_finance_information import CreateNonRefRefundFinanceInformation
from zuora_sdk.models.custom_rates import CustomRates
from zuora_sdk.models.gateway_options import GatewayOptions
from zuora_sdk.models.payment_method_type import PaymentMethodType
from zuora_sdk.models.refund_credit_memo_item_request import RefundCreditMemoItemRequest

class RefundCreditMemoRequest(BaseModel):
    """
    RefundCreditMemoRequest
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    origin__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Origin__NS", description="Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    syncto_net_suite__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SynctoNetSuite__NS", description="Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Comments about the refund.")
    custom_rates: Optional[conlist(CustomRates, max_items=2)] = Field(None, alias="customRates", description="It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item, Reporting currency item, or both).  **Note**: The API custom rate feature is permission controlled.")
    finance_information: Optional[CreateNonRefRefundFinanceInformation] = Field(None, alias="financeInformation")
    gateway_id: Optional[StrictStr] = Field(None, alias="gatewayId", description="The ID of the gateway instance that processes the refund. This field can be specified only for electronic refunds. The ID must be a valid gateway instance ID, and this gateway must support the specific payment method.   If no gateway ID is specified, the default gateway in the billing account configuration will be used. If no gateway is specified in the billing account, the default gateway of the corresponding tenant will be used. ")
    gateway_options: Optional[GatewayOptions] = Field(None, alias="gatewayOptions")
    items: Optional[conlist(RefundCreditMemoItemRequest)] = Field(None, description="Container for credit memo items. The maximum number of items is 1,000.  **Note:** This field is only available if you have the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) feature enabled. Invoice Item Settlement must be used together with other Invoice Settlement features (Unapplied Payments, and Credit and Debit memos).  If you wish to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.")
    method_type: Optional[StrictStr] = Field(None, alias="methodType")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="The ID of the payment method used for the refund. This field is required for an electronic refund, and the value must be an electronic payment method ID. This field must be left empty for an external refund.  ")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.")
    reference_id: Optional[constr(strict=True, max_length=100, min_length=0)] = Field(None, alias="referenceId", description="The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.")
    refund_date: Optional[date] = Field(None, alias="refundDate", description="The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the credit memo date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.")
    second_refund_reference_id: Optional[constr(strict=True, max_length=100, min_length=0)] = Field(None, alias="secondRefundReferenceId", description="The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.")
    soft_descriptor: Optional[constr(strict=True, max_length=35)] = Field(None, alias="softDescriptor", description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.")
    soft_descriptor_phone: Optional[constr(strict=True, max_length=20)] = Field(None, alias="softDescriptorPhone", description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.")
    total_amount: Union[StrictFloat, StrictInt] = Field(..., alias="totalAmount", description="The total amount of the refund. The amount cannot exceed the unapplied amount of the associated credit memo. If the original credit memo was applied to one or more invoices or debit memos, you have to unapply a full or partial credit memo from the invoices or debit memos, and then refund the full or partial unapplied credit memo to your customers.")
    type: StrictStr = Field(..., description="The type of the refund.")
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "Origin__NS", "SyncDate__NS", "SynctoNetSuite__NS", "comment", "customRates", "financeInformation", "gatewayId", "gatewayOptions", "items", "methodType", "paymentMethodId", "reasonCode", "referenceId", "refundDate", "secondRefundReferenceId", "softDescriptor", "softDescriptorPhone", "totalAmount", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('External', 'Electronic'):
            raise ValueError("must be one of enum values ('External', 'Electronic')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RefundCreditMemoRequest:
        """Create an instance of RefundCreditMemoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in custom_rates (list)
        _items = []
        if self.custom_rates:
            for _item in self.custom_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_options
        if self.gateway_options:
            _dict['gatewayOptions'] = self.gateway_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RefundCreditMemoRequest:
        """Create an instance of RefundCreditMemoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RefundCreditMemoRequest.parse_obj(obj)

        _obj = RefundCreditMemoRequest.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "origin__ns": obj.get("Origin__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "syncto_net_suite__ns": obj.get("SynctoNetSuite__NS"),
            "comment": obj.get("comment"),
            "custom_rates": [CustomRates.from_dict(_item) for _item in obj.get("customRates")] if obj.get("customRates") is not None else None,
            "finance_information": CreateNonRefRefundFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "gateway_id": obj.get("gatewayId"),
            "gateway_options": GatewayOptions.from_dict(obj.get("gatewayOptions")) if obj.get("gatewayOptions") is not None else None,
            "items": [RefundCreditMemoItemRequest.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "method_type": obj.get("methodType"),
            "payment_method_id": obj.get("paymentMethodId"),
            "reason_code": obj.get("reasonCode"),
            "reference_id": obj.get("referenceId"),
            "refund_date": obj.get("refundDate"),
            "second_refund_reference_id": obj.get("secondRefundReferenceId"),
            "soft_descriptor": obj.get("softDescriptor"),
            "soft_descriptor_phone": obj.get("softDescriptorPhone"),
            "total_amount": obj.get("totalAmount"),
            "type": obj.get("type")
        })
        return _obj


