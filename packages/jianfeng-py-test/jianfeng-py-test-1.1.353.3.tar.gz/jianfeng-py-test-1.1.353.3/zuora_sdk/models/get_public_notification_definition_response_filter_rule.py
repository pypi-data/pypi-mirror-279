# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr, constr
from zuora_sdk.models.filter_rule_parameter_definition import FilterRuleParameterDefinition

class GetPublicNotificationDefinitionResponseFilterRule(BaseModel):
    """
      # noqa: E501
    """
    condition: Optional[StrictStr] = Field(None, description="The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Notifications with invalid merge fields will fail to evaluate, thus will not be invoked. For example, to trigger an event when an invoice is posted with the amount over 1000, you would define the following condition on the `Invoice` object:  ```changeType == 'UPDATE' && Invoice.Status == 'Posted' && Invoice.Status_old != 'Posted' && Invoice.Amount > 1000```  There are conventions and keywords you need to be aware of. For example:  * `changeType` is a keyword to specify what kind of change happened to the object. Allowed values are `INSERT`, `UPDATE` or `Delete`.  * `Invoice.Status` refers to field `Status` of the Zuora object `Invoice`.  * A variable with the `_old` suffix means itâ€™s a previous value of the corresponding object field. The \"_old\" fields are only available on the base objects. ")
    description: Optional[constr(strict=True, max_length=255)] = Field(None, description="The description of the filter rule.")
    event_type_name: Optional[constr(strict=True, min_length=1)] = Field(None, alias="eventTypeName", description="The value is `null`.")
    id: Optional[StrictStr] = Field(None, description="The ID of the filter rule. If not specified or null, the notification definition is always qualified to process events of \"eventType\".")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="The user who created the notification definition.")
    created_on: Optional[StrictStr] = Field(None, alias="createdOn", description="The user who created the notification definition.")
    parameters: Optional[Dict[str, FilterRuleParameterDefinition]] = Field(None, description="The parameters of the filter rule and their name must match those in the filter rule. And all parameters must be defined in the event type payload. The name of parameters can't be duplicate. The following reserved keywords should not be used as a parameter name: `AttachmentList`, `RecipientList`, `RecipientType`, `Exceptions`, `OCP_OBJECT_TYPE`, `OCP_OBJECT_ID`, `OCP_TRIGGER_BY` ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["condition", "description", "eventTypeName", "id", "createdBy", "createdOn", "parameters"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetPublicNotificationDefinitionResponseFilterRule:
        """Create an instance of GetPublicNotificationDefinitionResponseFilterRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key in self.parameters:
                if self.parameters[_key]:
                    _field_dict[_key] = self.parameters[_key].to_dict()
            _dict['parameters'] = _field_dict
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPublicNotificationDefinitionResponseFilterRule:
        """Create an instance of GetPublicNotificationDefinitionResponseFilterRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetPublicNotificationDefinitionResponseFilterRule.parse_obj(obj)

        _obj = GetPublicNotificationDefinitionResponseFilterRule.parse_obj({
            "condition": obj.get("condition"),
            "description": obj.get("description"),
            "event_type_name": obj.get("eventTypeName"),
            "id": obj.get("id"),
            "created_by": obj.get("createdBy"),
            "created_on": obj.get("createdOn"),
            "parameters": dict(
                (_k, FilterRuleParameterDefinition.from_dict(_v))
                for _k, _v in obj.get("parameters").items()
            )
            if obj.get("parameters") is not None
            else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


