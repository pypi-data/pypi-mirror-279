# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class UpdateFulfillmentRequest(BaseModel):
    """
    UpdateFulfillmentRequest
    """
    bill_target_date: Optional[date] = Field(None, alias="billTargetDate", description="The target date for the Fulfillment to be picked up by bill run for billing. ")
    carrier: Optional[StrictStr] = Field(None, description="The carrier of the Fulfillment. The available values can be managed in the Fulfillment Settings page under Billing Settings. ")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of a Fulfillment object. ")
    description: Optional[StrictStr] = Field(None, description="The description of the Fulfillment. ")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBillingFromRevenueAccounting", description="The flag to exclude Fulfillment related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    exclude_item_booking_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBookingFromRevenueAccounting", description="The flag to exclude Fulfillment from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    external_id: Optional[StrictStr] = Field(None, alias="externalId", description="The external id of the Fulfillment. ")
    fulfillment_date: Optional[date] = Field(None, alias="fulfillmentDate", description="The date of the Fulfillment. ")
    fulfillment_location: Optional[StrictStr] = Field(None, alias="fulfillmentLocation", description="The fulfillment location of the Fulfillment. The available values can be managed in the Fulfillment Settings page under Billing Settings. ")
    fulfillment_system: Optional[StrictStr] = Field(None, alias="fulfillmentSystem", description="The fulfillment system of the Fulfillment. The available values can be managed in the Fulfillment Settings page under Billing Settings. ")
    fulfillment_type: Optional[StrictStr] = Field(None, alias="fulfillmentType")
    order_line_item_id: Optional[StrictStr] = Field(None, alias="orderLineItemId", description="The reference id of the related Order Line Ite ")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The quantity of the Fulfillment. ")
    state: Optional[StrictStr] = None
    tracking_number: Optional[StrictStr] = Field(None, alias="trackingNumber", description="The tracking number of the Fulfillment. ")
    __properties = ["billTargetDate", "carrier", "customFields", "description", "excludeItemBillingFromRevenueAccounting", "excludeItemBookingFromRevenueAccounting", "externalId", "fulfillmentDate", "fulfillmentLocation", "fulfillmentSystem", "fulfillmentType", "orderLineItemId", "quantity", "state", "trackingNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateFulfillmentRequest:
        """Create an instance of UpdateFulfillmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateFulfillmentRequest:
        """Create an instance of UpdateFulfillmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateFulfillmentRequest.parse_obj(obj)

        _obj = UpdateFulfillmentRequest.parse_obj({
            "bill_target_date": obj.get("billTargetDate"),
            "carrier": obj.get("carrier"),
            "custom_fields": obj.get("customFields"),
            "description": obj.get("description"),
            "exclude_item_billing_from_revenue_accounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "exclude_item_booking_from_revenue_accounting": obj.get("excludeItemBookingFromRevenueAccounting"),
            "external_id": obj.get("externalId"),
            "fulfillment_date": obj.get("fulfillmentDate"),
            "fulfillment_location": obj.get("fulfillmentLocation"),
            "fulfillment_system": obj.get("fulfillmentSystem"),
            "fulfillment_type": obj.get("fulfillmentType"),
            "order_line_item_id": obj.get("orderLineItemId"),
            "quantity": obj.get("quantity"),
            "state": obj.get("state"),
            "tracking_number": obj.get("trackingNumber")
        })
        return _obj


