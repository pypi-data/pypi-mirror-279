# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class PaymentMethodUpdaterInstanceResponse(BaseModel):
    """
    Container for PMU instances available on your tenant.   # noqa: E501
    """
    days_to_update_before_bcd: Optional[StrictInt] = Field(None, alias="daysToUpdateBeforeBcd", description="The days prior to the Bill Cycle Day to start PMU service. ")
    id: Optional[StrictStr] = Field(None, description="The ID of the PMU instance. ")
    is_active: Optional[StrictBool] = Field(None, alias="isActive", description="`true` indicates that this PMU instance is active. ")
    is_default: Optional[StrictBool] = Field(None, alias="isDefault", description="`true` indicates that it is the default PMU instance. ")
    is_test: Optional[StrictStr] = Field(None, alias="isTest", description="`true` indicates that this PMU instance is for testing. ")
    process_associated_gw_only: Optional[StrictBool] = Field(None, alias="processAssociatedGwOnly", description="`true` indicates that only the payment methods for customer accounts that meet either of the following conditions are included in the updates:   - The default payment gateway of the customer account is set to an instance of the same type as `updaterGatewayType`.   - The default payment gateway of the customer account is not configured, but the default payment gateway of the tenant is set to an instance of the same type as `updaterGatewayType`.  `false` indicates that information of all payment methods is submitted. ")
    process_autopay_default_pm_only: Optional[StrictBool] = Field(None, alias="processAutopayDefaultPmOnly", description="`true` indicates that only the default payment methods for customer accounts with the AutoPay setting enabled are included in the updates.   `false` indicates that data of all payment methods for all customer accounts is submitted, regardless of whether AutoPay is enabled for the customer account or not. ")
    process_mastercard: Optional[StrictBool] = Field(None, alias="processMastercard", description="`true` indicates that Mastercard data processing is supported. ")
    process_visa: Optional[StrictBool] = Field(None, alias="processVisa", description="`true` indicates that Visa data processing is supported. ")
    updater_gateway_type: Optional[StrictStr] = Field(None, alias="updaterGatewayType", description="The payment gateway type of the PMU instance. ")
    updater_name: Optional[StrictStr] = Field(None, alias="updaterName", description="The name of the PMU instance. ")
    __properties = ["daysToUpdateBeforeBcd", "id", "isActive", "isDefault", "isTest", "processAssociatedGwOnly", "processAutopayDefaultPmOnly", "processMastercard", "processVisa", "updaterGatewayType", "updaterName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentMethodUpdaterInstanceResponse:
        """Create an instance of PaymentMethodUpdaterInstanceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentMethodUpdaterInstanceResponse:
        """Create an instance of PaymentMethodUpdaterInstanceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentMethodUpdaterInstanceResponse.parse_obj(obj)

        _obj = PaymentMethodUpdaterInstanceResponse.parse_obj({
            "days_to_update_before_bcd": obj.get("daysToUpdateBeforeBcd"),
            "id": obj.get("id"),
            "is_active": obj.get("isActive"),
            "is_default": obj.get("isDefault"),
            "is_test": obj.get("isTest"),
            "process_associated_gw_only": obj.get("processAssociatedGwOnly"),
            "process_autopay_default_pm_only": obj.get("processAutopayDefaultPmOnly"),
            "process_mastercard": obj.get("processMastercard"),
            "process_visa": obj.get("processVisa"),
            "updater_gateway_type": obj.get("updaterGatewayType"),
            "updater_name": obj.get("updaterName")
        })
        return _obj


