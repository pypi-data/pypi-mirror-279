# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from zuora_sdk.models.order_action_rate_plan_charge_override import OrderActionRatePlanChargeOverride

class OrderActionRatePlanOverride(BaseModel):
    """
    Rate plan associated with a subscription.   # noqa: E501
    """
    charge_overrides: Optional[conlist(OrderActionRatePlanChargeOverride)] = Field(None, alias="chargeOverrides", description="List of charges associated with the rate plan. ")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of a Rate Plan object. ")
    new_rate_plan_id: Optional[StrictStr] = Field(None, alias="newRatePlanId", description="Internal identifier of the rate plan. ")
    product_rate_plan_id: StrictStr = Field(..., alias="productRatePlanId", description="Internal identifier of the product rate plan that the rate plan is based on. ")
    unique_token: Optional[constr(strict=True, max_length=50)] = Field(None, alias="uniqueToken", description="Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify. ")
    __properties = ["chargeOverrides", "customFields", "newRatePlanId", "productRatePlanId", "uniqueToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderActionRatePlanOverride:
        """Create an instance of OrderActionRatePlanOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in charge_overrides (list)
        _items = []
        if self.charge_overrides:
            for _item in self.charge_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeOverrides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderActionRatePlanOverride:
        """Create an instance of OrderActionRatePlanOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderActionRatePlanOverride.parse_obj(obj)

        _obj = OrderActionRatePlanOverride.parse_obj({
            "charge_overrides": [OrderActionRatePlanChargeOverride.from_dict(_item) for _item in obj.get("chargeOverrides")] if obj.get("chargeOverrides") is not None else None,
            "custom_fields": obj.get("customFields"),
            "new_rate_plan_id": obj.get("newRatePlanId"),
            "product_rate_plan_id": obj.get("productRatePlanId"),
            "unique_token": obj.get("uniqueToken")
        })
        return _obj


