# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from zuora_sdk.models.charge_model_data_override import ChargeModelDataOverride
from zuora_sdk.models.discount_pricing_update import DiscountPricingUpdate
from zuora_sdk.models.recurring_delivery_pricing_update import RecurringDeliveryPricingUpdate
from zuora_sdk.models.recurring_flat_fee_pricing_update import RecurringFlatFeePricingUpdate
from zuora_sdk.models.recurring_per_unit_pricing_update import RecurringPerUnitPricingUpdate
from zuora_sdk.models.recurring_tiered_pricing_update import RecurringTieredPricingUpdate
from zuora_sdk.models.recurring_volume_pricing_update import RecurringVolumePricingUpdate
from zuora_sdk.models.usage_flat_fee_pricing_update import UsageFlatFeePricingUpdate
from zuora_sdk.models.usage_overage_pricing_update import UsageOveragePricingUpdate
from zuora_sdk.models.usage_per_unit_pricing_update import UsagePerUnitPricingUpdate
from zuora_sdk.models.usage_tiered_pricing_update import UsageTieredPricingUpdate
from zuora_sdk.models.usage_tiered_with_overage_pricing_update import UsageTieredWithOveragePricingUpdate
from zuora_sdk.models.usage_volume_pricing_update import UsageVolumePricingUpdate

class CreateOrderPricingUpdate(BaseModel):
    """
    CreateOrderPricingUpdate
    """
    charge_model_data: Optional[ChargeModelDataOverride] = Field(None, alias="chargeModelData")
    discount: Optional[DiscountPricingUpdate] = None
    recurring_delivery_based: Optional[RecurringDeliveryPricingUpdate] = Field(None, alias="recurringDeliveryBased")
    recurring_flat_fee: Optional[RecurringFlatFeePricingUpdate] = Field(None, alias="recurringFlatFee")
    recurring_per_unit: Optional[RecurringPerUnitPricingUpdate] = Field(None, alias="recurringPerUnit")
    recurring_tiered: Optional[RecurringTieredPricingUpdate] = Field(None, alias="recurringTiered")
    recurring_volume: Optional[RecurringVolumePricingUpdate] = Field(None, alias="recurringVolume")
    usage_flat_fee: Optional[UsageFlatFeePricingUpdate] = Field(None, alias="usageFlatFee")
    usage_overage: Optional[UsageOveragePricingUpdate] = Field(None, alias="usageOverage")
    usage_per_unit: Optional[UsagePerUnitPricingUpdate] = Field(None, alias="usagePerUnit")
    usage_tiered: Optional[UsageTieredPricingUpdate] = Field(None, alias="usageTiered")
    usage_tiered_with_overage: Optional[UsageTieredWithOveragePricingUpdate] = Field(None, alias="usageTieredWithOverage")
    usage_volume: Optional[UsageVolumePricingUpdate] = Field(None, alias="usageVolume")
    __properties = ["chargeModelData", "discount", "recurringDeliveryBased", "recurringFlatFee", "recurringPerUnit", "recurringTiered", "recurringVolume", "usageFlatFee", "usageOverage", "usagePerUnit", "usageTiered", "usageTieredWithOverage", "usageVolume"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateOrderPricingUpdate:
        """Create an instance of CreateOrderPricingUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of charge_model_data
        if self.charge_model_data:
            _dict['chargeModelData'] = self.charge_model_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring_delivery_based
        if self.recurring_delivery_based:
            _dict['recurringDeliveryBased'] = self.recurring_delivery_based.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring_flat_fee
        if self.recurring_flat_fee:
            _dict['recurringFlatFee'] = self.recurring_flat_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring_per_unit
        if self.recurring_per_unit:
            _dict['recurringPerUnit'] = self.recurring_per_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring_tiered
        if self.recurring_tiered:
            _dict['recurringTiered'] = self.recurring_tiered.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring_volume
        if self.recurring_volume:
            _dict['recurringVolume'] = self.recurring_volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_flat_fee
        if self.usage_flat_fee:
            _dict['usageFlatFee'] = self.usage_flat_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_overage
        if self.usage_overage:
            _dict['usageOverage'] = self.usage_overage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_per_unit
        if self.usage_per_unit:
            _dict['usagePerUnit'] = self.usage_per_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_tiered
        if self.usage_tiered:
            _dict['usageTiered'] = self.usage_tiered.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_tiered_with_overage
        if self.usage_tiered_with_overage:
            _dict['usageTieredWithOverage'] = self.usage_tiered_with_overage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_volume
        if self.usage_volume:
            _dict['usageVolume'] = self.usage_volume.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateOrderPricingUpdate:
        """Create an instance of CreateOrderPricingUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateOrderPricingUpdate.parse_obj(obj)

        _obj = CreateOrderPricingUpdate.parse_obj({
            "charge_model_data": ChargeModelDataOverride.from_dict(obj.get("chargeModelData")) if obj.get("chargeModelData") is not None else None,
            "discount": DiscountPricingUpdate.from_dict(obj.get("discount")) if obj.get("discount") is not None else None,
            "recurring_delivery_based": RecurringDeliveryPricingUpdate.from_dict(obj.get("recurringDeliveryBased")) if obj.get("recurringDeliveryBased") is not None else None,
            "recurring_flat_fee": RecurringFlatFeePricingUpdate.from_dict(obj.get("recurringFlatFee")) if obj.get("recurringFlatFee") is not None else None,
            "recurring_per_unit": RecurringPerUnitPricingUpdate.from_dict(obj.get("recurringPerUnit")) if obj.get("recurringPerUnit") is not None else None,
            "recurring_tiered": RecurringTieredPricingUpdate.from_dict(obj.get("recurringTiered")) if obj.get("recurringTiered") is not None else None,
            "recurring_volume": RecurringVolumePricingUpdate.from_dict(obj.get("recurringVolume")) if obj.get("recurringVolume") is not None else None,
            "usage_flat_fee": UsageFlatFeePricingUpdate.from_dict(obj.get("usageFlatFee")) if obj.get("usageFlatFee") is not None else None,
            "usage_overage": UsageOveragePricingUpdate.from_dict(obj.get("usageOverage")) if obj.get("usageOverage") is not None else None,
            "usage_per_unit": UsagePerUnitPricingUpdate.from_dict(obj.get("usagePerUnit")) if obj.get("usagePerUnit") is not None else None,
            "usage_tiered": UsageTieredPricingUpdate.from_dict(obj.get("usageTiered")) if obj.get("usageTiered") is not None else None,
            "usage_tiered_with_overage": UsageTieredWithOveragePricingUpdate.from_dict(obj.get("usageTieredWithOverage")) if obj.get("usageTieredWithOverage") is not None else None,
            "usage_volume": UsageVolumePricingUpdate.from_dict(obj.get("usageVolume")) if obj.get("usageVolume") is not None else None
        })
        return _obj


