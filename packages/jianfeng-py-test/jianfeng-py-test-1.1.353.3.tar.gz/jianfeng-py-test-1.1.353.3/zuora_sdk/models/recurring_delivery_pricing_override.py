# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, confloat, conint
from zuora_sdk.models.delivery_schedule_params import DeliveryScheduleParams
from zuora_sdk.models.price_change_option import PriceChangeOption

class RecurringDeliveryPricingOverride(BaseModel):
    """
    Pricing information about a recurring charge that uses the Delivery Pricing charge model. In this charge model, the charge has a fixed price. This field is only available if you have the Delivery Pricing charge model enabled.  **Note**: The Delivery Pricing charge model is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at <a href=\"http://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>.   # noqa: E501
    """
    price_change_option: Optional[StrictStr] = Field(None, alias="priceChangeOption")
    price_increase_percentage: Optional[Union[confloat(ge=-100, strict=True), conint(ge=-100, strict=True)]] = Field(None, alias="priceIncreasePercentage", description="Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`. ")
    delivery_schedule: Optional[DeliveryScheduleParams] = Field(None, alias="deliverySchedule")
    list_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="listPrice", description="Price of the charge in each recurring period. ")
    __properties = ["priceChangeOption", "priceIncreasePercentage", "deliverySchedule", "listPrice"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecurringDeliveryPricingOverride:
        """Create an instance of RecurringDeliveryPricingOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of delivery_schedule
        if self.delivery_schedule:
            _dict['deliverySchedule'] = self.delivery_schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecurringDeliveryPricingOverride:
        """Create an instance of RecurringDeliveryPricingOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecurringDeliveryPricingOverride.parse_obj(obj)

        _obj = RecurringDeliveryPricingOverride.parse_obj({
            "price_change_option": obj.get("priceChangeOption"),
            "price_increase_percentage": obj.get("priceIncreasePercentage"),
            "delivery_schedule": DeliveryScheduleParams.from_dict(obj.get("deliverySchedule")) if obj.get("deliverySchedule") is not None else None,
            "list_price": obj.get("listPrice")
        })
        return _obj


