# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from zuora_sdk.models.account_summary_basic_info import AccountSummaryBasicInfo
from zuora_sdk.models.account_summary_invoice import AccountSummaryInvoice
from zuora_sdk.models.account_summary_payment import AccountSummaryPayment
from zuora_sdk.models.account_summary_subscription import AccountSummarySubscription
from zuora_sdk.models.account_summary_usage import AccountSummaryUsage
from zuora_sdk.models.contact import Contact
from zuora_sdk.models.tax_info import TaxInfo

class AccountSummaryResponse(BaseModel):
    """
    AccountSummaryResponse
    """
    basic_info: Optional[AccountSummaryBasicInfo] = Field(None, alias="basicInfo")
    bill_to_contact: Optional[Contact] = Field(None, alias="billToContact")
    invoices: Optional[conlist(AccountSummaryInvoice)] = Field(None, description="Container for invoices. Only returns the last 6 invoices. ")
    payments: Optional[conlist(AccountSummaryPayment)] = Field(None, description="Container for payments. Only returns the last 6 payments. ")
    sold_to_contact: Optional[Contact] = Field(None, alias="soldToContact")
    subscriptions: Optional[conlist(AccountSummarySubscription)] = Field(None, description="Container for subscriptions. ")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully. ")
    tax_info: Optional[TaxInfo] = Field(None, alias="taxInfo")
    usage: Optional[conlist(AccountSummaryUsage)] = Field(None, description="Container for usage data. Only returns the last 6 months of usage.  **Note:** If the Active Rating feature is enabled, no usage data is returned in the response body field. ")
    __properties = ["basicInfo", "billToContact", "invoices", "payments", "soldToContact", "subscriptions", "success", "taxInfo", "usage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountSummaryResponse:
        """Create an instance of AccountSummaryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of basic_info
        if self.basic_info:
            _dict['basicInfo'] = self.basic_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item in self.invoices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item in self.payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact
        if self.sold_to_contact:
            _dict['soldToContact'] = self.sold_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of tax_info
        if self.tax_info:
            _dict['taxInfo'] = self.tax_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in usage (list)
        _items = []
        if self.usage:
            for _item in self.usage:
                if _item:
                    _items.append(_item.to_dict())
            _dict['usage'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountSummaryResponse:
        """Create an instance of AccountSummaryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountSummaryResponse.parse_obj(obj)

        _obj = AccountSummaryResponse.parse_obj({
            "basic_info": AccountSummaryBasicInfo.from_dict(obj.get("basicInfo")) if obj.get("basicInfo") is not None else None,
            "bill_to_contact": Contact.from_dict(obj.get("billToContact")) if obj.get("billToContact") is not None else None,
            "invoices": [AccountSummaryInvoice.from_dict(_item) for _item in obj.get("invoices")] if obj.get("invoices") is not None else None,
            "payments": [AccountSummaryPayment.from_dict(_item) for _item in obj.get("payments")] if obj.get("payments") is not None else None,
            "sold_to_contact": Contact.from_dict(obj.get("soldToContact")) if obj.get("soldToContact") is not None else None,
            "subscriptions": [AccountSummarySubscription.from_dict(_item) for _item in obj.get("subscriptions")] if obj.get("subscriptions") is not None else None,
            "success": obj.get("success"),
            "tax_info": TaxInfo.from_dict(obj.get("taxInfo")) if obj.get("taxInfo") is not None else None,
            "usage": [AccountSummaryUsage.from_dict(_item) for _item in obj.get("usage")] if obj.get("usage") is not None else None
        })
        return _obj


