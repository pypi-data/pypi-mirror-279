# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, condecimal, conlist, validator
from zuora_sdk.models.payment_schedule_billing_document import PaymentScheduleBillingDocument
from zuora_sdk.models.payment_schedule_linked_payment_id import PaymentScheduleLinkedPaymentID
from zuora_sdk.models.payment_schedule_payment_option_fields import PaymentSchedulePaymentOptionFields

class PaymentScheduleItem(BaseModel):
    """
    PaymentScheduleItem
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="ID of the customer account that owns the payment schedule item, for example `402880e741112b310149b7343ef81234`. ")
    amount: Optional[condecimal()] = Field(None, description="The total amount of the payment schedule. ")
    balance: Optional[condecimal()] = Field(None, description="The remaining balance of payment schedule item. ")
    billing_document: Optional[PaymentScheduleBillingDocument] = Field(None, alias="billingDocument")
    cancellation_reason: Optional[StrictStr] = Field(None, alias="cancellationReason", description="The reason for the cancellation of payment schedule item. ")
    cancelled_by_id: Optional[StrictStr] = Field(None, alias="cancelledById", description="The ID of the user who cancel the payment schedule item. ")
    cancelled_on: Optional[StrictStr] = Field(None, alias="cancelledOn", description="The date and time when the payment schedule item was cancelled. ")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the user who created the payment schedule item. ")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the payment schedule item was created. ")
    currency: Optional[StrictStr] = Field(None, description="The currency of the payment. ")
    description: Optional[StrictStr] = Field(None, description="The description of the payment schedule item. ")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage", description="The error message indicating if the error is related to the configuration or the payment collection. ")
    id: Optional[StrictStr] = Field(None, description="ID of the payment schedule item. For example, `412880e749b72b310149b7343ef81346`. ")
    number: Optional[StrictStr] = Field(None, description="Number of the payment schedule item. ")
    payment_gateway_id: Optional[StrictStr] = Field(None, alias="paymentGatewayId", description="ID of the payment gateway of the payment schedule item. ")
    payment_id: Optional[StrictStr] = Field(None, alias="paymentId", description="ID of the payment that is created by the payment schedule item, or linked to the payment schedule item. This field is only available if the request doesn’t specify `zuora-version`, or `zuora-version` is set to a value equal to or smaller than `336.0`.  ")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="ID of the payment method of the payment schedule item. ")
    payment_option: Optional[conlist(PaymentSchedulePaymentOptionFields)] = Field(None, alias="paymentOption", description="Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.  `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.  This field is only available if `zuora-version` is set to `337.0` or later. ")
    payment_schedule_id: Optional[StrictStr] = Field(None, alias="paymentScheduleId", description="ID of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`. ")
    payment_schedule_number: Optional[StrictStr] = Field(None, alias="paymentScheduleNumber", description="Number of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`. ")
    psi_payments: Optional[conlist(PaymentScheduleLinkedPaymentID)] = Field(None, alias="psiPayments", description="Container for payments linked to the payment schedule item. ")
    run_hour: Optional[StrictInt] = Field(None, alias="runHour", description="At which hour in the day in the tenant’s timezone this payment will be collected. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs. ")
    scheduled_date: Optional[StrictStr] = Field(None, alias="scheduledDate", description="The scheduled date when the payment is processed. ")
    standalone: Optional[StrictBool] = Field(None, description="Indicates if the payment created by the payment schedule item is a standalone payment or not. ")
    status: Optional[StrictStr] = Field(None, description="ID of the payment method of the payment schedule item.  - `Pending`: Payment schedule item is waiting for processing. - `Processed`: The payment has been collected. - `Error`: Failed to collect the payment. - `Canceled`: After a pending payment schedule item is canceled by the user, the item is marked as `Canceled`. ")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the user who updated the payment schedule item. ")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the payment schedule item was last updated. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["accountId", "amount", "balance", "billingDocument", "cancellationReason", "cancelledById", "cancelledOn", "createdById", "createdDate", "currency", "description", "errorMessage", "id", "number", "paymentGatewayId", "paymentId", "paymentMethodId", "paymentOption", "paymentScheduleId", "paymentScheduleNumber", "psiPayments", "runHour", "scheduledDate", "standalone", "status", "updatedById", "updatedDate"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Pending', 'Processed', 'Error', 'Canceled'):
            raise ValueError("must be one of enum values ('Pending', 'Processed', 'Error', 'Canceled')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentScheduleItem:
        """Create an instance of PaymentScheduleItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing_document
        if self.billing_document:
            _dict['billingDocument'] = self.billing_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_option (list)
        _items = []
        if self.payment_option:
            for _item in self.payment_option:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentOption'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in psi_payments (list)
        _items = []
        if self.psi_payments:
            for _item in self.psi_payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['psiPayments'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentScheduleItem:
        """Create an instance of PaymentScheduleItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentScheduleItem.parse_obj(obj)

        _obj = PaymentScheduleItem.parse_obj({
            "account_id": obj.get("accountId"),
            "amount": obj.get("amount"),
            "balance": obj.get("balance"),
            "billing_document": PaymentScheduleBillingDocument.from_dict(obj.get("billingDocument")) if obj.get("billingDocument") is not None else None,
            "cancellation_reason": obj.get("cancellationReason"),
            "cancelled_by_id": obj.get("cancelledById"),
            "cancelled_on": obj.get("cancelledOn"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "error_message": obj.get("errorMessage"),
            "id": obj.get("id"),
            "number": obj.get("number"),
            "payment_gateway_id": obj.get("paymentGatewayId"),
            "payment_id": obj.get("paymentId"),
            "payment_method_id": obj.get("paymentMethodId"),
            "payment_option": [PaymentSchedulePaymentOptionFields.from_dict(_item) for _item in obj.get("paymentOption")] if obj.get("paymentOption") is not None else None,
            "payment_schedule_id": obj.get("paymentScheduleId"),
            "payment_schedule_number": obj.get("paymentScheduleNumber"),
            "psi_payments": [PaymentScheduleLinkedPaymentID.from_dict(_item) for _item in obj.get("psiPayments")] if obj.get("psiPayments") is not None else None,
            "run_hour": obj.get("runHour"),
            "scheduled_date": obj.get("scheduledDate"),
            "standalone": obj.get("standalone"),
            "status": obj.get("status"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


