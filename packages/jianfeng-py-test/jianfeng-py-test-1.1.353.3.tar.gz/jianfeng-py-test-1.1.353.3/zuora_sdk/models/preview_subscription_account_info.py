# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr
from zuora_sdk.models.account_object_ns_fields_customer_type_ns import AccountObjectNSFieldsCustomerTypeNS
from zuora_sdk.models.account_object_ns_fields_syncto_net_suite_ns import AccountObjectNSFieldsSynctoNetSuiteNS
from zuora_sdk.models.preview_subscription_bill_to_contact import PreviewSubscriptionBillToContact

class PreviewSubscriptionAccountInfo(BaseModel):
    """
    A container for providing a customer account information if you do not have an existing customer account. This customer account information is only used for subscription preview.  You must specify the account information either in this field or in the `accountKey` field with the following conditions:  * If you already have a customer account, specify the account number or ID in the accountKey field. * If you do not have a customer account, provide account information in this field.   # noqa: E501
    """
    class__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Class__NS", description="Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    customer_type__ns: Optional[StrictStr] = Field(None, alias="CustomerType__NS")
    department__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Department__NS", description="Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    location__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Location__NS", description="Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    subsidiary__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="Subsidiary__NS", description="Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    syncto_net_suite__ns: Optional[StrictStr] = Field(None, alias="SynctoNetSuite__NS")
    bill_cycle_day: StrictInt = Field(..., alias="billCycleDay", description="The account's bill cycle day (BCD), when bill runs generate invoices for the account. Specify any day of the month (`1`-`31`, where `31` = end-of-month), or `0` for auto-set. ")
    bill_to_contact: PreviewSubscriptionBillToContact = Field(..., alias="billToContact")
    currency: StrictStr = Field(..., description="A currency as defined in Billing Settings. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["Class__NS", "CustomerType__NS", "Department__NS", "IntegrationId__NS", "IntegrationStatus__NS", "Location__NS", "Subsidiary__NS", "SyncDate__NS", "SynctoNetSuite__NS", "billCycleDay", "billToContact", "currency"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewSubscriptionAccountInfo:
        """Create an instance of PreviewSubscriptionAccountInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewSubscriptionAccountInfo:
        """Create an instance of PreviewSubscriptionAccountInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewSubscriptionAccountInfo.parse_obj(obj)

        _obj = PreviewSubscriptionAccountInfo.parse_obj({
            "class__ns": obj.get("Class__NS"),
            "customer_type__ns": obj.get("CustomerType__NS"),
            "department__ns": obj.get("Department__NS"),
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "location__ns": obj.get("Location__NS"),
            "subsidiary__ns": obj.get("Subsidiary__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "syncto_net_suite__ns": obj.get("SynctoNetSuite__NS"),
            "bill_cycle_day": obj.get("billCycleDay"),
            "bill_to_contact": PreviewSubscriptionBillToContact.from_dict(obj.get("billToContact")) if obj.get("billToContact") is not None else None,
            "currency": obj.get("currency")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


