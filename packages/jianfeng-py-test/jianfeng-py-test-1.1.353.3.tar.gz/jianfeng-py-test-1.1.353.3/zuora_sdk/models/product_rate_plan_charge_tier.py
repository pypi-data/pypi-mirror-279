# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from zuora_sdk.models.price_format_product_rate_plan_charge_tier import PriceFormatProductRatePlanChargeTier

class ProductRatePlanChargeTier(BaseModel):
    """
    ProductRatePlanChargeTier
    """
    currency: Optional[StrictStr] = Field(None, alias="Currency", description="The code corresponding to the currency for the tier's price. ")
    discount_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="DiscountAmount", description="The specific amount for a fixed discount. Required if the charge model of the product rate plan charge is `Discount-Fixed Amount`. ")
    discount_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="DiscountPercentage", description="The percentage of discount for a percentage discount. Required if the charge model of the product rate plan charge is `Discount-Percentage`. ")
    ending_unit: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="EndingUnit", description="The end number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`. ")
    is_overage_price: Optional[StrictBool] = Field(None, alias="IsOveragePrice", description="Indicates if the price is an overage price, which is the price when usage surpasses the last defined tier. ")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Price", description="The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing. ")
    price_format: Optional[PriceFormatProductRatePlanChargeTier] = Field(None, alias="PriceFormat")
    starting_unit: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="StartingUnit", description="The starting number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`. ")
    __properties = ["Currency", "DiscountAmount", "DiscountPercentage", "EndingUnit", "IsOveragePrice", "Price", "PriceFormat", "StartingUnit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductRatePlanChargeTier:
        """Create an instance of ProductRatePlanChargeTier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductRatePlanChargeTier:
        """Create an instance of ProductRatePlanChargeTier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductRatePlanChargeTier.parse_obj(obj)

        _obj = ProductRatePlanChargeTier.parse_obj({
            "currency": obj.get("Currency"),
            "discount_amount": obj.get("DiscountAmount"),
            "discount_percentage": obj.get("DiscountPercentage"),
            "ending_unit": obj.get("EndingUnit"),
            "is_overage_price": obj.get("IsOveragePrice"),
            "price": obj.get("Price"),
            "price_format": obj.get("PriceFormat"),
            "starting_unit": obj.get("StartingUnit")
        })
        return _obj


