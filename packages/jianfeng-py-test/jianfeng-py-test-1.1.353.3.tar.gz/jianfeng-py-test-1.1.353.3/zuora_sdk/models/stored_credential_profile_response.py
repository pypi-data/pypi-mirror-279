# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr

class StoredCredentialProfileResponse(BaseModel):
    """
    StoredCredentialProfileResponse
    """
    activated_on: Optional[datetime] = Field(None, alias="activatedOn", description="The date when the stored credential profile was activated (if applicable). ")
    agreed_on: Optional[datetime] = Field(None, alias="agreedOn", description="The date when the stored credential profile was created. ")
    brand: Optional[StrictStr] = Field(None, description="The stored credential transaction framework. For example, Visa. ")
    cancelled_on: Optional[datetime] = Field(None, alias="cancelledOn", description="The date when the stored credential profile was cancelled (if applicable). ")
    consent_agreement_ref: Optional[constr(strict=True, max_length=128)] = Field(None, alias="consentAgreementRef", description="Your reference for the consent agreement that you have established with the customer. ")
    consent_agreement_src: Optional[StrictStr] = Field(None, alias="consentAgreementSrc")
    expired_on: Optional[datetime] = Field(None, alias="expiredOn", description="The date when the stored credential profile was expired (if applicable). ")
    number: Optional[StrictInt] = Field(None, description="The number that identifies the stored credential profile within the payment method. ")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="ID of the payment method. ")
    status: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties = ["activatedOn", "agreedOn", "brand", "cancelledOn", "consentAgreementRef", "consentAgreementSrc", "expiredOn", "number", "paymentMethodId", "status", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StoredCredentialProfileResponse:
        """Create an instance of StoredCredentialProfileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StoredCredentialProfileResponse:
        """Create an instance of StoredCredentialProfileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StoredCredentialProfileResponse.parse_obj(obj)

        _obj = StoredCredentialProfileResponse.parse_obj({
            "activated_on": obj.get("activatedOn"),
            "agreed_on": obj.get("agreedOn"),
            "brand": obj.get("brand"),
            "cancelled_on": obj.get("cancelledOn"),
            "consent_agreement_ref": obj.get("consentAgreementRef"),
            "consent_agreement_src": obj.get("consentAgreementSrc"),
            "expired_on": obj.get("expiredOn"),
            "number": obj.get("number"),
            "payment_method_id": obj.get("paymentMethodId"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj


