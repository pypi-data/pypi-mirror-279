# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from zuora_sdk.models.failed_reason import FailedReason
from zuora_sdk.models.update_order_trigger_date_response import UpdateOrderTriggerDateResponse

class UpdateOrderTriggerDatesResponse(BaseModel):
    """
    UpdateOrderTriggerDatesResponse
    """
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The account number for the order.")
    order_number: Optional[StrictStr] = Field(None, alias="orderNumber", description="The order number of the order updated.")
    status: Optional[StrictStr] = Field(None, description="Status of the order.")
    subscriptions: Optional[conlist(UpdateOrderTriggerDateResponse)] = Field(None, description="The subscriptions updated.")
    __properties = ["processId", "requestId", "reasons", "success", "accountNumber", "orderNumber", "status", "subscriptions"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Completed', 'Pending'):
            raise ValueError("must be one of enum values ('Completed', 'Pending')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateOrderTriggerDatesResponse:
        """Create an instance of UpdateOrderTriggerDatesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateOrderTriggerDatesResponse:
        """Create an instance of UpdateOrderTriggerDatesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateOrderTriggerDatesResponse.parse_obj(obj)

        _obj = UpdateOrderTriggerDatesResponse.parse_obj({
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "account_number": obj.get("accountNumber"),
            "order_number": obj.get("orderNumber"),
            "status": obj.get("status"),
            "subscriptions": [UpdateOrderTriggerDateResponse.from_dict(_item) for _item in obj.get("subscriptions")] if obj.get("subscriptions") is not None else None
        })
        return _obj


