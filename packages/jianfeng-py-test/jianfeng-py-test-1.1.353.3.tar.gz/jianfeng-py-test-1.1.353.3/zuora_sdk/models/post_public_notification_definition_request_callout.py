# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from zuora_sdk.models.callout_auth import CalloutAuth

class PostPublicNotificationDefinitionRequestCallout(BaseModel):
    """
    PostPublicNotificationDefinitionRequestCallout
    """
    active: Optional[StrictBool] = Field(True, description="The status of the callout. The default is `true`.")
    callout_auth: Optional[CalloutAuth] = Field(None, alias="calloutAuth")
    callout_baseurl: constr(strict=True, min_length=10) = Field(..., alias="calloutBaseurl", description="The callout URL. It must start with 'https://'")
    callout_params: Optional[Dict[str, StrictStr]] = Field(None, alias="calloutParams", description="A key-value map of merge fields of this callout. ")
    callout_retry: Optional[StrictBool] = Field(True, alias="calloutRetry", description="Specified whether to retry the callout when the callout fails. The default value is `true`.")
    description: Optional[constr(strict=True, max_length=255)] = Field(None, description="Description for the callout.")
    event_type_name: constr(strict=True, min_length=1) = Field(..., alias="eventTypeName", description="The name of the event type.")
    http_method: StrictStr = Field(..., alias="httpMethod")
    name: constr(strict=True, max_length=255) = Field(..., description="The name of the created callout.")
    required_auth: StrictBool = Field(..., alias="requiredAuth", description="Specifies whether the callout requires auth.")
    __properties = ["active", "calloutAuth", "calloutBaseurl", "calloutParams", "calloutRetry", "description", "eventTypeName", "httpMethod", "name", "requiredAuth"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostPublicNotificationDefinitionRequestCallout:
        """Create an instance of PostPublicNotificationDefinitionRequestCallout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of callout_auth
        if self.callout_auth:
            _dict['calloutAuth'] = self.callout_auth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostPublicNotificationDefinitionRequestCallout:
        """Create an instance of PostPublicNotificationDefinitionRequestCallout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostPublicNotificationDefinitionRequestCallout.parse_obj(obj)

        _obj = PostPublicNotificationDefinitionRequestCallout.parse_obj({
            "active": obj.get("active") if obj.get("active") is not None else True,
            "callout_auth": CalloutAuth.from_dict(obj.get("calloutAuth")) if obj.get("calloutAuth") is not None else None,
            "callout_baseurl": obj.get("calloutBaseurl"),
            "callout_params": obj.get("calloutParams"),
            "callout_retry": obj.get("calloutRetry") if obj.get("calloutRetry") is not None else True,
            "description": obj.get("description"),
            "event_type_name": obj.get("eventTypeName"),
            "http_method": obj.get("httpMethod"),
            "name": obj.get("name"),
            "required_auth": obj.get("requiredAuth")
        })
        return _obj


