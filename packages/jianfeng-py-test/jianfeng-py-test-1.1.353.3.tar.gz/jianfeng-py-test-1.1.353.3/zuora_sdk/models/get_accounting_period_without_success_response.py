# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from zuora_sdk.models.get_accounting_period_all_of_fie_ids_response import GetAccountingPeriodAllOfFieIdsResponse
from zuora_sdk.models.organization_label import OrganizationLabel

class GetAccountingPeriodWithoutSuccessResponse(BaseModel):
    """
    GetAccountingPeriodWithoutSuccessResponse
    """
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="ID of the user who created the accounting period. ")
    created_on: Optional[StrictStr] = Field(None, alias="createdOn", description="Date and time when the accounting period was created. ")
    end_date: Optional[date] = Field(None, alias="endDate", description="The end date of the accounting period. ")
    file_ids: Optional[GetAccountingPeriodAllOfFieIdsResponse] = Field(None, alias="fileIds")
    fiscal_year: Optional[StrictStr] = Field(None, alias="fiscalYear", description="Fiscal year of the accounting period. ")
    fiscal_quarter: Optional[StrictInt] = None
    id: Optional[StrictStr] = Field(None, description="ID of the accounting period. ")
    name: Optional[StrictStr] = Field(None, description="Name of the accounting period. ")
    notes: Optional[StrictStr] = Field(None, description="Any optional notes about the accounting period. ")
    run_trial_balance_end: Optional[StrictStr] = Field(None, alias="runTrialBalanceEnd", description="Date and time that the trial balance was completed. If the trial balance status is `Pending`, `Processing`, or `Error`, this field is `null`. ")
    run_trial_balance_error_message: Optional[StrictStr] = Field(None, alias="runTrialBalanceErrorMessage", description="If trial balance status is Error, an error message is returned in this field. ")
    run_trial_balance_start: Optional[StrictStr] = Field(None, alias="runTrialBalanceStart", description="Date and time that the trial balance was run. If the trial balance status is `Pending`, this field is `null`. ")
    run_trial_balance_status: Optional[StrictStr] = Field(None, alias="runTrialBalanceStatus", description="Status of the trial balance for the accounting period. Possible values:  * `Pending` * `Processing` * `Completed` * `Error` ")
    start_date: Optional[date] = Field(None, alias="startDate", description="The start date of the accounting period. ")
    status: Optional[StrictStr] = Field(None, description="Status of the accounting period. Possible values:  * `Open` * `PendingClose` * `Closed` ")
    updated_by: Optional[StrictStr] = Field(None, alias="updatedBy", description="D of the user who last updated the accounting period. ")
    updated_on: Optional[StrictStr] = Field(None, alias="updatedOn", description="Date and time when the accounting period was last updated. ")
    organization_labels: Optional[conlist(OrganizationLabel)] = Field(None, alias="organizationLabels", description="Organization labels. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["createdBy", "createdOn", "endDate", "fileIds", "fiscalYear", "fiscal_quarter", "id", "name", "notes", "runTrialBalanceEnd", "runTrialBalanceErrorMessage", "runTrialBalanceStart", "runTrialBalanceStatus", "startDate", "status", "updatedBy", "updatedOn", "organizationLabels"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAccountingPeriodWithoutSuccessResponse:
        """Create an instance of GetAccountingPeriodWithoutSuccessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of file_ids
        if self.file_ids:
            _dict['fileIds'] = self.file_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in organization_labels (list)
        _items = []
        if self.organization_labels:
            for _item in self.organization_labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizationLabels'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAccountingPeriodWithoutSuccessResponse:
        """Create an instance of GetAccountingPeriodWithoutSuccessResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetAccountingPeriodWithoutSuccessResponse.parse_obj(obj)

        _obj = GetAccountingPeriodWithoutSuccessResponse.parse_obj({
            "created_by": obj.get("createdBy"),
            "created_on": obj.get("createdOn"),
            "end_date": obj.get("endDate"),
            "file_ids": GetAccountingPeriodAllOfFieIdsResponse.from_dict(obj.get("fileIds")) if obj.get("fileIds") is not None else None,
            "fiscal_year": obj.get("fiscalYear"),
            "fiscal_quarter": obj.get("fiscal_quarter"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "run_trial_balance_end": obj.get("runTrialBalanceEnd"),
            "run_trial_balance_error_message": obj.get("runTrialBalanceErrorMessage"),
            "run_trial_balance_start": obj.get("runTrialBalanceStart"),
            "run_trial_balance_status": obj.get("runTrialBalanceStatus"),
            "start_date": obj.get("startDate"),
            "status": obj.get("status"),
            "updated_by": obj.get("updatedBy"),
            "updated_on": obj.get("updatedOn"),
            "organization_labels": [OrganizationLabel.from_dict(_item) for _item in obj.get("organizationLabels")] if obj.get("organizationLabels") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


