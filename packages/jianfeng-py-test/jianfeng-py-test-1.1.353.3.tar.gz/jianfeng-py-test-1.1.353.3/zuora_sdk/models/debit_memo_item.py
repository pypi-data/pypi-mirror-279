# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from zuora_sdk.models.debit_memo_item_taxation_items import DebitMemoItemTaxationItems
from zuora_sdk.models.get_debit_memo_item_finance_information import GetDebitMemoItemFinanceInformation
from zuora_sdk.models.get_debit_memo_tax_item import GetDebitMemoTaxItem

class DebitMemoItem(BaseModel):
    """
    DebitMemoItem
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount of the debit memo item. For tax-inclusive debit memo items, the amount indicates the debit memo item amount including tax. For tax-exclusive debit memo items, the amount indicates the debit memo item amount excluding tax.")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="The debit memo item amount excluding tax.")
    applied_to_item_id: Optional[StrictStr] = Field(None, alias="appliedToItemId", description="The parent debit memo item that this debit memo items is applied to if this item is discount.")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The balance of the debit memo item.")
    be_applied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="beAppliedAmount", description="The applied amount of the debit memo item.")
    comment: Optional[StrictStr] = Field(None, description="Comments about the debit memo item.  **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the Zuora user who created the debit memo item.")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the debit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.")
    description: Optional[StrictStr] = Field(None, description="The description of the debit memo item.  **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(None, alias="excludeItemBillingFromRevenueAccounting", description="The flag to exclude the debit memo item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ")
    finance_information: Optional[GetDebitMemoItemFinanceInformation] = Field(None, alias="financeInformation")
    id: Optional[StrictStr] = Field(None, description="The ID of the debit memo item.")
    processing_type: Optional[StrictStr] = Field(None, alias="processingType")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The number of units for the debit memo item.")
    reflect_discount_in_net_amount: Optional[StrictBool] = Field(None, alias="reflectDiscountInNetAmount", description="The flag to reflect Discount in Apply To Charge Net Amount. ")
    service_end_date: Optional[date] = Field(None, alias="serviceEndDate", description="The end date of the service period associated with this debit memo item. Service ends one second before the date specified in this field.")
    service_start_date: Optional[date] = Field(None, alias="serviceStartDate", description="The start date of the service period associated with this debit memo item. If the associated charge is a one-time fee, this date is the date of that charge.")
    sku: Optional[StrictStr] = Field(None, description="The SKU for the product associated with the debit memo item.")
    sku_name: Optional[StrictStr] = Field(None, alias="skuName", description="The name of the SKU.")
    sold_to_contact_id: Optional[StrictStr] = Field(None, alias="soldToContactId", description="The ID of the sold-to contact associated with the invoice item.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.")
    sold_to_contact_snapshot_id: Optional[StrictStr] = Field(None, alias="soldToContactSnapshotId", description="The ID of the sold-to contact snapshot associated with the invoice item.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.                ")
    source_item_id: Optional[StrictStr] = Field(None, alias="sourceItemId", description="The ID of the source item.")
    source_item_type: Optional[StrictStr] = Field(None, alias="sourceItemType")
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId", description="The ID of the subscription associated with the debit memo item.")
    tax_items: Optional[conlist(GetDebitMemoTaxItem)] = Field(None, alias="taxItems", description="Container for the taxation items of the debit memo item.   **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later. ")
    tax_mode: Optional[StrictStr] = Field(None, alias="taxMode")
    taxation_items: Optional[DebitMemoItemTaxationItems] = Field(None, alias="taxationItems")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="unitOfMeasure", description="The units to measure usage.")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unitPrice", description="The per-unit price of the debit memo item.")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the Zuora user who last updated the debit memo item.")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the debit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["amount", "amountWithoutTax", "appliedToItemId", "balance", "beAppliedAmount", "comment", "createdById", "createdDate", "description", "excludeItemBillingFromRevenueAccounting", "financeInformation", "id", "processingType", "quantity", "reflectDiscountInNetAmount", "serviceEndDate", "serviceStartDate", "sku", "skuName", "soldToContactId", "soldToContactSnapshotId", "sourceItemId", "sourceItemType", "subscriptionId", "taxItems", "taxMode", "taxationItems", "unitOfMeasure", "unitPrice", "updatedById", "updatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DebitMemoItem:
        """Create an instance of DebitMemoItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax_items (list)
        _items = []
        if self.tax_items:
            for _item in self.tax_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of taxation_items
        if self.taxation_items:
            _dict['taxationItems'] = self.taxation_items.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DebitMemoItem:
        """Create an instance of DebitMemoItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DebitMemoItem.parse_obj(obj)

        _obj = DebitMemoItem.parse_obj({
            "amount": obj.get("amount"),
            "amount_without_tax": obj.get("amountWithoutTax"),
            "applied_to_item_id": obj.get("appliedToItemId"),
            "balance": obj.get("balance"),
            "be_applied_amount": obj.get("beAppliedAmount"),
            "comment": obj.get("comment"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "description": obj.get("description"),
            "exclude_item_billing_from_revenue_accounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "finance_information": GetDebitMemoItemFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "id": obj.get("id"),
            "processing_type": obj.get("processingType"),
            "quantity": obj.get("quantity"),
            "reflect_discount_in_net_amount": obj.get("reflectDiscountInNetAmount"),
            "service_end_date": obj.get("serviceEndDate"),
            "service_start_date": obj.get("serviceStartDate"),
            "sku": obj.get("sku"),
            "sku_name": obj.get("skuName"),
            "sold_to_contact_id": obj.get("soldToContactId"),
            "sold_to_contact_snapshot_id": obj.get("soldToContactSnapshotId"),
            "source_item_id": obj.get("sourceItemId"),
            "source_item_type": obj.get("sourceItemType"),
            "subscription_id": obj.get("subscriptionId"),
            "tax_items": [GetDebitMemoTaxItem.from_dict(_item) for _item in obj.get("taxItems")] if obj.get("taxItems") is not None else None,
            "tax_mode": obj.get("taxMode"),
            "taxation_items": DebitMemoItemTaxationItems.from_dict(obj.get("taxationItems")) if obj.get("taxationItems") is not None else None,
            "unit_of_measure": obj.get("unitOfMeasure"),
            "unit_price": obj.get("unitPrice"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


