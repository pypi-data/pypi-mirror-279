# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from zuora_sdk.models.subscription_taxation_item import SubscriptionTaxationItem

class PreviewSubscriptionInvoiceItem(BaseModel):
    """
    PreviewSubscriptionInvoiceItem
    """
    charge_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="chargeAmount", description="The amount of the charge. This amount doesn't include taxes unless the charge's tax mode is inclusive. ")
    charge_description: Optional[StrictStr] = Field(None, alias="chargeDescription", description="Description of the charge. ")
    charge_name: Optional[StrictStr] = Field(None, alias="chargeName", description="Name of the charge. ")
    product_name: Optional[StrictStr] = Field(None, alias="productName", description="Name of the product associated with this item. ")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="productRatePlanChargeId", description="ID of the product rate plan charge. ")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Quantity of this item. ")
    service_end_date: Optional[date] = Field(None, alias="serviceEndDate", description="End date of the service period for this item, i.e., the last day of the period, as yyyy-mm-dd. ")
    service_start_date: Optional[date] = Field(None, alias="serviceStartDate", description="Service start date as yyyy-mm-dd. If the charge is a one-time fee, this is the date of that charge. ")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="The tax amount of the invoice item. ")
    taxation_items: Optional[conlist(SubscriptionTaxationItem)] = Field(None, alias="taxationItems", description="List of taxation items. **Note**: This field is only available if you set the `zuora-version` request header to `315.0` or later. ")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="unitOfMeasure")
    __properties = ["chargeAmount", "chargeDescription", "chargeName", "productName", "productRatePlanChargeId", "quantity", "serviceEndDate", "serviceStartDate", "taxAmount", "taxationItems", "unitOfMeasure"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewSubscriptionInvoiceItem:
        """Create an instance of PreviewSubscriptionInvoiceItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in taxation_items (list)
        _items = []
        if self.taxation_items:
            for _item in self.taxation_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxationItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewSubscriptionInvoiceItem:
        """Create an instance of PreviewSubscriptionInvoiceItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewSubscriptionInvoiceItem.parse_obj(obj)

        _obj = PreviewSubscriptionInvoiceItem.parse_obj({
            "charge_amount": obj.get("chargeAmount"),
            "charge_description": obj.get("chargeDescription"),
            "charge_name": obj.get("chargeName"),
            "product_name": obj.get("productName"),
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "quantity": obj.get("quantity"),
            "service_end_date": obj.get("serviceEndDate"),
            "service_start_date": obj.get("serviceStartDate"),
            "tax_amount": obj.get("taxAmount"),
            "taxation_items": [SubscriptionTaxationItem.from_dict(_item) for _item in obj.get("taxationItems")] if obj.get("taxationItems") is not None else None,
            "unit_of_measure": obj.get("unitOfMeasure")
        })
        return _obj


