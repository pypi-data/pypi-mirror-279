# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from zuora_sdk.models.charge_update import ChargeUpdate
from zuora_sdk.models.rate_plan_feature_override import RatePlanFeatureOverride

class OrderActionUpdateProduct(BaseModel):
    """
    A rate plan can be updated in a subscription through one order action; otherwise, an error occurs.    - For a rate plan, the following fields are available:       - `chargeUpdates`       - `clearingExistingFeatures`       - `customFields`       - `externallyManagedPlanId`       - `newRatePlanId`       - `ratePlanId`       - `specificUpdateDate`       - `subscriptionProductFeatures`       - `uniqueToken`    # noqa: E501
    """
    charge_updates: Optional[conlist(ChargeUpdate)] = Field(None, alias="chargeUpdates", description="Array of the JSON objects containing the information for a charge update in the `updateProduct` type of order action. ")
    clearing_existing_features: Optional[StrictBool] = Field(None, alias="clearingExistingFeatures", description="Specifies whether all features in the rate plan will be cleared. ")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of the Rate Plan object. The custom fields of the Rate Plan object are used when rate plans are subscribed. ")
    externally_managed_plan_id: Optional[StrictStr] = Field(None, alias="externallyManagedPlanId", description="Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores. ")
    new_rate_plan_id: Optional[StrictStr] = Field(None, alias="newRatePlanId", description="Internal identifier of the updated rate plan in the new subscription version. ")
    product_rate_plan_number: Optional[StrictStr] = Field(None, alias="productRatePlanNumber", description="Number of a product rate plan for this subscription. ")
    product_rate_plan_id: Optional[StrictStr] = Field(None, alias="productRatePlanId", description="ID of a product rate plan for this subscription. ")
    rate_plan_id: Optional[StrictStr] = Field(None, alias="ratePlanId", description="Internal identifier of the rate plan that was updated. It can be the latest version or any history version id. ")
    specific_update_date: Optional[date] = Field(None, alias="specificUpdateDate", description=" The date when the Update Product order action takes effect. This field is only applicable if there is already a future-dated Update Product order action on the subscription. The format of the date is yyyy-mm-dd.  See [Update a Product on Subscription with Future-dated Updates](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AC_Orders_Tutorials/C_Update_a_Product_in_a_Subscription/Update_a_Product_on_Subscription_with_Future-dated_Updates) for more information about this feature. ")
    subscription_product_features: Optional[conlist(RatePlanFeatureOverride)] = Field(None, alias="subscriptionProductFeatures", description="List of features associated with the rate plan. The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows: * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared. * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan. ")
    subscription_rate_plan_number: Optional[StrictStr] = Field(None, alias="subscriptionRatePlanNumber", description="Number of a rate plan for this subscription. ")
    unique_token: Optional[StrictStr] = Field(None, alias="uniqueToken", description="A unique string to represent the rate plan in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan and use that token in future order actions. ")
    __properties = ["chargeUpdates", "clearingExistingFeatures", "customFields", "externallyManagedPlanId", "newRatePlanId", "productRatePlanNumber", "productRatePlanId", "ratePlanId", "specificUpdateDate", "subscriptionProductFeatures", "subscriptionRatePlanNumber", "uniqueToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderActionUpdateProduct:
        """Create an instance of OrderActionUpdateProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in charge_updates (list)
        _items = []
        if self.charge_updates:
            for _item in self.charge_updates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeUpdates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_product_features (list)
        _items = []
        if self.subscription_product_features:
            for _item in self.subscription_product_features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptionProductFeatures'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderActionUpdateProduct:
        """Create an instance of OrderActionUpdateProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderActionUpdateProduct.parse_obj(obj)

        _obj = OrderActionUpdateProduct.parse_obj({
            "charge_updates": [ChargeUpdate.from_dict(_item) for _item in obj.get("chargeUpdates")] if obj.get("chargeUpdates") is not None else None,
            "clearing_existing_features": obj.get("clearingExistingFeatures"),
            "custom_fields": obj.get("customFields"),
            "externally_managed_plan_id": obj.get("externallyManagedPlanId"),
            "new_rate_plan_id": obj.get("newRatePlanId"),
            "product_rate_plan_number": obj.get("productRatePlanNumber"),
            "product_rate_plan_id": obj.get("productRatePlanId"),
            "rate_plan_id": obj.get("ratePlanId"),
            "specific_update_date": obj.get("specificUpdateDate"),
            "subscription_product_features": [RatePlanFeatureOverride.from_dict(_item) for _item in obj.get("subscriptionProductFeatures")] if obj.get("subscriptionProductFeatures") is not None else None,
            "subscription_rate_plan_number": obj.get("subscriptionRatePlanNumber"),
            "unique_token": obj.get("uniqueToken")
        })
        return _obj


