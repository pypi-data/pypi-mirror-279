# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class PaymentMethodResponseApplePay(BaseModel):
    """
    PaymentMethodResponseApplePay
    """
    apple_bin: Optional[StrictStr] = Field(None, alias="appleBIN", description="This field is only available for Apple Pay payment methods. ")
    apple_card_number: Optional[StrictStr] = Field(None, alias="appleCardNumber", description="This field is only available for Apple Pay payment methods. ")
    apple_card_type: Optional[StrictStr] = Field(None, alias="appleCardType", description="This field is only available for Apple Pay payment methods.  For Apple Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field. ")
    apple_expiry_date: Optional[StrictStr] = Field(None, alias="appleExpiryDate", description="This field is only available for Apple Pay payment methods. ")
    apple_gateway_token: Optional[StrictStr] = Field(None, alias="appleGatewayToken", description="This field is only available for Apple Pay payment methods. ")
    __properties = ["appleBIN", "appleCardNumber", "appleCardType", "appleExpiryDate", "appleGatewayToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentMethodResponseApplePay:
        """Create an instance of PaymentMethodResponseApplePay from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentMethodResponseApplePay:
        """Create an instance of PaymentMethodResponseApplePay from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentMethodResponseApplePay.parse_obj(obj)

        _obj = PaymentMethodResponseApplePay.parse_obj({
            "apple_bin": obj.get("appleBIN"),
            "apple_card_number": obj.get("appleCardNumber"),
            "apple_card_type": obj.get("appleCardType"),
            "apple_expiry_date": obj.get("appleExpiryDate"),
            "apple_gateway_token": obj.get("appleGatewayToken")
        })
        return _obj


