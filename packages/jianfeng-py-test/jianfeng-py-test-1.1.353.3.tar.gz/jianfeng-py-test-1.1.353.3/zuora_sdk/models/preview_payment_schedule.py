# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator
from zuora_sdk.models.payment_schedule_payment_option_fields import PaymentSchedulePaymentOptionFields

class PreviewPaymentSchedule(BaseModel):
    """
    PreviewPaymentSchedule
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Indicates the updated amount of the pending payment schedule items. ")
    currency: Optional[StrictStr] = Field(None, description="Indicates the updated currency of the pending payment schedule items. ")
    occurrences: Optional[StrictInt] = Field(None, description="Indicates the updated number of payment schedule items that are created by the payment schedule. ")
    payment_gateway_id: Optional[StrictStr] = Field(None, alias="paymentGatewayId", description="Indicates the updated payment gateway ID of the pending payment schedule items. ")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="Indicates the updated payment method ID of the pending payment schedule items. ")
    payment_option: Optional[conlist(PaymentSchedulePaymentOptionFields)] = Field(None, alias="paymentOption", description="Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.  Here is an example: ``` \"paymentOption\": [   {     \"type\": \"GatewayOptions\",     \"detail\": {       \"SecCode\":\"WEB\"     }   } ] ```  `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.  To enable this field, submit a request at [Zuora Global Support](https://support.zuora.com/). This field is only available if `zuora-version` is set to `337.0` or later. ")
    period: Optional[StrictStr] = Field(None, description="Indicates the updated period of the pending payment schedule items. ")
    period_start_date: Optional[date] = Field(None, alias="periodStartDate", description="Indicates the updated collection date for the next pending payment schedule item. ")
    run_hour: Optional[StrictInt] = Field(None, alias="runHour", description="Specifies at which hour of the day in the tenant’s time zone this payment will be collected. Available values: `[0,1,2,~,22,23]`.    If the time difference between your tenant’s timezone and the timezone where Zuora servers are is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half hour later than your scheduled time. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["amount", "currency", "occurrences", "paymentGatewayId", "paymentMethodId", "paymentOption", "period", "periodStartDate", "runHour"]

    @validator('period')
    def period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Monthly', 'Weekly', 'BiWeekly'):
            raise ValueError("must be one of enum values ('Monthly', 'Weekly', 'BiWeekly')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewPaymentSchedule:
        """Create an instance of PreviewPaymentSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in payment_option (list)
        _items = []
        if self.payment_option:
            for _item in self.payment_option:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentOption'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewPaymentSchedule:
        """Create an instance of PreviewPaymentSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewPaymentSchedule.parse_obj(obj)

        _obj = PreviewPaymentSchedule.parse_obj({
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "occurrences": obj.get("occurrences"),
            "payment_gateway_id": obj.get("paymentGatewayId"),
            "payment_method_id": obj.get("paymentMethodId"),
            "payment_option": [PaymentSchedulePaymentOptionFields.from_dict(_item) for _item in obj.get("paymentOption")] if obj.get("paymentOption") is not None else None,
            "period": obj.get("period"),
            "period_start_date": obj.get("periodStartDate"),
            "run_hour": obj.get("runHour")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


