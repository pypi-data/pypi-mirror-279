# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, conlist
from zuora_sdk.models.charge_tier import ChargeTier

class OneTimeTieredPricingOverride(BaseModel):
    """
    Pricing information about a one-time charge that uses the \"tiered pricing\" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.   # noqa: E501
    """
    quantity: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(None, description="Number of units purchased. ")
    tiers: Optional[conlist(ChargeTier)] = Field(None, description="List of cumulative pricing tiers in the charge. ")
    uom: Optional[StrictStr] = Field(None, description="Unit of measure of the standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ")
    __properties = ["quantity", "tiers", "uom"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OneTimeTieredPricingOverride:
        """Create an instance of OneTimeTieredPricingOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OneTimeTieredPricingOverride:
        """Create an instance of OneTimeTieredPricingOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OneTimeTieredPricingOverride.parse_obj(obj)

        _obj = OneTimeTieredPricingOverride.parse_obj({
            "quantity": obj.get("quantity"),
            "tiers": [ChargeTier.from_dict(_item) for _item in obj.get("tiers")] if obj.get("tiers") is not None else None,
            "uom": obj.get("uom")
        })
        return _obj


