# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from zuora_sdk.models.order_action_rate_plan_charge_remove import OrderActionRatePlanChargeRemove

class OrderActionRemoveProduct(BaseModel):
    """
    Information about an order action of type `RemoveProduct`.  A rate plan can be removed from a subscription through one order action. - If you remove a rate plan, specify the following fields:   - `externalCatalogPlanId`   - `ratePlanId`   - `subscriptionRatePlanNumber`   - `productRatePlanNumber`   - `uniqueToken`   # noqa: E501
    """
    external_catalog_plan_id: Optional[StrictStr] = Field(None, alias="externalCatalogPlanId", description="An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ")
    product_rate_plan_number: Optional[StrictStr] = Field(None, alias="productRatePlanNumber", description="Number of a product rate plan for this subscription. ")
    product_rate_plan_id: Optional[StrictStr] = Field(None, alias="productRatePlanId", description="ID of a product rate plan for this subscription. ")
    rate_plan_id: Optional[StrictStr] = Field(None, alias="ratePlanId", description="ID of the rate plan to remove. This can be the latest version or any history version of ID. ")
    subscription_rate_plan_number: Optional[StrictStr] = Field(None, alias="subscriptionRatePlanNumber", description="Number of a rate plan for this subscription. ")
    unique_token: Optional[StrictStr] = Field(None, alias="uniqueToken", description="Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of a Rate Plan object. ")
    charge_updates: Optional[conlist(OrderActionRatePlanChargeRemove)] = Field(None, alias="chargeUpdates")
    __properties = ["externalCatalogPlanId", "productRatePlanNumber", "productRatePlanId", "ratePlanId", "subscriptionRatePlanNumber", "uniqueToken", "customFields", "chargeUpdates"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderActionRemoveProduct:
        """Create an instance of OrderActionRemoveProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in charge_updates (list)
        _items = []
        if self.charge_updates:
            for _item in self.charge_updates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeUpdates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderActionRemoveProduct:
        """Create an instance of OrderActionRemoveProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderActionRemoveProduct.parse_obj(obj)

        _obj = OrderActionRemoveProduct.parse_obj({
            "external_catalog_plan_id": obj.get("externalCatalogPlanId"),
            "product_rate_plan_number": obj.get("productRatePlanNumber"),
            "product_rate_plan_id": obj.get("productRatePlanId"),
            "rate_plan_id": obj.get("ratePlanId"),
            "subscription_rate_plan_number": obj.get("subscriptionRatePlanNumber"),
            "unique_token": obj.get("uniqueToken"),
            "custom_fields": obj.get("customFields"),
            "charge_updates": [OrderActionRatePlanChargeRemove.from_dict(_item) for _item in obj.get("chargeUpdates")] if obj.get("chargeUpdates") is not None else None
        })
        return _obj


