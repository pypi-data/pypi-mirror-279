# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator
from zuora_sdk.models.sign_up_create_payment_method_cardholder_info import SignUpCreatePaymentMethodCardholderInfo
from zuora_sdk.models.sign_up_create_payment_method_credit_card_mit_profile_type import SignUpCreatePaymentMethodCreditCardMitProfileType
from zuora_sdk.models.stored_credential_profile_action import StoredCredentialProfileAction
from zuora_sdk.models.stored_credential_profile_consent_agreement_src import StoredCredentialProfileConsentAgreementSrc

class SignUpPaymentMethod(BaseModel):
    """
    SignUpPaymentMethod
    """
    second_token_id: Optional[StrictStr] = Field(None, alias="secondTokenId", description="The second token id of CreditCardReferenceTransaction. ")
    token_id: Optional[StrictStr] = Field(None, alias="tokenId", description="The token id of payment method, required field of CreditCardReferenceTransaction type. ")
    baid: Optional[StrictStr] = Field(None, alias="BAID", description="ID of a PayPal billing agreement, for example, I-1TJ3GAGG82Y9. ")
    email: Optional[StrictStr] = Field(None, description="Email address associated with the payment method. This field is only supported for PayPal payment methods and is required if you want to create any of the following PayPal payment methods:   - PayPal Express Checkout payment method    - PayPal Adaptive payment method   - PayPal Commerce Platform payment method ")
    preapproval_key: Optional[StrictStr] = Field(None, alias="preapprovalKey", description="The PayPal preapproval key. ")
    card_holder_info: Optional[SignUpCreatePaymentMethodCardholderInfo] = Field(None, alias="cardHolderInfo")
    card_number: Optional[StrictStr] = Field(None, alias="cardNumber", description="Credit card number. ")
    card_type: Optional[StrictStr] = Field(None, alias="cardType", description="The type of the credit card.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways). ")
    check_duplicated: Optional[StrictBool] = Field(None, alias="checkDuplicated")
    expiration_month: Optional[StrictStr] = Field(None, alias="expirationMonth", description="One or two digit expiration month (1-12) of the credit card. ")
    expiration_year: Optional[StrictStr] = Field(None, alias="expirationYear", description="Four-digit expiration year of the credit card. ")
    mit_consent_agreement_ref: Optional[constr(strict=True, max_length=128)] = Field(None, alias="mitConsentAgreementRef", description="Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field. ")
    mit_consent_agreement_src: Optional[StrictStr] = Field(None, alias="mitConsentAgreementSrc")
    mit_network_transaction_id: Optional[constr(strict=True, max_length=128)] = Field(None, alias="mitNetworkTransactionId", description="Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`. ")
    mit_profile_action: Optional[StrictStr] = Field(None, alias="mitProfileAction")
    mit_profile_agreed_on: Optional[date] = Field(None, alias="mitProfileAgreedOn", description="The date on which the profile is agreed. The date format is `yyyy-mm-dd`. ")
    mit_profile_type: Optional[StrictStr] = Field(None, alias="mitProfileType")
    security_code: Optional[StrictStr] = Field(None, alias="securityCode", description="CVV or CVV2 security code of the credit card.  To ensure PCI compliance, this value is not stored and cannot be queried. ")
    account_key: Optional[StrictStr] = Field(None, alias="accountKey", description="Internal ID of the customer account that will own the payment method. ")
    auth_gateway: Optional[StrictStr] = Field(None, alias="authGateway", description="Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set. ")
    ip_address: Optional[StrictStr] = Field(None, alias="ipAddress", description="The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways.   If the IP address length is beyond 45 characters, a validation error occurs. ")
    make_default: Optional[StrictBool] = Field(False, alias="makeDefault", description="Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set. ")
    type: StrictStr = Field(..., description="Type of payment method. The following types of the payment method are supported: ")
    __properties = ["secondTokenId", "tokenId", "BAID", "email", "preapprovalKey", "cardHolderInfo", "cardNumber", "cardType", "checkDuplicated", "expirationMonth", "expirationYear", "mitConsentAgreementRef", "mitConsentAgreementSrc", "mitNetworkTransactionId", "mitProfileAction", "mitProfileAgreedOn", "mitProfileType", "securityCode", "accountKey", "authGateway", "ipAddress", "makeDefault", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('PayPalEC', 'PayPalNativeEC', 'PayPalAdaptive', 'CreditCard', 'CreditCardReferenceTransaction'):
            raise ValueError("must be one of enum values ('PayPalEC', 'PayPalNativeEC', 'PayPalAdaptive', 'CreditCard', 'CreditCardReferenceTransaction')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignUpPaymentMethod:
        """Create an instance of SignUpPaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card_holder_info
        if self.card_holder_info:
            _dict['cardHolderInfo'] = self.card_holder_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignUpPaymentMethod:
        """Create an instance of SignUpPaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignUpPaymentMethod.parse_obj(obj)

        _obj = SignUpPaymentMethod.parse_obj({
            "second_token_id": obj.get("secondTokenId"),
            "token_id": obj.get("tokenId"),
            "baid": obj.get("BAID"),
            "email": obj.get("email"),
            "preapproval_key": obj.get("preapprovalKey"),
            "card_holder_info": SignUpCreatePaymentMethodCardholderInfo.from_dict(obj.get("cardHolderInfo")) if obj.get("cardHolderInfo") is not None else None,
            "card_number": obj.get("cardNumber"),
            "card_type": obj.get("cardType"),
            "check_duplicated": obj.get("checkDuplicated"),
            "expiration_month": obj.get("expirationMonth"),
            "expiration_year": obj.get("expirationYear"),
            "mit_consent_agreement_ref": obj.get("mitConsentAgreementRef"),
            "mit_consent_agreement_src": obj.get("mitConsentAgreementSrc"),
            "mit_network_transaction_id": obj.get("mitNetworkTransactionId"),
            "mit_profile_action": obj.get("mitProfileAction"),
            "mit_profile_agreed_on": obj.get("mitProfileAgreedOn"),
            "mit_profile_type": obj.get("mitProfileType"),
            "security_code": obj.get("securityCode"),
            "account_key": obj.get("accountKey"),
            "auth_gateway": obj.get("authGateway"),
            "ip_address": obj.get("ipAddress"),
            "make_default": obj.get("makeDefault") if obj.get("makeDefault") is not None else False,
            "type": obj.get("type")
        })
        return _obj


