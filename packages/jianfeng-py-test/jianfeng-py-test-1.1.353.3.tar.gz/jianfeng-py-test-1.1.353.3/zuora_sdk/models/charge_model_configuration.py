# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from zuora_sdk.models.charge_model_configuration_item import ChargeModelConfigurationItem

class ChargeModelConfiguration(BaseModel):
    """
    Container for charge model configuration data.  **Notes**:   - This field is only available if you have the Pre-Rated Pricing or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `102` or later. Otherwise, an error occurs with \"Code: INVALID_VALUE\".   # noqa: E501
    """
    configuration_item: Optional[conlist(ChargeModelConfigurationItem)] = Field(None, alias="ConfigurationItem", description="An array of Charge Model Configuration Key-Value pairs. ")
    __properties = ["ConfigurationItem"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChargeModelConfiguration:
        """Create an instance of ChargeModelConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in configuration_item (list)
        _items = []
        if self.configuration_item:
            for _item in self.configuration_item:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ConfigurationItem'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChargeModelConfiguration:
        """Create an instance of ChargeModelConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChargeModelConfiguration.parse_obj(obj)

        _obj = ChargeModelConfiguration.parse_obj({
            "configuration_item": [ChargeModelConfigurationItem.from_dict(_item) for _item in obj.get("ConfigurationItem")] if obj.get("ConfigurationItem") is not None else None
        })
        return _obj


