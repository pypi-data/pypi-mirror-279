# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from zuora_sdk.models.order_delta_mrr import OrderDeltaMrr
from zuora_sdk.models.order_delta_tcb import OrderDeltaTcb
from zuora_sdk.models.order_delta_tcv import OrderDeltaTcv

class PreviewOrderResultDeltaMetrics(BaseModel):
    """
    **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects.  * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr) * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv) * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb)  It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/).   # noqa: E501
    """
    order_delta_mrr: Optional[conlist(OrderDeltaMrr)] = Field(None, alias="orderDeltaMrr")
    order_delta_tcb: Optional[conlist(OrderDeltaTcb)] = Field(None, alias="orderDeltaTcb")
    order_delta_tcv: Optional[conlist(OrderDeltaTcv)] = Field(None, alias="orderDeltaTcv")
    __properties = ["orderDeltaMrr", "orderDeltaTcb", "orderDeltaTcv"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewOrderResultDeltaMetrics:
        """Create an instance of PreviewOrderResultDeltaMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in order_delta_mrr (list)
        _items = []
        if self.order_delta_mrr:
            for _item in self.order_delta_mrr:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderDeltaMrr'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_delta_tcb (list)
        _items = []
        if self.order_delta_tcb:
            for _item in self.order_delta_tcb:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderDeltaTcb'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_delta_tcv (list)
        _items = []
        if self.order_delta_tcv:
            for _item in self.order_delta_tcv:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderDeltaTcv'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewOrderResultDeltaMetrics:
        """Create an instance of PreviewOrderResultDeltaMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewOrderResultDeltaMetrics.parse_obj(obj)

        _obj = PreviewOrderResultDeltaMetrics.parse_obj({
            "order_delta_mrr": [OrderDeltaMrr.from_dict(_item) for _item in obj.get("orderDeltaMrr")] if obj.get("orderDeltaMrr") is not None else None,
            "order_delta_tcb": [OrderDeltaTcb.from_dict(_item) for _item in obj.get("orderDeltaTcb")] if obj.get("orderDeltaTcb") is not None else None,
            "order_delta_tcv": [OrderDeltaTcv.from_dict(_item) for _item in obj.get("orderDeltaTcv")] if obj.get("orderDeltaTcv") is not None else None
        })
        return _obj


