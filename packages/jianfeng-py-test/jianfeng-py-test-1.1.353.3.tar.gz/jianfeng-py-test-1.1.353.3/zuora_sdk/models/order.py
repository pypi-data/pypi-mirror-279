# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr
from zuora_sdk.models.create_order_response import CreateOrderResponse
from zuora_sdk.models.order_existing_account_details import OrderExistingAccountDetails
from zuora_sdk.models.order_line_item import OrderLineItem
from zuora_sdk.models.order_scheduling_options import OrderSchedulingOptions
from zuora_sdk.models.order_subscriptions import OrderSubscriptions

class Order(BaseModel):
    """
    Represents the order information that will be returned in the GET call.  # noqa: E501
    """
    category: Optional[StrictStr] = None
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="The ID of the user who created this order.")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The time that the order gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.")
    currency: Optional[StrictStr] = Field(None, description="Currency code.")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of an Order object. ")
    description: Optional[constr(strict=True, max_length=500)] = Field(None, description="A description of the order.")
    existing_account_number: Optional[StrictStr] = Field(None, alias="existingAccountNumber", description="The account number that this order has been created under. This is also the invoice owner of the subscriptions included in this order.")
    existing_account_details: Optional[OrderExistingAccountDetails] = Field(None, alias="existingAccountDetails")
    invoice_schedule_id: Optional[StrictInt] = Field(None, alias="invoiceScheduleId", description="The ID of the invoice schedule associated with the order.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature in the **Early Adopter** phase enabled. ")
    order_date: Optional[date] = Field(None, alias="orderDate", description="The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if no additinal contractEffectiveDate is provided.")
    order_line_items: Optional[conlist(OrderLineItem)] = Field(None, alias="orderLineItems", description="[Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.   With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.   **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.        ")
    order_number: Optional[StrictStr] = Field(None, alias="orderNumber", description="The order number of the order.")
    reason_code: Optional[constr(strict=True, max_length=255)] = Field(None, alias="reasonCode", description="Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs. ")
    scheduling_options: Optional[OrderSchedulingOptions] = Field(None, alias="schedulingOptions")
    scheduled_order_activation_response: Optional[CreateOrderResponse] = Field(None, alias="scheduledOrderActivationResponse")
    status: Optional[StrictStr] = None
    subscriptions: Optional[conlist(OrderSubscriptions)] = Field(None, description="Represents a processed subscription, including the origin request (order actions) that create this version of subscription and the processing result (order metrics). The reference part in the request will be overridden with the info in the new subscription version.")
    updated_by: Optional[StrictStr] = Field(None, alias="updatedBy", description="The ID of the user who updated this order.")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The time that the order gets updated in the system(for example, an order description update), in the `YYYY-MM-DD HH:MM:SS` format.")
    __properties = ["category", "createdBy", "createdDate", "currency", "customFields", "description", "existingAccountNumber", "existingAccountDetails", "invoiceScheduleId", "orderDate", "orderLineItems", "orderNumber", "reasonCode", "schedulingOptions", "scheduledOrderActivationResponse", "status", "subscriptions", "updatedBy", "updatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Order:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of existing_account_details
        if self.existing_account_details:
            _dict['existingAccountDetails'] = self.existing_account_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_line_items (list)
        _items = []
        if self.order_line_items:
            for _item in self.order_line_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderLineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of scheduling_options
        if self.scheduling_options:
            _dict['schedulingOptions'] = self.scheduling_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduled_order_activation_response
        if self.scheduled_order_activation_response:
            _dict['scheduledOrderActivationResponse'] = self.scheduled_order_activation_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Order:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Order.parse_obj(obj)

        _obj = Order.parse_obj({
            "category": obj.get("category"),
            "created_by": obj.get("createdBy"),
            "created_date": obj.get("createdDate"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("customFields"),
            "description": obj.get("description"),
            "existing_account_number": obj.get("existingAccountNumber"),
            "existing_account_details": OrderExistingAccountDetails.from_dict(obj.get("existingAccountDetails")) if obj.get("existingAccountDetails") is not None else None,
            "invoice_schedule_id": obj.get("invoiceScheduleId"),
            "order_date": obj.get("orderDate"),
            "order_line_items": [OrderLineItem.from_dict(_item) for _item in obj.get("orderLineItems")] if obj.get("orderLineItems") is not None else None,
            "order_number": obj.get("orderNumber"),
            "reason_code": obj.get("reasonCode"),
            "scheduling_options": OrderSchedulingOptions.from_dict(obj.get("schedulingOptions")) if obj.get("schedulingOptions") is not None else None,
            "scheduled_order_activation_response": CreateOrderResponse.from_dict(obj.get("scheduledOrderActivationResponse")) if obj.get("scheduledOrderActivationResponse") is not None else None,
            "status": obj.get("status"),
            "subscriptions": [OrderSubscriptions.from_dict(_item) for _item in obj.get("subscriptions")] if obj.get("subscriptions") is not None else None,
            "updated_by": obj.get("updatedBy"),
            "updated_date": obj.get("updatedDate")
        })
        return _obj


