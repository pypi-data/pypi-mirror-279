# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator
from zuora_sdk.models.get_pm_account_holder_info import GetPMAccountHolderInfo
from zuora_sdk.models.payment_method_ach_bank_account_type import PaymentMethodACHBankAccountType
from zuora_sdk.models.payment_method_mandate_info_mandate_status import PaymentMethodMandateInfoMandateStatus
from zuora_sdk.models.payment_method_response_mandate_info import PaymentMethodResponseMandateInfo

class PaymentMethodResponse(BaseModel):
    """
    PaymentMethodResponse
    """
    iban: Optional[StrictStr] = Field(None, alias="IBAN", description="The International Bank Account Number used to create the SEPA payment method. The value is masked. ")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The number of the customer's bank account and it is masked. ")
    bank_code: Optional[StrictStr] = Field(None, alias="bankCode", description="The sort code or number that identifies the bank. This is also known as the sort code.          ")
    bank_transfer_type: Optional[StrictStr] = Field(None, alias="bankTransferType", description="The type of the Bank Transfer payment method. For example, `SEPA`. ")
    branch_code: Optional[StrictStr] = Field(None, alias="branchCode", description="The branch code of the bank used for Direct Debit.           ")
    business_identification_code: Optional[StrictStr] = Field(None, alias="businessIdentificationCode", description="The BIC code used for SEPA. The value is masked.        ")
    identity_number: Optional[StrictStr] = Field(None, alias="identityNumber", description="The identity number of the customer. ")
    bank_aba_code: Optional[StrictStr] = Field(None, alias="bankABACode", description="The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`. ")
    bank_account_name: Optional[StrictStr] = Field(None, alias="bankAccountName", description="The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`. ")
    bank_account_number: Optional[StrictStr] = Field(None, alias="bankAccountNumber", description="The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`. However, for creating tokenized ACH payment methods on  Stripe v2, this field is optional if the `tokens` and `bankAccountMaskNumber` fields are specified. ")
    bank_account_mask_number: Optional[StrictStr] = Field(None, alias="bankAccountMaskNumber", description="The masked bank account number associated with the ACH payment. This field is only required if the ACH payment method is created using tokens. ")
    bank_account_type: Optional[StrictStr] = Field(None, alias="bankAccountType")
    bank_name: Optional[StrictStr] = Field(None, alias="bankName", description="The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`.  When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value. ")
    card_number: Optional[StrictStr] = Field(None, alias="cardNumber", description="The masked credit card number.  When `cardNumber` is `null`, the following fields will not be returned:   - `expirationMonth`   - `expirationYear`   - `accountHolderInfo` ")
    expiration_month: Optional[StrictInt] = Field(None, alias="expirationMonth", description="One or two digits expiration month (1-12).          ")
    expiration_year: Optional[StrictInt] = Field(None, alias="expirationYear", description="Four-digit expiration year. ")
    security_code: Optional[StrictStr] = Field(None, alias="securityCode", description="The CVV or CVV2 security code for the credit card or debit card.             Only required if changing expirationMonth, expirationYear, or cardHolderName.             To ensure PCI compliance, this value isn''t stored and can''t be queried.                   ")
    baid: Optional[StrictStr] = Field(None, alias="BAID", description="ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9. ")
    email: Optional[StrictStr] = Field(None, description="Email address associated with the PayPal payment method.  ")
    preapproval_key: Optional[StrictStr] = Field(None, alias="preapprovalKey", description="The PayPal preapproval key. ")
    google_bin: Optional[StrictStr] = Field(None, alias="googleBIN", description="This field is only available for Google Pay payment methods. ")
    google_card_number: Optional[StrictStr] = Field(None, alias="googleCardNumber", description="This field is only available for Google Pay payment methods. ")
    google_card_type: Optional[StrictStr] = Field(None, alias="googleCardType", description="This field is only available for Google Pay payment methods.  For Google Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field. ")
    google_expiry_date: Optional[StrictStr] = Field(None, alias="googleExpiryDate", description="This field is only available for Google Pay payment methods. ")
    google_gateway_token: Optional[StrictStr] = Field(None, alias="googleGatewayToken", description="This field is only available for Google Pay payment methods. ")
    apple_bin: Optional[StrictStr] = Field(None, alias="appleBIN", description="This field is only available for Apple Pay payment methods. ")
    apple_card_number: Optional[StrictStr] = Field(None, alias="appleCardNumber", description="This field is only available for Apple Pay payment methods. ")
    apple_card_type: Optional[StrictStr] = Field(None, alias="appleCardType", description="This field is only available for Apple Pay payment methods.  For Apple Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field. ")
    apple_expiry_date: Optional[StrictStr] = Field(None, alias="appleExpiryDate", description="This field is only available for Apple Pay payment methods. ")
    apple_gateway_token: Optional[StrictStr] = Field(None, alias="appleGatewayToken", description="This field is only available for Apple Pay payment methods. ")
    account_holder_info: Optional[GetPMAccountHolderInfo] = Field(None, alias="accountHolderInfo")
    bank_identification_number: Optional[StrictStr] = Field(None, alias="bankIdentificationNumber", description="The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method. ")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="ID of the user who created this payment method.")
    created_on: Optional[datetime] = Field(None, alias="createdOn", description="The date and time when the payment method was created, in `yyyy-mm-dd hh:mm:ss` format. ")
    credit_card_mask_number: Optional[StrictStr] = Field(None, alias="creditCardMaskNumber", description="The masked credit card number, such as: ``` *********1112 ``` ")
    credit_card_type: Optional[StrictStr] = Field(None, alias="creditCardType", description="The type of the credit card or debit card.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).  **Note:** This field is only returned for the Credit Card and Debit Card payment types. ")
    device_session_id: Optional[StrictStr] = Field(None, alias="deviceSessionId", description="The session ID of the user when the `PaymentMethod` was created or updated. ")
    existing_mandate: Optional[PaymentMethodMandateInfoMandateStatus] = Field(None, alias="existingMandate")
    id: Optional[StrictStr] = Field(None, description="The payment method ID. ")
    ip_address: Optional[StrictStr] = Field(None, alias="ipAddress", description="The IP address of the user when the payment method was created or updated. ")
    is_default: Optional[StrictBool] = Field(None, alias="isDefault", description="Indicates whether this payment method is the default payment method for the account. ")
    last_failed_sale_transaction_date: Optional[datetime] = Field(None, alias="lastFailedSaleTransactionDate", description="The date of the last failed attempt to collect payment with this payment method. ")
    last_transaction: Optional[StrictStr] = Field(None, alias="lastTransaction", description="ID of the last transaction of this payment method.")
    last_transaction_time: Optional[datetime] = Field(None, alias="lastTransactionTime", description="The time when the last transaction of this payment method happened.")
    mandate_info: Optional[PaymentMethodResponseMandateInfo] = Field(None, alias="mandateInfo")
    max_consecutive_payment_failures: Optional[StrictInt] = Field(None, alias="maxConsecutivePaymentFailures", description="The number of allowable consecutive failures Zuora attempts with the payment method before stopping. ")
    num_consecutive_failures: Optional[StrictInt] = Field(None, alias="numConsecutiveFailures", description="The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment.  ")
    payment_retry_window: Optional[StrictInt] = Field(None, alias="paymentRetryWindow", description="The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours. ")
    second_token_id: Optional[StrictStr] = Field(None, alias="secondTokenId", description="A gateway unique identifier that replaces sensitive payment method data.  **Note:** This field is only returned for the Credit Card Reference Transaction payment type. ")
    status: Optional[StrictStr] = Field(None, description="The status of the payment method. ")
    token_id: Optional[StrictStr] = Field(None, alias="tokenId", description="A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile.  **Note:** This field is only returned for the Credit Card Reference Transaction payment type. ")
    total_number_of_error_payments: Optional[StrictInt] = Field(None, alias="totalNumberOfErrorPayments", description="The number of error payments that used this payment method. ")
    total_number_of_processed_payments: Optional[StrictInt] = Field(None, alias="totalNumberOfProcessedPayments", description="The number of successful payments that used this payment method. ")
    type: Optional[StrictStr] = Field(None, description="The type of the payment method. For example, `CreditCard`. ")
    updated_by: Optional[StrictStr] = Field(None, alias="updatedBy", description="ID of the user who made the last update to this payment method.")
    updated_on: Optional[datetime] = Field(None, alias="updatedOn", description="The last date and time when the payment method was updated, in `yyyy-mm-dd hh:mm:ss` format. ")
    use_default_retry_rule: Optional[StrictBool] = Field(None, alias="useDefaultRetryRule", description="Indicates whether this payment method uses the default retry rules configured in the Zuora Payments settings. ")
    __properties = ["IBAN", "accountNumber", "bankCode", "bankTransferType", "branchCode", "businessIdentificationCode", "identityNumber", "bankABACode", "bankAccountName", "bankAccountNumber", "bankAccountMaskNumber", "bankAccountType", "bankName", "cardNumber", "expirationMonth", "expirationYear", "securityCode", "BAID", "email", "preapprovalKey", "googleBIN", "googleCardNumber", "googleCardType", "googleExpiryDate", "googleGatewayToken", "appleBIN", "appleCardNumber", "appleCardType", "appleExpiryDate", "appleGatewayToken", "accountHolderInfo", "bankIdentificationNumber", "createdBy", "createdOn", "creditCardMaskNumber", "creditCardType", "deviceSessionId", "existingMandate", "id", "ipAddress", "isDefault", "lastFailedSaleTransactionDate", "lastTransaction", "lastTransactionTime", "mandateInfo", "maxConsecutivePaymentFailures", "numConsecutiveFailures", "paymentRetryWindow", "secondTokenId", "status", "tokenId", "totalNumberOfErrorPayments", "totalNumberOfProcessedPayments", "type", "updatedBy", "updatedOn", "useDefaultRetryRule"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Active', 'Closed', 'Scrubbed'):
            raise ValueError("must be one of enum values ('Active', 'Closed', 'Scrubbed')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentMethodResponse:
        """Create an instance of PaymentMethodResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of account_holder_info
        if self.account_holder_info:
            _dict['accountHolderInfo'] = self.account_holder_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mandate_info
        if self.mandate_info:
            _dict['mandateInfo'] = self.mandate_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentMethodResponse:
        """Create an instance of PaymentMethodResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentMethodResponse.parse_obj(obj)

        _obj = PaymentMethodResponse.parse_obj({
            "iban": obj.get("IBAN"),
            "account_number": obj.get("accountNumber"),
            "bank_code": obj.get("bankCode"),
            "bank_transfer_type": obj.get("bankTransferType"),
            "branch_code": obj.get("branchCode"),
            "business_identification_code": obj.get("businessIdentificationCode"),
            "identity_number": obj.get("identityNumber"),
            "bank_aba_code": obj.get("bankABACode"),
            "bank_account_name": obj.get("bankAccountName"),
            "bank_account_number": obj.get("bankAccountNumber"),
            "bank_account_mask_number": obj.get("bankAccountMaskNumber"),
            "bank_account_type": obj.get("bankAccountType"),
            "bank_name": obj.get("bankName"),
            "card_number": obj.get("cardNumber"),
            "expiration_month": obj.get("expirationMonth"),
            "expiration_year": obj.get("expirationYear"),
            "security_code": obj.get("securityCode"),
            "baid": obj.get("BAID"),
            "email": obj.get("email"),
            "preapproval_key": obj.get("preapprovalKey"),
            "google_bin": obj.get("googleBIN"),
            "google_card_number": obj.get("googleCardNumber"),
            "google_card_type": obj.get("googleCardType"),
            "google_expiry_date": obj.get("googleExpiryDate"),
            "google_gateway_token": obj.get("googleGatewayToken"),
            "apple_bin": obj.get("appleBIN"),
            "apple_card_number": obj.get("appleCardNumber"),
            "apple_card_type": obj.get("appleCardType"),
            "apple_expiry_date": obj.get("appleExpiryDate"),
            "apple_gateway_token": obj.get("appleGatewayToken"),
            "account_holder_info": GetPMAccountHolderInfo.from_dict(obj.get("accountHolderInfo")) if obj.get("accountHolderInfo") is not None else None,
            "bank_identification_number": obj.get("bankIdentificationNumber"),
            "created_by": obj.get("createdBy"),
            "created_on": obj.get("createdOn"),
            "credit_card_mask_number": obj.get("creditCardMaskNumber"),
            "credit_card_type": obj.get("creditCardType"),
            "device_session_id": obj.get("deviceSessionId"),
            "existing_mandate": obj.get("existingMandate"),
            "id": obj.get("id"),
            "ip_address": obj.get("ipAddress"),
            "is_default": obj.get("isDefault"),
            "last_failed_sale_transaction_date": obj.get("lastFailedSaleTransactionDate"),
            "last_transaction": obj.get("lastTransaction"),
            "last_transaction_time": obj.get("lastTransactionTime"),
            "mandate_info": PaymentMethodResponseMandateInfo.from_dict(obj.get("mandateInfo")) if obj.get("mandateInfo") is not None else None,
            "max_consecutive_payment_failures": obj.get("maxConsecutivePaymentFailures"),
            "num_consecutive_failures": obj.get("numConsecutiveFailures"),
            "payment_retry_window": obj.get("paymentRetryWindow"),
            "second_token_id": obj.get("secondTokenId"),
            "status": obj.get("status"),
            "token_id": obj.get("tokenId"),
            "total_number_of_error_payments": obj.get("totalNumberOfErrorPayments"),
            "total_number_of_processed_payments": obj.get("totalNumberOfProcessedPayments"),
            "type": obj.get("type"),
            "updated_by": obj.get("updatedBy"),
            "updated_on": obj.get("updatedOn"),
            "use_default_retry_rule": obj.get("useDefaultRetryRule")
        })
        return _obj


