# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from zuora_sdk.models.transferred_to_accounting_status import TransferredToAccountingStatus
from zuora_sdk.models.update_invoice_item import UpdateInvoiceItem

class UpdateInvoiceRequest(BaseModel):
    """
    UpdateInvoiceRequest
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    auto_pay: Optional[StrictBool] = Field(None, alias="autoPay", description="Whether invoices are automatically picked up for processing in the corresponding payment run. By default, invoices are automatically picked up for processing in the corresponding payment run.")
    comments: Optional[constr(strict=True, max_length=255)] = Field(None, description="Additional information related to the invoice that a Zuora user added to the invoice.")
    due_date: Optional[date] = Field(None, alias="dueDate", description="The date by which the payment for this invoice is due.")
    id: Optional[StrictStr] = Field(None, description="The ID of the invoice to be updated.")
    invoice_date: Optional[date] = Field(None, alias="invoiceDate", description="The new invoice date of the invoice. The new invoice date cannot fall in a closed accounting period. You can only specify `invoiceDate` or `dueDate` in one request. Otherwise, an error occurs.")
    invoice_items: Optional[conlist(UpdateInvoiceItem)] = Field(None, alias="invoiceItems", description="Container for invoice items. The maximum number of items is 1,000.")
    transferred_to_accounting: Optional[StrictStr] = Field(None, alias="transferredToAccounting")
    additional_properties: Dict[str, Any] = {}
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "autoPay", "comments", "dueDate", "id", "invoiceDate", "invoiceItems", "transferredToAccounting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateInvoiceRequest:
        """Create an instance of UpdateInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item in self.invoice_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoiceItems'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateInvoiceRequest:
        """Create an instance of UpdateInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateInvoiceRequest.parse_obj(obj)

        _obj = UpdateInvoiceRequest.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "auto_pay": obj.get("autoPay"),
            "comments": obj.get("comments"),
            "due_date": obj.get("dueDate"),
            "id": obj.get("id"),
            "invoice_date": obj.get("invoiceDate"),
            "invoice_items": [UpdateInvoiceItem.from_dict(_item) for _item in obj.get("invoiceItems")] if obj.get("invoiceItems") is not None else None,
            "transferred_to_accounting": obj.get("transferredToAccounting")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


