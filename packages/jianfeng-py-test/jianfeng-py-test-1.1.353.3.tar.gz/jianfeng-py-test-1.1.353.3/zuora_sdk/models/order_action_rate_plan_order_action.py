# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from zuora_sdk.models.order_action_rate_plan_override import OrderActionRatePlanOverride
from zuora_sdk.models.order_action_rate_plan_remove_product import OrderActionRatePlanRemoveProduct
from zuora_sdk.models.order_action_rate_plan_update import OrderActionRatePlanUpdate

class OrderActionRatePlanOrderAction(BaseModel):
    """
    Represents the processed order action.  # noqa: E501
    """
    add_product: Optional[OrderActionRatePlanOverride] = Field(None, alias="addProduct")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of an Order Action object. ")
    id: Optional[StrictStr] = Field(None, description="The Id of the order action processed in the order.")
    remove_product: Optional[OrderActionRatePlanRemoveProduct] = Field(None, alias="removeProduct")
    type: Optional[StrictStr] = None
    update_product: Optional[OrderActionRatePlanUpdate] = Field(None, alias="updateProduct")
    __properties = ["addProduct", "customFields", "id", "removeProduct", "type", "updateProduct"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderActionRatePlanOrderAction:
        """Create an instance of OrderActionRatePlanOrderAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of add_product
        if self.add_product:
            _dict['addProduct'] = self.add_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remove_product
        if self.remove_product:
            _dict['removeProduct'] = self.remove_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_product
        if self.update_product:
            _dict['updateProduct'] = self.update_product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderActionRatePlanOrderAction:
        """Create an instance of OrderActionRatePlanOrderAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderActionRatePlanOrderAction.parse_obj(obj)

        _obj = OrderActionRatePlanOrderAction.parse_obj({
            "add_product": OrderActionRatePlanOverride.from_dict(obj.get("addProduct")) if obj.get("addProduct") is not None else None,
            "custom_fields": obj.get("customFields"),
            "id": obj.get("id"),
            "remove_product": OrderActionRatePlanRemoveProduct.from_dict(obj.get("removeProduct")) if obj.get("removeProduct") is not None else None,
            "type": obj.get("type"),
            "update_product": OrderActionRatePlanUpdate.from_dict(obj.get("updateProduct")) if obj.get("updateProduct") is not None else None
        })
        return _obj


