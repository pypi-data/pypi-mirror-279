# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from zuora_sdk.models.configuration_template_content import ConfigurationTemplateContent
from zuora_sdk.models.setting_source_component_response import SettingSourceComponentResponse

class CreateTemplateRequestContent(BaseModel):
    """
    CreateTemplateRequestContent object contains information for creating template.   # noqa: E501
    """
    content: Optional[SettingSourceComponentResponse] = None
    custom_fields: Optional[StrictBool] = Field(None, alias="customFields", description="Selected custom fields component or not.")
    custom_objects: Optional[StrictBool] = Field(None, alias="customObjects", description="Selected custom objects component or not.")
    description: StrictStr = Field(..., description="Creates template description.")
    name: StrictStr = Field(..., description="Name of the Template.")
    notifications: Optional[StrictBool] = Field(None, description="Selected Notification component or not.")
    selected_components: Optional[conlist(ConfigurationTemplateContent)] = Field(None, alias="selectedComponents", description="ConfigurationTemplateContent object contains the selected meta data information.")
    settings: Optional[StrictBool] = Field(None, description="Selected Settings component or not.")
    template_tenant: StrictStr = Field(..., alias="templateTenant", description="ID of the template tenant.")
    workflows: Optional[StrictBool] = Field(None, description="Selected Workflow component or not.")
    __properties = ["content", "customFields", "customObjects", "description", "name", "notifications", "selectedComponents", "settings", "templateTenant", "workflows"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateTemplateRequestContent:
        """Create an instance of CreateTemplateRequestContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in selected_components (list)
        _items = []
        if self.selected_components:
            for _item in self.selected_components:
                if _item:
                    _items.append(_item.to_dict())
            _dict['selectedComponents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateTemplateRequestContent:
        """Create an instance of CreateTemplateRequestContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateTemplateRequestContent.parse_obj(obj)

        _obj = CreateTemplateRequestContent.parse_obj({
            "content": SettingSourceComponentResponse.from_dict(obj.get("content")) if obj.get("content") is not None else None,
            "custom_fields": obj.get("customFields"),
            "custom_objects": obj.get("customObjects"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "notifications": obj.get("notifications"),
            "selected_components": [ConfigurationTemplateContent.from_dict(_item) for _item in obj.get("selectedComponents")] if obj.get("selectedComponents") is not None else None,
            "settings": obj.get("settings"),
            "template_tenant": obj.get("templateTenant"),
            "workflows": obj.get("workflows")
        })
        return _obj


