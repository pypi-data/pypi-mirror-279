# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint

class ChargeOverrideBilling(BaseModel):
    """
    Billing information about the charge.   # noqa: E501
    """
    bill_cycle_day: Optional[conint(strict=True, le=31, ge=0)] = Field(None, alias="billCycleDay", description="Day of the month that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofMonth`. ")
    bill_cycle_type: Optional[StrictStr] = Field(None, alias="billCycleType")
    billing_period: Optional[StrictStr] = Field(None, alias="billingPeriod")
    billing_period_alignment: Optional[StrictStr] = Field(None, alias="billingPeriodAlignment")
    billing_timing: Optional[StrictStr] = Field(None, alias="billingTiming")
    specific_billing_period: Optional[StrictInt] = Field(None, alias="specificBillingPeriod", description="Duration of each billing period in months or weeks, depending on the value of the `billingPeriod` field. Only applicable if the value of the `billingPeriod` field is `Specific_Months` or `Specific_Weeks`. ")
    weekly_bill_cycle_day: Optional[StrictStr] = Field(None, alias="weeklyBillCycleDay")
    __properties = ["billCycleDay", "billCycleType", "billingPeriod", "billingPeriodAlignment", "billingTiming", "specificBillingPeriod", "weeklyBillCycleDay"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChargeOverrideBilling:
        """Create an instance of ChargeOverrideBilling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChargeOverrideBilling:
        """Create an instance of ChargeOverrideBilling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChargeOverrideBilling.parse_obj(obj)

        _obj = ChargeOverrideBilling.parse_obj({
            "bill_cycle_day": obj.get("billCycleDay"),
            "bill_cycle_type": obj.get("billCycleType"),
            "billing_period": obj.get("billingPeriod"),
            "billing_period_alignment": obj.get("billingPeriodAlignment"),
            "billing_timing": obj.get("billingTiming"),
            "specific_billing_period": obj.get("specificBillingPeriod"),
            "weekly_bill_cycle_day": obj.get("weeklyBillCycleDay")
        })
        return _obj


