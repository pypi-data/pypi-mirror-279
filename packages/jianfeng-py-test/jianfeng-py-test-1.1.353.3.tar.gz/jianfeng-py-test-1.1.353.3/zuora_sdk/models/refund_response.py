# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from zuora_sdk.models.failed_reason import FailedReason
from zuora_sdk.models.gateway_state import GatewayState
from zuora_sdk.models.get_refund_credit_memo_finance_information import GetRefundCreditMemoFinanceInformation
from zuora_sdk.models.payment_method_type import PaymentMethodType
from zuora_sdk.models.refund_status import RefundStatus
from zuora_sdk.models.refund_transaction_type import RefundTransactionType
from zuora_sdk.models.refund_type import RefundType

class RefundResponse(BaseModel):
    """
    RefundResponse
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment or credit memo. ")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The total amount of the refund. ")
    cancelled_on: Optional[StrictStr] = Field(None, alias="cancelledOn", description="The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format. ")
    comment: Optional[StrictStr] = Field(None, description="Comments about the refund. ")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the Zuora user who created the refund. ")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10. ")
    credit_memo_id: Optional[StrictStr] = Field(None, alias="creditMemoId", description="The ID of the credit memo that is refunded. ")
    finance_information: Optional[GetRefundCreditMemoFinanceInformation] = Field(None, alias="financeInformation")
    gateway_id: Optional[StrictStr] = Field(None, alias="gatewayId", description="The ID of the gateway instance that processes the refund. ")
    payment_gateway_number: Optional[StrictStr] = Field(None, alias="paymentGatewayNumber")
    gateway_reconciliation_reason: Optional[StrictStr] = Field(None, alias="gatewayReconciliationReason", description="The reason of gateway reconciliation. ")
    gateway_reconciliation_status: Optional[StrictStr] = Field(None, alias="gatewayReconciliationStatus", description="The status of gateway reconciliation. ")
    gateway_response: Optional[StrictStr] = Field(None, alias="gatewayResponse", description="The message returned from the payment gateway for the refund. This message is gateway-dependent. ")
    gateway_response_code: Optional[StrictStr] = Field(None, alias="gatewayResponseCode", description="The code returned from the payment gateway for the refund. This code is gateway-dependent. ")
    gateway_state: Optional[StrictStr] = Field(None, alias="gatewayState")
    id: Optional[StrictStr] = Field(None, description="The ID of the refund. ")
    marked_for_submission_on: Optional[StrictStr] = Field(None, alias="markedForSubmissionOn", description="The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format. ")
    method_type: Optional[StrictStr] = Field(None, alias="methodType")
    number: Optional[StrictStr] = Field(None, description="The unique identification number of the refund. ")
    payment_id: Optional[StrictStr] = Field(None, alias="paymentId", description="The ID of the payment that is refunded. ")
    payment_number: Optional[StrictStr] = Field(None, alias="paymentNumber")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="The unique ID of the payment method that the customer used to make the refund. ")
    payment_method_snapshot_id: Optional[StrictStr] = Field(None, alias="paymentMethodSnapshotId", description="The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction. ")
    payout_id: Optional[StrictStr] = Field(None, alias="payoutId", description="The payout ID of the refund from the gateway side. ")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction. ")
    reference_id: Optional[StrictStr] = Field(None, alias="referenceId", description="The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments. ")
    refund_date: Optional[StrictStr] = Field(None, alias="refundDate", description="The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2017-03-01. ")
    refund_transaction_time: Optional[StrictStr] = Field(None, alias="refundTransactionTime", description="The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format. ")
    second_refund_reference_id: Optional[StrictStr] = Field(None, alias="secondRefundReferenceId", description="The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments. ")
    settled_on: Optional[StrictStr] = Field(None, alias="settledOn", description="The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways. ")
    soft_descriptor: Optional[StrictStr] = Field(None, alias="softDescriptor", description="A payment gateway-specific field that maps Zuora to other gateways. ")
    soft_descriptor_phone: Optional[StrictStr] = Field(None, alias="softDescriptorPhone", description="A payment gateway-specific field that maps Zuora to other gateways. ")
    status: Optional[StrictStr] = None
    submitted_on: Optional[StrictStr] = Field(None, alias="submittedOn", description="The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format. ")
    organization_label: Optional[StrictStr] = Field(None, alias="organizationLabel")
    type: Optional[StrictStr] = None
    refund_transaction_type: Optional[StrictStr] = Field(None, alias="refundTransactionType")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the Zuora user who last updated the refund. ")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10. ")
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["accountId", "amount", "cancelledOn", "comment", "createdById", "createdDate", "creditMemoId", "financeInformation", "gatewayId", "paymentGatewayNumber", "gatewayReconciliationReason", "gatewayReconciliationStatus", "gatewayResponse", "gatewayResponseCode", "gatewayState", "id", "markedForSubmissionOn", "methodType", "number", "paymentId", "paymentNumber", "paymentMethodId", "paymentMethodSnapshotId", "payoutId", "reasonCode", "referenceId", "refundDate", "refundTransactionTime", "secondRefundReferenceId", "settledOn", "softDescriptor", "softDescriptorPhone", "status", "submittedOn", "organizationLabel", "type", "refundTransactionType", "updatedById", "updatedDate", "processId", "requestId", "reasons", "success"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RefundResponse:
        """Create an instance of RefundResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RefundResponse:
        """Create an instance of RefundResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RefundResponse.parse_obj(obj)

        _obj = RefundResponse.parse_obj({
            "account_id": obj.get("accountId"),
            "amount": obj.get("amount"),
            "cancelled_on": obj.get("cancelledOn"),
            "comment": obj.get("comment"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "credit_memo_id": obj.get("creditMemoId"),
            "finance_information": GetRefundCreditMemoFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "gateway_id": obj.get("gatewayId"),
            "payment_gateway_number": obj.get("paymentGatewayNumber"),
            "gateway_reconciliation_reason": obj.get("gatewayReconciliationReason"),
            "gateway_reconciliation_status": obj.get("gatewayReconciliationStatus"),
            "gateway_response": obj.get("gatewayResponse"),
            "gateway_response_code": obj.get("gatewayResponseCode"),
            "gateway_state": obj.get("gatewayState"),
            "id": obj.get("id"),
            "marked_for_submission_on": obj.get("markedForSubmissionOn"),
            "method_type": obj.get("methodType"),
            "number": obj.get("number"),
            "payment_id": obj.get("paymentId"),
            "payment_number": obj.get("paymentNumber"),
            "payment_method_id": obj.get("paymentMethodId"),
            "payment_method_snapshot_id": obj.get("paymentMethodSnapshotId"),
            "payout_id": obj.get("payoutId"),
            "reason_code": obj.get("reasonCode"),
            "reference_id": obj.get("referenceId"),
            "refund_date": obj.get("refundDate"),
            "refund_transaction_time": obj.get("refundTransactionTime"),
            "second_refund_reference_id": obj.get("secondRefundReferenceId"),
            "settled_on": obj.get("settledOn"),
            "soft_descriptor": obj.get("softDescriptor"),
            "soft_descriptor_phone": obj.get("softDescriptorPhone"),
            "status": obj.get("status"),
            "submitted_on": obj.get("submittedOn"),
            "organization_label": obj.get("organizationLabel"),
            "type": obj.get("type"),
            "refund_transaction_type": obj.get("refundTransactionType"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate"),
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


