# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from zuora_sdk.models.deleted_record import DeletedRecord

class GetBatchQueryResponse(BaseModel):
    """
    GetBatchQueryResponse
    """
    api_version: Optional[StrictStr] = Field(None, alias="apiVersion", description="The API version for the query. If an API version is not specified, the latest version is used by default. Using the latest WSDL version is most useful for reporting use cases. For integration purposes, specify the WSDL version to ensure consistent query behavior, that is, what is supported and included in the response returned by the API.  **Note**: As of API version 69 and later, Zuora changed the format of certain fields. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/G_SOAP_API/AB_Getting_started_with_the__SOAP_API/C_Date_Field_Changes_in_the_SOAP_API\" target=\"_blank\">Date Field Changes in the SOAP API</a> for more information and a list of affected fields. ")
    batch_id: Optional[StrictStr] = Field(None, alias="batchId", description="A 32-character ID of the query batch. ")
    batch_type: Optional[StrictStr] = Field(None, alias="batchType")
    file_id: Optional[StrictStr] = Field(None, alias="fileId", description="The ID of the query results file.  Use Get Results Files to download the query results file. The query results file is formatted as requested in the batch job. Supported formats are CSV, GZIP, and ZIP. ")
    full: Optional[StrictBool] = Field(None, description="This field indicates a full or incremental load. `True` = Full and `False` = Incremental. ")
    message: Optional[StrictStr] = Field(None, description="The error message. ")
    name: Optional[StrictStr] = Field(None, description="Name of the query supplied in the request. ")
    query: Optional[StrictStr] = Field(None, description="The requested query string. ")
    record_count: Optional[StrictStr] = Field(None, alias="recordCount", description="The number of records included in the query output file. ")
    segments: Optional[conlist(StrictStr)] = Field(None, description="Array of IDs of query results files. Replaces fileId for full data loads in stateful mode if <a href = \"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/G_File_Segmentation\" target=\"_blank\">File Segmentation</a> is enabled.  Use Get Results Files to download each query results file. Each query results file contains at most 500,000 records and is formatted as requested in the batch job. Supported formats are CSV, GZIP, and ZIP. ")
    status: Optional[StrictStr] = None
    localized_status: Optional[StrictStr] = Field(None, alias="localizedStatus")
    deleted: Optional[DeletedRecord] = None
    __properties = ["apiVersion", "batchId", "batchType", "fileId", "full", "message", "name", "query", "recordCount", "segments", "status", "localizedStatus", "deleted"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetBatchQueryResponse:
        """Create an instance of GetBatchQueryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of deleted
        if self.deleted:
            _dict['deleted'] = self.deleted.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetBatchQueryResponse:
        """Create an instance of GetBatchQueryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetBatchQueryResponse.parse_obj(obj)

        _obj = GetBatchQueryResponse.parse_obj({
            "api_version": obj.get("apiVersion"),
            "batch_id": obj.get("batchId"),
            "batch_type": obj.get("batchType"),
            "file_id": obj.get("fileId"),
            "full": obj.get("full"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "query": obj.get("query"),
            "record_count": obj.get("recordCount"),
            "segments": obj.get("segments"),
            "status": obj.get("status"),
            "localized_status": obj.get("localizedStatus"),
            "deleted": DeletedRecord.from_dict(obj.get("deleted")) if obj.get("deleted") is not None else None
        })
        return _obj


