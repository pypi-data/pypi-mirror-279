# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field
from zuora_sdk.models.post_custom_object_definitions_request_definition import PostCustomObjectDefinitionsRequestDefinition

class PostCustomObjectDefinitionsRequest(BaseModel):
    """
    PostCustomObjectDefinitionsRequest
    """
    definitions: Optional[Dict[str, PostCustomObjectDefinitionsRequestDefinition]] = Field(None, description="The custom object definitions. This object maps types to custom object definitions. ")
    __properties = ["definitions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostCustomObjectDefinitionsRequest:
        """Create an instance of PostCustomObjectDefinitionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in definitions (dict)
        _field_dict = {}
        if self.definitions:
            for _key in self.definitions:
                if self.definitions[_key]:
                    _field_dict[_key] = self.definitions[_key].to_dict()
            _dict['definitions'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostCustomObjectDefinitionsRequest:
        """Create an instance of PostCustomObjectDefinitionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostCustomObjectDefinitionsRequest.parse_obj(obj)

        _obj = PostCustomObjectDefinitionsRequest.parse_obj({
            "definitions": dict(
                (_k, PostCustomObjectDefinitionsRequestDefinition.from_dict(_v))
                for _k, _v in obj.get("definitions").items()
            )
            if obj.get("definitions") is not None
            else None
        })
        return _obj


