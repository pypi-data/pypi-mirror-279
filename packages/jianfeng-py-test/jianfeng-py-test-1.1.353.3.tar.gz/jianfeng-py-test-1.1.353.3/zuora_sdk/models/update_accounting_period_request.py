# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class UpdateAccountingPeriodRequest(BaseModel):
    """
    UpdateAccountingPeriodRequest
    """
    end_date: Optional[date] = Field(None, alias="endDate", description="The end date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\". ")
    fiscal_year: Optional[StrictStr] = Field(None, alias="fiscalYear", description="Fiscal year of the accounting period in yyyy format, for example, \"2016\". ")
    fiscal_quarter: Optional[StrictInt] = None
    name: Optional[StrictStr] = Field(None, description="Name of the accounting period.  Accounting period name must be unique. Maximum of 100 characters. ")
    notes: Optional[StrictStr] = Field(None, description="Notes about the accounting period.  Maximum of 255 characters. ")
    start_date: Optional[date] = Field(None, alias="startDate", description="The start date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\". ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["endDate", "fiscalYear", "fiscal_quarter", "name", "notes", "startDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateAccountingPeriodRequest:
        """Create an instance of UpdateAccountingPeriodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateAccountingPeriodRequest:
        """Create an instance of UpdateAccountingPeriodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateAccountingPeriodRequest.parse_obj(obj)

        _obj = UpdateAccountingPeriodRequest.parse_obj({
            "end_date": obj.get("endDate"),
            "fiscal_year": obj.get("fiscalYear"),
            "fiscal_quarter": obj.get("fiscal_quarter"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "start_date": obj.get("startDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


