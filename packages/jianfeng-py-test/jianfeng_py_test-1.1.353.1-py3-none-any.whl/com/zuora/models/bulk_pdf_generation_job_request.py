# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist, constr
from com.zuora.models.document_id_list import DocumentIdList
from com.zuora.models.index_file_format import IndexFileFormat

class BulkPdfGenerationJobRequest(BaseModel):
    """
    BulkPdfGenerationJobRequest
    """
    documents: conlist(DocumentIdList) = Field(..., description="Array that contains the collection of Objects where each object contains billing document type and their ids ")
    file_name: constr(strict=True, max_length=32) = Field(..., alias="fileName", description="Prefix part of output file name(s).  Eg:    if fileName is \"all-invoices-posted-jan-2024\" then fileURL(s) contains this name as a prefix followed by suffix _{number} ")
    name: Optional[constr(strict=True, max_length=32)] = Field(None, description="Name of the Job ")
    index_file_format: IndexFileFormat = Field(..., alias="indexFileFormat")
    generate_missing_pdf: Optional[StrictBool] = Field(None, alias="generateMissingPDF", description="Flag which controls the behaviour of whether to generate the PDF(s) for the billing documents that doesn't have one    - setting it to true indicates service would go through the provided document id list and then find those billing documents that doesn't have PDF generated   and generate them all at once and then proceed to the zipping process    - setting it to false indicates service would go through the provided document id list and find those billing documents that doesn't have PDF generated and   mark them as Invalid and would skip them from zipping it. Ids marked invalid would be part of the response  Default value is false ")
    persist_index_file: Optional[StrictBool] = Field(None, alias="persistIndexFile", description="Flag which controls whether to generated metadata/index file should be present in the final output file or not.     - setting it to true will generate the metadata/index file and store them along with other PDF files in the final zip file(s).    - setting it to false doesn't generate the metadata/index file and do not store them in the final zip file(s)  Default value is true ")
    __properties = ["documents", "fileName", "name", "indexFileFormat", "generateMissingPDF", "persistIndexFile"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BulkPdfGenerationJobRequest:
        """Create an instance of BulkPdfGenerationJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item in self.documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['documents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BulkPdfGenerationJobRequest:
        """Create an instance of BulkPdfGenerationJobRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BulkPdfGenerationJobRequest.parse_obj(obj)

        _obj = BulkPdfGenerationJobRequest.parse_obj({
            "documents": [DocumentIdList.from_dict(_item) for _item in obj.get("documents")] if obj.get("documents") is not None else None,
            "file_name": obj.get("fileName"),
            "name": obj.get("name"),
            "index_file_format": obj.get("indexFileFormat"),
            "generate_missing_pdf": obj.get("generateMissingPDF"),
            "persist_index_file": obj.get("persistIndexFile")
        })
        return _obj


