# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.create_ramp import CreateRamp
from com.zuora.models.preview_order_order_action import PreviewOrderOrderAction
from com.zuora.models.quote_object_fields import QuoteObjectFields

class PreviewOrderSubscriptionsAsync(BaseModel):
    """
    PreviewOrderSubscriptionsAsync
    """
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of a Subscription object. ")
    order_actions: Optional[conlist(PreviewOrderOrderAction)] = Field(None, alias="orderActions", description="The actions to be applied to the subscription. Order actions will be stored with the sequence when it was provided in the request.")
    quote: Optional[QuoteObjectFields] = None
    ramp: Optional[CreateRamp] = None
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber", description="Leave this field empty to represent new subscription creation, or specify a subscription number to update an existing subscription. ")
    __properties = ["customFields", "orderActions", "quote", "ramp", "subscriptionNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewOrderSubscriptionsAsync:
        """Create an instance of PreviewOrderSubscriptionsAsync from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in order_actions (list)
        _items = []
        if self.order_actions:
            for _item in self.order_actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of quote
        if self.quote:
            _dict['quote'] = self.quote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ramp
        if self.ramp:
            _dict['ramp'] = self.ramp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewOrderSubscriptionsAsync:
        """Create an instance of PreviewOrderSubscriptionsAsync from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewOrderSubscriptionsAsync.parse_obj(obj)

        _obj = PreviewOrderSubscriptionsAsync.parse_obj({
            "custom_fields": obj.get("customFields"),
            "order_actions": [PreviewOrderOrderAction.from_dict(_item) for _item in obj.get("orderActions")] if obj.get("orderActions") is not None else None,
            "quote": QuoteObjectFields.from_dict(obj.get("quote")) if obj.get("quote") is not None else None,
            "ramp": CreateRamp.from_dict(obj.get("ramp")) if obj.get("ramp") is not None else None,
            "subscription_number": obj.get("subscriptionNumber")
        })
        return _obj


