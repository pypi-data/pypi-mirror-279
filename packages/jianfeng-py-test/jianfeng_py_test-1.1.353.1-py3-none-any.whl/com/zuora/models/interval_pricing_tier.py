# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, validator

class IntervalPricingTier(BaseModel):
    """
    IntervalPricingTier
    """
    tier: Optional[StrictInt] = Field(None, description="Unique number of the tier. ")
    starting_unit: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="startingUnit", description="Decimal defining start of tier range. ")
    ending_unit: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="endingUnit", description="Decimal defining end of tier range. ")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The decimal value of the tiered charge model. If the charge model is not a tiered type then this price field will be null and the `price` field directly under the `productRatePlanCharges` applies. ")
    price_format: Optional[StrictStr] = Field(None, alias="priceFormat", description="Tier price format. Allowed values: `flat fee`, `per unit`. ")
    is_overage_price: Optional[StrictBool] = Field(None, alias="isOveragePrice")
    __properties = ["tier", "startingUnit", "endingUnit", "price", "priceFormat", "isOveragePrice"]

    @validator('price_format')
    def price_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FlatFee', 'PerUnit'):
            raise ValueError("must be one of enum values ('FlatFee', 'PerUnit')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntervalPricingTier:
        """Create an instance of IntervalPricingTier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntervalPricingTier:
        """Create an instance of IntervalPricingTier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntervalPricingTier.parse_obj(obj)

        _obj = IntervalPricingTier.parse_obj({
            "tier": obj.get("tier"),
            "starting_unit": obj.get("startingUnit"),
            "ending_unit": obj.get("endingUnit"),
            "price": obj.get("price"),
            "price_format": obj.get("priceFormat"),
            "is_overage_price": obj.get("isOveragePrice")
        })
        return _obj


