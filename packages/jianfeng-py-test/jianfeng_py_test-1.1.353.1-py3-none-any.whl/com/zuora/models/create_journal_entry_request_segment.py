# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class CreateJournalEntryRequestSegment(BaseModel):
    """
    CreateJournalEntryRequestSegment
    """
    segment_name: StrictStr = Field(..., alias="segmentName", description="Name of segment. You must use the segment name that has already been specified in the default segment rule. In addition, segments need to be passed in the order where they were defined in the segmentation rule. If multiple segments are configured in the default rule, you need to specify all of them in order. ")
    segment_value: StrictStr = Field(..., alias="segmentValue", description="Value of segment in this summary journal entry. ")
    __properties = ["segmentName", "segmentValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateJournalEntryRequestSegment:
        """Create an instance of CreateJournalEntryRequestSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateJournalEntryRequestSegment:
        """Create an instance of CreateJournalEntryRequestSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateJournalEntryRequestSegment.parse_obj(obj)

        _obj = CreateJournalEntryRequestSegment.parse_obj({
            "segment_name": obj.get("segmentName"),
            "segment_value": obj.get("segmentValue")
        })
        return _obj


