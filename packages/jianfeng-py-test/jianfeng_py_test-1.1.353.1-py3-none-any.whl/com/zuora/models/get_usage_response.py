# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class GetUsageResponse(BaseModel):
    """
    GetUsageResponse
    """
    id: Optional[StrictStr] = Field(None, alias="Id", description="Object identifier.")
    account_id: Optional[StrictStr] = Field(None, alias="AccountId", description=" The ID of the account associated with the usage data. This field is required if no value is specified for the `AccountNumber` field. **Character limit**: 32 **Values**: a valid account ID")
    account_number: Optional[StrictStr] = Field(None, alias="AccountNumber", description=" The number of the account associated with the usage data. This field is required if no value is specified for the `AccountId` field. **Character limit**: 50 **Values**: a valid account number")
    subscription_id: Optional[StrictStr] = Field(None, alias="SubscriptionId", description=" The original ID of the subscription that contains the fees related to the usage data. **Character limit**: 32 **Values**: a valid subscription ID")
    subscription_number: Optional[StrictStr] = Field(None, alias="SubscriptionNumber", description="The unique identifier number of the subscription that contains the fees related to the usage data. ")
    charge_id: Optional[StrictStr] = Field(None, alias="ChargeId", description=" The OrginalId of the rate plan charge related to the usage record, e.g., `2c9081a03c63c94c013c6873357a0117` **Character limit**: 32 **Values**: a valid rate plan charge OriginalID ")
    charge_number: Optional[StrictStr] = Field(None, alias="ChargeNumber", description="Number of the rate-plan charge that pays for this usage. ")
    start_date_time: Optional[datetime] = Field(None, alias="StartDateTime", description=" The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation. **Character limit**: 29 **Values**: a valid date and time value")
    end_date_time: Optional[datetime] = Field(None, alias="EndDateTime", description=" The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation. **Character limit**: 29 **Values**: a valid date and time value")
    uom: Optional[StrictStr] = Field(None, alias="UOM", description=" Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**. **Character limit**: **Values**: a valid unit of measure")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Quantity", description=" Indicates the number of units used. **Character limit**: 16 **Values**: a valid decimal amount equal to or greater than 0")
    source_type: Optional[StrictStr] = Field(None, alias="SourceType", description=" Indicates if the usage records were imported from the web-based UI or the API. **Character limit**: 6 **Values**: automatically generated to be one of the following values: `API`, `Import`")
    rbe_status: Optional[StrictStr] = Field(None, alias="RbeStatus", description=" Indicates if the rating and billing engine (RBE) processed usage data for an invoice. **Character limit**: 9 **Values**: automatically generated to be one of the following values: `Importing`, `Pending`, `Processed`")
    description: Optional[StrictStr] = Field(None, alias="Description", description="A description of the usage record. ")
    created_by_id: Optional[StrictStr] = Field(None, alias="CreatedById", description=" The user ID of the person who uploaded the usage records. **Character limit**: 32 **Values**: automatically generated")
    created_date: Optional[datetime] = Field(None, alias="CreatedDate", description=" The date when the usage was generated. **Character limit**: 29 **Values**: automatically generated")
    updated_by_id: Optional[StrictStr] = Field(None, alias="UpdatedById", description=" The ID of the user who last updated the usage upload. **Character limit**: 32 **Values**: automatically generated")
    updated_date: Optional[datetime] = Field(None, alias="UpdatedDate", description=" The date when the usage upload was last updated. **Character limit**: 29 **Values**: automatically generated")
    submission_date_time: Optional[datetime] = Field(None, alias="SubmissionDateTime", description="Date when usage was submitted. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["Id", "AccountId", "AccountNumber", "SubscriptionId", "SubscriptionNumber", "ChargeId", "ChargeNumber", "StartDateTime", "EndDateTime", "UOM", "Quantity", "SourceType", "RbeStatus", "Description", "CreatedById", "CreatedDate", "UpdatedById", "UpdatedDate", "SubmissionDateTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetUsageResponse:
        """Create an instance of GetUsageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetUsageResponse:
        """Create an instance of GetUsageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetUsageResponse.parse_obj(obj)

        _obj = GetUsageResponse.parse_obj({
            "id": obj.get("Id"),
            "account_id": obj.get("AccountId"),
            "account_number": obj.get("AccountNumber"),
            "subscription_id": obj.get("SubscriptionId"),
            "subscription_number": obj.get("SubscriptionNumber"),
            "charge_id": obj.get("ChargeId"),
            "charge_number": obj.get("ChargeNumber"),
            "start_date_time": obj.get("StartDateTime"),
            "end_date_time": obj.get("EndDateTime"),
            "uom": obj.get("UOM"),
            "quantity": obj.get("Quantity"),
            "source_type": obj.get("SourceType"),
            "rbe_status": obj.get("RbeStatus"),
            "description": obj.get("Description"),
            "created_by_id": obj.get("CreatedById"),
            "created_date": obj.get("CreatedDate"),
            "updated_by_id": obj.get("UpdatedById"),
            "updated_date": obj.get("UpdatedDate"),
            "submission_date_time": obj.get("SubmissionDateTime")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


