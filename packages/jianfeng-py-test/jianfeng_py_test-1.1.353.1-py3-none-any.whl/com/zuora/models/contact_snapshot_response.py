# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from com.zuora.models.failed_reason import FailedReason
from com.zuora.models.phone_type import PhoneType

class ContactSnapshotResponse(BaseModel):
    """
    ContactSnapshotResponse
    """
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    address1: Optional[StrictStr] = Field(None, description="The first line for the address of the contact, which is often a street address or business name. ")
    address2: Optional[StrictStr] = Field(None, description="The second line for the address of the contact, which is mostly the locality. ")
    city: Optional[StrictStr] = Field(None, description="The city for the address of the contact. ")
    contact_id: Optional[StrictStr] = Field(None, alias="contactId", description="The Zuora ID of the contact who the snapshot belongs to. ")
    country: Optional[StrictStr] = Field(None, description="The country for the address of the contact. ")
    county: Optional[StrictStr] = Field(None, description="The county for the address of the contact. The field value might optionally be used by Zuora Tax to calculate county tax. ")
    description: Optional[StrictStr] = Field(None, description="A description of the contact. ")
    fax: Optional[StrictStr] = Field(None, description="The fax number of the contact. ")
    first_name: Optional[StrictStr] = Field(None, alias="firstName", description="The first name of the contact. ")
    home_phone: Optional[StrictStr] = Field(None, alias="homePhone", description="The home phone number of the contact. ")
    id: Optional[StrictStr] = Field(None, description="The unique ID of the contact snapshot. ")
    last_name: Optional[StrictStr] = Field(None, alias="lastName", description="The last name of the contact. ")
    mobile_phone: Optional[StrictStr] = Field(None, alias="mobilePhone", description="The mobile phone number of the contact. ")
    nickname: Optional[StrictStr] = Field(None, description="A nickname for the contact. ")
    other_phone: Optional[StrictStr] = Field(None, alias="otherPhone", description="An additional phone number for the contact. ")
    other_phone_type: Optional[StrictStr] = Field(None, alias="otherPhoneType")
    personal_email: Optional[StrictStr] = Field(None, alias="personalEmail", description="The personal email address of the contact. ")
    postal_code: Optional[StrictStr] = Field(None, alias="postalCode", description="The postal code for the address of the contact. ")
    state: Optional[StrictStr] = Field(None, description="The state or province for the address of the contact. ")
    tax_region: Optional[StrictStr] = Field(None, alias="taxRegion", description="If using Zuora Tax rules. ")
    work_email: Optional[StrictStr] = Field(None, alias="workEmail", description="The business email address of the contact. ")
    work_phone: Optional[StrictStr] = Field(None, alias="workPhone", description="The business email address of the contact. ")
    __properties = ["processId", "requestId", "reasons", "success", "address1", "address2", "city", "contactId", "country", "county", "description", "fax", "firstName", "homePhone", "id", "lastName", "mobilePhone", "nickname", "otherPhone", "otherPhoneType", "personalEmail", "postalCode", "state", "taxRegion", "workEmail", "workPhone"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContactSnapshotResponse:
        """Create an instance of ContactSnapshotResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContactSnapshotResponse:
        """Create an instance of ContactSnapshotResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContactSnapshotResponse.parse_obj(obj)

        _obj = ContactSnapshotResponse.parse_obj({
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "contact_id": obj.get("contactId"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "description": obj.get("description"),
            "fax": obj.get("fax"),
            "first_name": obj.get("firstName"),
            "home_phone": obj.get("homePhone"),
            "id": obj.get("id"),
            "last_name": obj.get("lastName"),
            "mobile_phone": obj.get("mobilePhone"),
            "nickname": obj.get("nickname"),
            "other_phone": obj.get("otherPhone"),
            "other_phone_type": obj.get("otherPhoneType"),
            "personal_email": obj.get("personalEmail"),
            "postal_code": obj.get("postalCode"),
            "state": obj.get("state"),
            "tax_region": obj.get("taxRegion"),
            "work_email": obj.get("workEmail"),
            "work_phone": obj.get("workPhone")
        })
        return _obj


