# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from com.zuora.models.create_or_update_catalog_group_product_rate_plan import CreateOrUpdateCatalogGroupProductRatePlan
from com.zuora.models.remove_catalog_group_product_rate_plan import RemoveCatalogGroupProductRatePlan

class UpdateCatalogGroupRequest(BaseModel):
    """
    UpdateCatalogGroupRequest
    """
    add: Optional[conlist(CreateOrUpdateCatalogGroupProductRatePlan)] = Field(None, description="The list of product rate plans to be added to the catalog group. ")
    description: Optional[StrictStr] = Field(None, description="The description of the catalog group. ")
    name: Optional[StrictStr] = Field(None, description="The unique name of the catalog group. ")
    remove: Optional[conlist(conlist(RemoveCatalogGroupProductRatePlan))] = Field(None, description="The list of product rate plans to be removed from the catalog group. ")
    __properties = ["add", "description", "name", "remove"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateCatalogGroupRequest:
        """Create an instance of UpdateCatalogGroupRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in add (list)
        _items = []
        if self.add:
            for _item in self.add:
                if _item:
                    _items.append(_item.to_dict())
            _dict['add'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in remove (list of list)
        _items = []
        if self.remove:
            for _item in self.remove:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['remove'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateCatalogGroupRequest:
        """Create an instance of UpdateCatalogGroupRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateCatalogGroupRequest.parse_obj(obj)

        _obj = UpdateCatalogGroupRequest.parse_obj({
            "add": [CreateOrUpdateCatalogGroupProductRatePlan.from_dict(_item) for _item in obj.get("add")] if obj.get("add") is not None else None,
            "description": obj.get("description"),
            "name": obj.get("name"),
            "remove": [
                    [RemoveCatalogGroupProductRatePlan.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj.get("remove")
                ] if obj.get("remove") is not None else None
        })
        return _obj


