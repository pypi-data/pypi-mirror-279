# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, constr
from com.zuora.models.price_format_product_rate_plan_charge_tier import PriceFormatProductRatePlanChargeTier

class GetProductRatePlanChargeTierResponse(BaseModel):
    """
    GetProductRatePlanChargeTierResponse
    """
    created_by_id: Optional[constr(strict=True, max_length=32)] = Field(None, alias="CreatedById", description="The ID of the Zuora user who created the ProductRatePlanChargeTier object. ")
    created_date: Optional[datetime] = Field(None, alias="CreatedDate", description="The date when the ProductRatePlanChargeTier object was created. ")
    currency: Optional[constr(strict=True, max_length=3)] = Field(None, alias="Currency", description="The valid code corresponding to the currency for the tier's price. ")
    ending_unit: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="EndingUnit", description="The end number of a range of units for the tier.  **Character limit**: 16  **Values**: any positive decimal value ")
    id: Optional[StrictStr] = Field(None, alias="Id", description="Object identifier.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Price", description="The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.  **Character limit**: 16  **Values**: a valid currency value ")
    price_format: Optional[PriceFormatProductRatePlanChargeTier] = Field(None, alias="PriceFormat")
    starting_unit: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="StartingUnit", description="The starting number of a range of units for the tier.  **Character limit**: 16  **Values**: any positive decimal value ")
    tier: Optional[StrictInt] = Field(None, alias="Tier", description="A unique number that identifies the tier that the price applies to.  **Character limit**: 20  **Values**: automatically generated ")
    updated_by_id: Optional[constr(strict=True, max_length=32)] = Field(None, alias="UpdatedById", description="The ID of the user who last updated the product rate plan charge tier. ")
    updated_date: Optional[datetime] = Field(None, alias="UpdatedDate", description="The date when the product rate plan charge tier was last updated. ")
    __properties = ["CreatedById", "CreatedDate", "Currency", "EndingUnit", "Id", "Price", "PriceFormat", "StartingUnit", "Tier", "UpdatedById", "UpdatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetProductRatePlanChargeTierResponse:
        """Create an instance of GetProductRatePlanChargeTierResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetProductRatePlanChargeTierResponse:
        """Create an instance of GetProductRatePlanChargeTierResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetProductRatePlanChargeTierResponse.parse_obj(obj)

        _obj = GetProductRatePlanChargeTierResponse.parse_obj({
            "created_by_id": obj.get("CreatedById"),
            "created_date": obj.get("CreatedDate"),
            "currency": obj.get("Currency"),
            "ending_unit": obj.get("EndingUnit"),
            "id": obj.get("Id"),
            "price": obj.get("Price"),
            "price_format": obj.get("PriceFormat"),
            "starting_unit": obj.get("StartingUnit"),
            "tier": obj.get("Tier"),
            "updated_by_id": obj.get("UpdatedById"),
            "updated_date": obj.get("UpdatedDate")
        })
        return _obj


