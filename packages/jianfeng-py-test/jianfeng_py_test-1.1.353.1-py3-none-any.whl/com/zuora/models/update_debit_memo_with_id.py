# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from com.zuora.models.transferred_to_accounting_status import TransferredToAccountingStatus
from com.zuora.models.update_debit_memo_item import UpdateDebitMemoItem

class UpdateDebitMemoWithId(BaseModel):
    """
    UpdateDebitMemoWithId
    """
    auto_pay: Optional[StrictBool] = Field(None, alias="autoPay", description="Whether debit memos are automatically picked up for processing in the corresponding payment run.   By default, debit memos are automatically picked up for processing in the corresponding payment run. ")
    comment: Optional[constr(strict=True, max_length=255, min_length=0)] = Field(None, description="Comments about the debit memo. ")
    due_date: Optional[date] = Field(None, alias="dueDate", description="The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format. ")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="The date when the debit memo takes effect. ")
    items: Optional[conlist(UpdateDebitMemoItem)] = Field(None, description="Container for debit memo items. ")
    reason_code: Optional[StrictStr] = Field(None, alias="reasonCode", description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code ")
    transferred_to_accounting: Optional[StrictStr] = Field(None, alias="transferredToAccounting")
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    id: Optional[StrictStr] = Field(None, description="The ID of the debit memo. ")
    __properties = ["autoPay", "comment", "dueDate", "effectiveDate", "items", "reasonCode", "transferredToAccounting", "IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateDebitMemoWithId:
        """Create an instance of UpdateDebitMemoWithId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateDebitMemoWithId:
        """Create an instance of UpdateDebitMemoWithId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateDebitMemoWithId.parse_obj(obj)

        _obj = UpdateDebitMemoWithId.parse_obj({
            "auto_pay": obj.get("autoPay"),
            "comment": obj.get("comment"),
            "due_date": obj.get("dueDate"),
            "effective_date": obj.get("effectiveDate"),
            "items": [UpdateDebitMemoItem.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "reason_code": obj.get("reasonCode"),
            "transferred_to_accounting": obj.get("transferredToAccounting"),
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "id": obj.get("id")
        })
        return _obj


