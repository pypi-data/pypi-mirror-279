# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, condecimal, constr

class InvoiceScheduleItem(BaseModel):
    """
    InvoiceScheduleItem
    """
    actual_amount: Optional[condecimal()] = Field(None, alias="actualAmount", description="The actual amount that needs to be billed during the processing of the invoice schedule item.  By default, the actual amount is the same as the total amount. Even if order changes occur like Remove Product or Cancel Subscription, the value of the `amount` field keeps unchanged. The value of the `actualAmount` field reflects the actual amount to be billed. ")
    amount: Optional[condecimal()] = Field(None, description="The amount of the invoice generated during the processing of the invoice schedule item.  The value of this field keeps unchanged once invoice schedule items are created. ")
    credit_memo_id: Optional[StrictStr] = Field(None, alias="creditMemoId", description="The ID of the credit memo that is generated during the processing of the invoice schedule item. ")
    id: Optional[StrictStr] = Field(None, description="The unique ID of the invoice schedule item. ")
    invoice_id: Optional[StrictStr] = Field(None, alias="invoiceId", description="The ID of the invoice that is generated during the processing of the invoice schedule item. ")
    name: Optional[constr(strict=True, max_length=100)] = Field(None, description="The name of the invoice schedule item. ")
    percentage: Optional[condecimal()] = Field(None, description="The percentage of the total amount to be generated during the processing of the invoice schedule item.")
    run_date: Optional[date] = Field(None, alias="runDate", description="The date in the tenantâ€™s time zone when the invoice schedule item is processed to generate an invoice. ")
    status: Optional[StrictStr] = None
    target_date_for_additional_subscriptions: Optional[date] = Field(None, alias="targetDateForAdditionalSubscriptions", description="The date in the tenant's time zone used by the invoice schedule to determine which fixed-period regular charges to be billed together with the invoice schedule item.   The regular charges must come from the subscriptions specified in the `additionalSubscriptionsToBill` field. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["actualAmount", "amount", "creditMemoId", "id", "invoiceId", "name", "percentage", "runDate", "status", "targetDateForAdditionalSubscriptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InvoiceScheduleItem:
        """Create an instance of InvoiceScheduleItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InvoiceScheduleItem:
        """Create an instance of InvoiceScheduleItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InvoiceScheduleItem.parse_obj(obj)

        _obj = InvoiceScheduleItem.parse_obj({
            "actual_amount": obj.get("actualAmount"),
            "amount": obj.get("amount"),
            "credit_memo_id": obj.get("creditMemoId"),
            "id": obj.get("id"),
            "invoice_id": obj.get("invoiceId"),
            "name": obj.get("name"),
            "percentage": obj.get("percentage"),
            "run_date": obj.get("runDate"),
            "status": obj.get("status"),
            "target_date_for_additional_subscriptions": obj.get("targetDateForAdditionalSubscriptions")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


