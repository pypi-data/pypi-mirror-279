# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, constr
from com.zuora.models.billing_document_status import BillingDocumentStatus
from com.zuora.models.failed_reason import FailedReason
from com.zuora.models.transferred_to_accounting_status import TransferredToAccountingStatus

class UpdateInvoiceResponse(BaseModel):
    """
    UpdateInvoiceResponse
    """
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The ID of the customer account associated with the invoice.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The total amount of the invoice.")
    auto_pay: Optional[StrictBool] = Field(None, alias="autoPay", description="Whether invoices are automatically picked up for processing in the corresponding payment run.  ")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The balance of the invoice.")
    cancelled_by_id: Optional[StrictStr] = Field(None, alias="cancelledById", description="The ID of the Zuora user who cancelled the invoice.")
    cancelled_on: Optional[StrictStr] = Field(None, alias="cancelledOn", description="The date and time when the invoice was cancelled, in `yyyy-mm-dd hh:mm:ss` format.")
    comment: Optional[StrictStr] = Field(None, description="Comments about the invoice.")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the Zuora user who created the invoice.")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the invoice was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.")
    credit_balance_adjustment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="creditBalanceAdjustmentAmount", description="**Note:** This filed is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled. The currency amount of the adjustment applied to the customer's credit balance.")
    currency: Optional[StrictStr] = Field(None, description="A currency defined in the web-based UI administrative settings.")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The discount of the invoice.")
    due_date: Optional[date] = Field(None, alias="dueDate", description="The date by which the payment for this invoice is due.  ")
    id: Optional[StrictStr] = Field(None, description="The unique ID of the invoice.")
    invoice_date: Optional[date] = Field(None, alias="invoiceDate", description="The date on which to generate the invoice.")
    number: Optional[StrictStr] = Field(None, description="The unique identification number of the invoice.")
    posted_by_id: Optional[StrictStr] = Field(None, alias="postedById", description="The ID of the Zuora user who posted the invoice.")
    posted_on: Optional[StrictStr] = Field(None, alias="postedOn", description="The date and time when the invoice was posted, in `yyyy-mm-dd hh:mm:ss` format.  ")
    status: Optional[StrictStr] = None
    target_date: Optional[date] = Field(None, alias="targetDate", description="The target date for the invoice, in `yyyy-mm-dd` format. For example, 2017-07-20.  ")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="The amount of taxation.")
    total_tax_exempt_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalTaxExemptAmount", description="The calculated tax amount excluded due to the exemption.")
    transferred_to_accounting: Optional[StrictStr] = Field(None, alias="transferredToAccounting")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the Zuora user who last updated the invoice.")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the invoice was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["processId", "requestId", "reasons", "success", "IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "accountId", "amount", "autoPay", "balance", "cancelledById", "cancelledOn", "comment", "createdById", "createdDate", "creditBalanceAdjustmentAmount", "currency", "discount", "dueDate", "id", "invoiceDate", "number", "postedById", "postedOn", "status", "targetDate", "taxAmount", "totalTaxExemptAmount", "transferredToAccounting", "updatedById", "updatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateInvoiceResponse:
        """Create an instance of UpdateInvoiceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateInvoiceResponse:
        """Create an instance of UpdateInvoiceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateInvoiceResponse.parse_obj(obj)

        _obj = UpdateInvoiceResponse.parse_obj({
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "account_id": obj.get("accountId"),
            "amount": obj.get("amount"),
            "auto_pay": obj.get("autoPay"),
            "balance": obj.get("balance"),
            "cancelled_by_id": obj.get("cancelledById"),
            "cancelled_on": obj.get("cancelledOn"),
            "comment": obj.get("comment"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "credit_balance_adjustment_amount": obj.get("creditBalanceAdjustmentAmount"),
            "currency": obj.get("currency"),
            "discount": obj.get("discount"),
            "due_date": obj.get("dueDate"),
            "id": obj.get("id"),
            "invoice_date": obj.get("invoiceDate"),
            "number": obj.get("number"),
            "posted_by_id": obj.get("postedById"),
            "posted_on": obj.get("postedOn"),
            "status": obj.get("status"),
            "target_date": obj.get("targetDate"),
            "tax_amount": obj.get("taxAmount"),
            "total_tax_exempt_amount": obj.get("totalTaxExemptAmount"),
            "transferred_to_accounting": obj.get("transferredToAccounting"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


