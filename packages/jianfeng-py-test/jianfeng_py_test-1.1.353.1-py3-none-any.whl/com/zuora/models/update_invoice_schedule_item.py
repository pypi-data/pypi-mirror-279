# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, condecimal, constr

class UpdateInvoiceScheduleItem(BaseModel):
    """
    UpdateInvoiceScheduleItem
    """
    amount: Optional[condecimal()] = Field(None, description="The amount of the invoice to be generated during the processing of the invoice schedule item. You can only specify one of the `amount` and `percentage` fields. ")
    id: Optional[StrictStr] = Field(None, description="The unique ID of the invoice schedule item to be updated.   If this field is not provided, a new invoice schedule item is added to the invoice schedule. ")
    name: Optional[constr(strict=True, max_length=100)] = Field(None, description="The name of the invoice schedule item. ")
    percentage: Optional[condecimal(strict=True, ge=100)] = Field(None, description="The percentage of the total amount to be generated during the processing of the invoice schedule item. The field value must be greater than 0. You can only specify one of the `amount` and `percentage` fields.")
    run_date: Optional[date] = Field(None, alias="runDate", description="The date in the tenantâ€™s time zone when the invoice schedule item is planned to be processed to generate an invoice. ")
    target_date_for_additional_subscriptions: Optional[date] = Field(None, alias="targetDateForAdditionalSubscriptions", description="The date in the tenant's time zone used by the invoice schedule to determine which fixed-period regular charges to be billed together with the invoice schedule item.   The regular charges must come from the subscriptions specified in the `additionalSubscriptionsToBill` field. ")
    __properties = ["amount", "id", "name", "percentage", "runDate", "targetDateForAdditionalSubscriptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateInvoiceScheduleItem:
        """Create an instance of UpdateInvoiceScheduleItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateInvoiceScheduleItem:
        """Create an instance of UpdateInvoiceScheduleItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateInvoiceScheduleItem.parse_obj(obj)

        _obj = UpdateInvoiceScheduleItem.parse_obj({
            "amount": obj.get("amount"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "percentage": obj.get("percentage"),
            "run_date": obj.get("runDate"),
            "target_date_for_additional_subscriptions": obj.get("targetDateForAdditionalSubscriptions")
        })
        return _obj


