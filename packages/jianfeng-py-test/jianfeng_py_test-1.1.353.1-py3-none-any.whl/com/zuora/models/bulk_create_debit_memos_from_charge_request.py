# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from com.zuora.models.create_debit_memo_from_charge import CreateDebitMemoFromCharge

class BulkCreateDebitMemosFromChargeRequest(BaseModel):
    """
    BulkCreateDebitMemosFromChargeRequest
    """
    source_type: StrictStr = Field(..., alias="sourceType")
    memos: Optional[conlist(CreateDebitMemoFromCharge, max_items=50)] = Field(None, description="The container for a list of debit memos. The maximum number of debit memos is 50. ")
    __properties = ["sourceType", "memos"]

    @validator('source_type')
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Standalone'):
            raise ValueError("must be one of enum values ('Standalone')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BulkCreateDebitMemosFromChargeRequest:
        """Create an instance of BulkCreateDebitMemosFromChargeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in memos (list)
        _items = []
        if self.memos:
            for _item in self.memos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['memos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BulkCreateDebitMemosFromChargeRequest:
        """Create an instance of BulkCreateDebitMemosFromChargeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BulkCreateDebitMemosFromChargeRequest.parse_obj(obj)

        _obj = BulkCreateDebitMemosFromChargeRequest.parse_obj({
            "source_type": obj.get("sourceType") if obj.get("sourceType") is not None else 'Standalone',
            "memos": [CreateDebitMemoFromCharge.from_dict(_item) for _item in obj.get("memos")] if obj.get("memos") is not None else None
        })
        return _obj


