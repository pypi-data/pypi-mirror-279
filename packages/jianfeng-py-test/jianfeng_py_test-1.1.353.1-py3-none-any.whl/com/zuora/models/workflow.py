# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class Workflow(BaseModel):
    """
    A workflow.   # noqa: E501
    """
    callout_trigger: Optional[StrictBool] = Field(None, alias="calloutTrigger", description="Indicates whether the callout trigger is enabled for the retrieved workflow. ")
    created_at: Optional[StrictStr] = Field(None, alias="createdAt", description="The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format. ")
    description: Optional[StrictStr] = Field(None, description="The description of the workflow. ")
    id: Optional[StrictInt] = Field(None, description="The unique ID of the workflow. ")
    interval: Optional[StrictStr] = Field(None, description="The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled. ")
    name: Optional[StrictStr] = Field(None, description="The name of the workflow. ")
    ondemand_trigger: Optional[StrictBool] = Field(None, alias="ondemandTrigger", description="Indicates whether the ondemand trigger is enabled for the workflow. ")
    scheduled_trigger: Optional[StrictBool] = Field(None, alias="scheduledTrigger", description="Indicates whether the scheduled trigger is enabled for the workflow. ")
    timezone: Optional[StrictStr] = Field(None, description="The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled. ")
    type: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = Field(None, alias="updatedAt", description="The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format. ")
    version: Optional[StrictStr] = Field(None, description="The version number of the workflow.  ")
    __properties = ["calloutTrigger", "createdAt", "description", "id", "interval", "name", "ondemandTrigger", "scheduledTrigger", "timezone", "type", "updatedAt", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Workflow:
        """Create an instance of Workflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Workflow:
        """Create an instance of Workflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Workflow.parse_obj(obj)

        _obj = Workflow.parse_obj({
            "callout_trigger": obj.get("calloutTrigger"),
            "created_at": obj.get("createdAt"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "interval": obj.get("interval"),
            "name": obj.get("name"),
            "ondemand_trigger": obj.get("ondemandTrigger"),
            "scheduled_trigger": obj.get("scheduledTrigger"),
            "timezone": obj.get("timezone"),
            "type": obj.get("type"),
            "updated_at": obj.get("updatedAt"),
            "version": obj.get("version")
        })
        return _obj


