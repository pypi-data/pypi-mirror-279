# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from com.zuora.models.gateway_options import GatewayOptions
from com.zuora.models.payment_method_request_mandate_info import PaymentMethodRequestMandateInfo
from com.zuora.models.payment_method_request_processing_options import PaymentMethodRequestProcessingOptions
from com.zuora.models.updater_payment_method_request_account_holder_info import UpdaterPaymentMethodRequestAccountHolderInfo

class UpdatePaymentMethodRequest(BaseModel):
    """
    UpdatePaymentMethodRequest
    """
    expiration_month: Optional[StrictInt] = Field(None, alias="expirationMonth", description="One or two digits expiration month (1-12).          ")
    expiration_year: Optional[StrictInt] = Field(None, alias="expirationYear", description="Four-digit expiration year. ")
    security_code: Optional[StrictStr] = Field(None, alias="securityCode", description="Optional. It is the CVV or CVV2 security code specific for the credit card or debit card. To ensure PCI compliance, this value is not stored and cannot be queried.   If securityCode code is not passed in the request payload, this operation only updates related fields in the payload. It does not validate the payment method through the gateway.  If securityCode is passed in the request payload, this operation retrieves the credit card information from payload and validates them through the gateway. ")
    account_holder_info: Optional[UpdaterPaymentMethodRequestAccountHolderInfo] = Field(None, alias="accountHolderInfo")
    account_key: Optional[StrictStr] = Field(None, alias="accountKey", description="The ID of the customer account associated with this payment method, such as `2x92c0f859b0480f0159d3a4a6ee5bb6`.  **Note:** You can use this field to associate an orphan payment method with a customer account. If a payment method is already associated with a customer account, you cannot change the associated payment method through this operation. You cannot remove the previous account ID and leave this field empty, either. ")
    auth_gateway: Optional[StrictStr] = Field(None, alias="authGateway", description="Specifies the ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.   This field is not supported in updating Credit Card Reference Transaction payment methods. ")
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode", description="The currency used for payment method authorization. ")
    gateway_options: Optional[GatewayOptions] = Field(None, alias="gatewayOptions")
    ip_address: Optional[StrictStr] = Field(None, alias="ipAddress", description="The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways.   If the IP address length is beyond 45 characters, a validation error occurs.  For validating SEPA payment methods on Stripe v2, this field is required. ")
    mandate_info: Optional[PaymentMethodRequestMandateInfo] = Field(None, alias="mandateInfo")
    processing_options: Optional[PaymentMethodRequestProcessingOptions] = Field(None, alias="processingOptions")
    __properties = ["expirationMonth", "expirationYear", "securityCode", "accountHolderInfo", "accountKey", "authGateway", "currencyCode", "gatewayOptions", "ipAddress", "mandateInfo", "processingOptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdatePaymentMethodRequest:
        """Create an instance of UpdatePaymentMethodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of account_holder_info
        if self.account_holder_info:
            _dict['accountHolderInfo'] = self.account_holder_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_options
        if self.gateway_options:
            _dict['gatewayOptions'] = self.gateway_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mandate_info
        if self.mandate_info:
            _dict['mandateInfo'] = self.mandate_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processing_options
        if self.processing_options:
            _dict['processingOptions'] = self.processing_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdatePaymentMethodRequest:
        """Create an instance of UpdatePaymentMethodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdatePaymentMethodRequest.parse_obj(obj)

        _obj = UpdatePaymentMethodRequest.parse_obj({
            "expiration_month": obj.get("expirationMonth"),
            "expiration_year": obj.get("expirationYear"),
            "security_code": obj.get("securityCode"),
            "account_holder_info": UpdaterPaymentMethodRequestAccountHolderInfo.from_dict(obj.get("accountHolderInfo")) if obj.get("accountHolderInfo") is not None else None,
            "account_key": obj.get("accountKey"),
            "auth_gateway": obj.get("authGateway"),
            "currency_code": obj.get("currencyCode"),
            "gateway_options": GatewayOptions.from_dict(obj.get("gatewayOptions")) if obj.get("gatewayOptions") is not None else None,
            "ip_address": obj.get("ipAddress"),
            "mandate_info": PaymentMethodRequestMandateInfo.from_dict(obj.get("mandateInfo")) if obj.get("mandateInfo") is not None else None,
            "processing_options": PaymentMethodRequestProcessingOptions.from_dict(obj.get("processingOptions")) if obj.get("processingOptions") is not None else None
        })
        return _obj


