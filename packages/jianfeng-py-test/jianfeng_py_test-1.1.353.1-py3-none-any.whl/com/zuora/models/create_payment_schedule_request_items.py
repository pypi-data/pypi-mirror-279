# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from com.zuora.models.payment_schedule_billing_document import PaymentScheduleBillingDocument
from com.zuora.models.payment_schedule_payment_option_fields import PaymentSchedulePaymentOptionFields

class CreatePaymentScheduleRequestItems(BaseModel):
    """
    CreatePaymentScheduleRequestItems
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount that needs to be collected by this payment schedule item. ")
    billing_document: Optional[PaymentScheduleBillingDocument] = Field(None, alias="billingDocument")
    currency: Optional[StrictStr] = Field(None, description="The currency of the payment.  **Note**: - This field is optional. If not specified, the default value is the currency set for the account. ")
    description: Optional[StrictStr] = Field(None, description="Description of the payment schedule item. ")
    payment_gateway_id: Optional[StrictStr] = Field(None, alias="paymentGatewayId", description="The ID of the payment gateway.  **Note**: - This field is optional. If not specified, the default value is the payment gateway id set for the account. ")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="The ID of the payment method.  **Note**: - This field is optional. If not specified, the default value is the payment method id set for the account. ")
    payment_option: Optional[conlist(PaymentSchedulePaymentOptionFields)] = Field(None, alias="paymentOption", description="Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.  Here is an example: ``` \"paymentOption\": [   {     \"type\": \"GatewayOptions\",     \"detail\": {       \"SecCode\":\"WEB\"     }   } ] ```  `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.  To enable this field, submit a request at [Zuora Global Support](https://support.zuora.com/). This field is only available if `zuora-version` is set to `337.0` or later. ")
    run_hour: Optional[StrictStr] = Field(None, alias="runHour", description="At which hour in the day in the tenant’s timezone this payment will be collected. Available values:`[0,1,2,~,22,23]`. If the time difference between your tenant’s timezone and the timezone where Zuora servers are is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half hour later than your scheduled time. The default value is `0`. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs. ")
    scheduled_date: Optional[date] = Field(None, alias="scheduledDate", description="The date to collect the payment. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["amount", "billingDocument", "currency", "description", "paymentGatewayId", "paymentMethodId", "paymentOption", "runHour", "scheduledDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePaymentScheduleRequestItems:
        """Create an instance of CreatePaymentScheduleRequestItems from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing_document
        if self.billing_document:
            _dict['billingDocument'] = self.billing_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_option (list)
        _items = []
        if self.payment_option:
            for _item in self.payment_option:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentOption'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePaymentScheduleRequestItems:
        """Create an instance of CreatePaymentScheduleRequestItems from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePaymentScheduleRequestItems.parse_obj(obj)

        _obj = CreatePaymentScheduleRequestItems.parse_obj({
            "amount": obj.get("amount"),
            "billing_document": PaymentScheduleBillingDocument.from_dict(obj.get("billingDocument")) if obj.get("billingDocument") is not None else None,
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "payment_gateway_id": obj.get("paymentGatewayId"),
            "payment_method_id": obj.get("paymentMethodId"),
            "payment_option": [PaymentSchedulePaymentOptionFields.from_dict(_item) for _item in obj.get("paymentOption")] if obj.get("paymentOption") is not None else None,
            "run_hour": obj.get("runHour"),
            "scheduled_date": obj.get("scheduledDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


