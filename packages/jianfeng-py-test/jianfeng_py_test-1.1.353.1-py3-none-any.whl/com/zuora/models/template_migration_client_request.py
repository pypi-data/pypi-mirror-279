# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from com.zuora.models.migration_component_content import MigrationComponentContent

class TemplateMigrationClientRequest(BaseModel):
    """
    Request to add a new Template migration. TemplateMigrationClientRequest object contains request details of target tenant, source tenant, and template information needed for migration.   # noqa: E501
    """
    comments: Optional[StrictStr] = None
    description: StrictStr = Field(..., description="Description of the migration.")
    email_ids: Optional[StrictStr] = Field(None, alias="emailIds", description="List of Emails with comma separator.")
    entity_uuid: StrictStr = Field(..., alias="entityUuid", description="Entity UUID")
    meta_data: Optional[Dict[str, Any]] = Field(None, alias="metaData", description="Json node object contains metadata.")
    name: StrictStr = Field(..., description="Name of the migration.")
    request: Optional[conlist(MigrationComponentContent)] = Field(None, description="List of settings need to be migrated.")
    send_email: StrictBool = Field(..., alias="sendEmail", description="Flag determines whether or not to send an email.")
    __properties = ["comments", "description", "emailIds", "entityUuid", "metaData", "name", "request", "sendEmail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TemplateMigrationClientRequest:
        """Create an instance of TemplateMigrationClientRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in request (list)
        _items = []
        if self.request:
            for _item in self.request:
                if _item:
                    _items.append(_item.to_dict())
            _dict['request'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TemplateMigrationClientRequest:
        """Create an instance of TemplateMigrationClientRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TemplateMigrationClientRequest.parse_obj(obj)

        _obj = TemplateMigrationClientRequest.parse_obj({
            "comments": obj.get("comments"),
            "description": obj.get("description"),
            "email_ids": obj.get("emailIds"),
            "entity_uuid": obj.get("entityUuid"),
            "meta_data": obj.get("metaData"),
            "name": obj.get("name"),
            "request": [MigrationComponentContent.from_dict(_item) for _item in obj.get("request")] if obj.get("request") is not None else None,
            "send_email": obj.get("sendEmail")
        })
        return _obj


