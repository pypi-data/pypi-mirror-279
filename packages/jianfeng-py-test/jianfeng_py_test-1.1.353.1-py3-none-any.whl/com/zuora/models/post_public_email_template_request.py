# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr

class PostPublicEmailTemplateRequest(BaseModel):
    """
    PostPublicEmailTemplateRequest
    """
    active: Optional[StrictBool] = Field(True, description="The status of the email template. The default value is `true`.")
    bcc_email_address: Optional[StrictStr] = Field(None, alias="bccEmailAddress", description="The email bcc address.")
    cc_email_address: Optional[StrictStr] = Field(None, alias="ccEmailAddress", description="The email CC address.")
    cc_email_type: Optional[StrictStr] = Field(None, alias="ccEmailType")
    description: Optional[constr(strict=True, max_length=255)] = Field(None, description="The description of the email template.")
    email_body: StrictStr = Field(..., alias="emailBody", description="The email body. You can add merge fields in the email object using angle brackets.  You can also embed HTML tags if `isHtml` is `true`.")
    email_subject: StrictStr = Field(..., alias="emailSubject", description="The email subject. Users can add merge fields in the email subject using angle brackets.")
    encoding_type: Optional[StrictStr] = Field(None, alias="encodingType")
    event_category: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="eventCategory", description="If you specify this field, the email template is created based on a standard event. See [Standard Event Categories](https://knowledgecenter.zuora.com/Central_Platform/Notifications/A_Standard_Events/Standard_Event_Category_Code_for_Notification_Histories_API) for all standard event category codes.  ")
    event_type_name: Optional[StrictStr] = Field(None, alias="eventTypeName", description="The name of the custom event or custom scheduled event. If you specify this field, the email template is created based on the corresponding custom event or custom scheduled event. ")
    event_type_namespace: Optional[StrictStr] = Field(None, alias="eventTypeNamespace", description="The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default.   Note that if the `eventTypeName` is a standard event type, you must specify the `com.zuora.notification` namespace; otherwise, you will get an error.  For example, if you want to create an email template on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.          ")
    from_email_address: Optional[StrictStr] = Field(None, alias="fromEmailAddress", description="If fromEmailType is SpecificEmail, this field is required.")
    from_email_type: StrictStr = Field(..., alias="fromEmailType")
    from_name: Optional[StrictStr] = Field(None, alias="fromName", description="The name of the email sender.")
    is_html: Optional[StrictBool] = Field(False, alias="isHtml", description="Indicates whether the style of email body is HTML. The default value is `false`.")
    name: constr(strict=True, max_length=255) = Field(..., description="The name of the email template, a unique name in a tenant.")
    reply_to_email_address: Optional[StrictStr] = Field(None, alias="replyToEmailAddress", description="If replyToEmailType is SpecificEmail, this field is required.")
    reply_to_email_type: Optional[StrictStr] = Field(None, alias="replyToEmailType")
    to_email_address: Optional[StrictStr] = Field(None, alias="toEmailAddress", description="If toEmailType is SpecificEmail, this field is required.")
    to_email_type: StrictStr = Field(..., alias="toEmailType")
    __properties = ["active", "bccEmailAddress", "ccEmailAddress", "ccEmailType", "description", "emailBody", "emailSubject", "encodingType", "eventCategory", "eventTypeName", "eventTypeNamespace", "fromEmailAddress", "fromEmailType", "fromName", "isHtml", "name", "replyToEmailAddress", "replyToEmailType", "toEmailAddress", "toEmailType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostPublicEmailTemplateRequest:
        """Create an instance of PostPublicEmailTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostPublicEmailTemplateRequest:
        """Create an instance of PostPublicEmailTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostPublicEmailTemplateRequest.parse_obj(obj)

        _obj = PostPublicEmailTemplateRequest.parse_obj({
            "active": obj.get("active") if obj.get("active") is not None else True,
            "bcc_email_address": obj.get("bccEmailAddress"),
            "cc_email_address": obj.get("ccEmailAddress"),
            "cc_email_type": obj.get("ccEmailType"),
            "description": obj.get("description"),
            "email_body": obj.get("emailBody"),
            "email_subject": obj.get("emailSubject"),
            "encoding_type": obj.get("encodingType"),
            "event_category": obj.get("eventCategory"),
            "event_type_name": obj.get("eventTypeName"),
            "event_type_namespace": obj.get("eventTypeNamespace"),
            "from_email_address": obj.get("fromEmailAddress"),
            "from_email_type": obj.get("fromEmailType"),
            "from_name": obj.get("fromName"),
            "is_html": obj.get("isHtml") if obj.get("isHtml") is not None else False,
            "name": obj.get("name"),
            "reply_to_email_address": obj.get("replyToEmailAddress"),
            "reply_to_email_type": obj.get("replyToEmailType"),
            "to_email_address": obj.get("toEmailAddress"),
            "to_email_type": obj.get("toEmailType")
        })
        return _obj


