# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from com.zuora.models.bulk_pdf_generation_job_status import BulkPDFGenerationJobStatus
from com.zuora.models.bulk_pdf_generation_step_status import BulkPDFGenerationStepStatus

class GetBulkPdfGenerationJobResponse(BaseModel):
    """
    GetBulkPdfGenerationJobResponse
    """
    job_id: Optional[StrictStr] = Field(None, alias="jobId", description="Unique Id for the Triggered Job")
    job_name: Optional[StrictStr] = Field(None, alias="jobName", description="Name of the Job provided during the POST request of the Job")
    status: Optional[BulkPDFGenerationJobStatus] = None
    step_status: Optional[BulkPDFGenerationStepStatus] = Field(None, alias="stepStatus")
    file_urls: Optional[conlist(StrictStr)] = Field(None, alias="fileUrls", description="Collection of S3 Pre-Signed URL(s) that can be downloaded")
    created_on: Optional[StrictStr] = Field(None, alias="createdOn", description="Job Created Time")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="Id of the user who created the job")
    success: Optional[StrictBool] = Field(None, description="Returns `true` if the request was processed successfully.")
    __properties = ["jobId", "jobName", "status", "stepStatus", "fileUrls", "createdOn", "createdBy", "success"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetBulkPdfGenerationJobResponse:
        """Create an instance of GetBulkPdfGenerationJobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetBulkPdfGenerationJobResponse:
        """Create an instance of GetBulkPdfGenerationJobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetBulkPdfGenerationJobResponse.parse_obj(obj)

        _obj = GetBulkPdfGenerationJobResponse.parse_obj({
            "job_id": obj.get("jobId"),
            "job_name": obj.get("jobName"),
            "status": obj.get("status"),
            "step_status": obj.get("stepStatus"),
            "file_urls": obj.get("fileUrls"),
            "created_on": obj.get("createdOn"),
            "created_by": obj.get("createdBy"),
            "success": obj.get("success")
        })
        return _obj


