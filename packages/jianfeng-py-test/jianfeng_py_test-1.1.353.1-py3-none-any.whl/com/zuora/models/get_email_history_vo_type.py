# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class GetEmailHistoryVOType(BaseModel):
    """
    GetEmailHistoryVOType
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="ID of an account. ")
    bcc: Optional[StrictStr] = Field(None, description="Blind carbon copy recipients of the email. ")
    cc: Optional[StrictStr] = Field(None, description="Carbon Copy recipients of the email. ")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage", description="null if the content of result is \"OK\". A description of the error if the content of result is not \"OK\". ")
    event_category: Optional[StrictStr] = Field(None, alias="eventCategory", description="The event category of the email. ")
    from_email: Optional[StrictStr] = Field(None, alias="fromEmail", description="The sender of the email. ")
    notification: Optional[StrictStr] = Field(None, description="The name of the notification. ")
    reply_to: Optional[StrictStr] = Field(None, alias="replyTo", description="The reply-to address as configured in the email template. ")
    result: Optional[StrictStr] = Field(None, description="The result from the mail server of sending the email. ")
    send_time: Optional[StrictStr] = Field(None, alias="sendTime", description="The date and time the email was sent. ")
    subject: Optional[StrictStr] = Field(None, description="The subject of the email. ")
    to_email: Optional[StrictStr] = Field(None, alias="toEmail", description="The intended recipient of the email. ")
    __properties = ["accountId", "bcc", "cc", "errorMessage", "eventCategory", "fromEmail", "notification", "replyTo", "result", "sendTime", "subject", "toEmail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetEmailHistoryVOType:
        """Create an instance of GetEmailHistoryVOType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetEmailHistoryVOType:
        """Create an instance of GetEmailHistoryVOType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetEmailHistoryVOType.parse_obj(obj)

        _obj = GetEmailHistoryVOType.parse_obj({
            "account_id": obj.get("accountId"),
            "bcc": obj.get("bcc"),
            "cc": obj.get("cc"),
            "error_message": obj.get("errorMessage"),
            "event_category": obj.get("eventCategory"),
            "from_email": obj.get("fromEmail"),
            "notification": obj.get("notification"),
            "reply_to": obj.get("replyTo"),
            "result": obj.get("result"),
            "send_time": obj.get("sendTime"),
            "subject": obj.get("subject"),
            "to_email": obj.get("toEmail")
        })
        return _obj


