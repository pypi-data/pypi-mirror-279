# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class CreateStoredCredentialProfileRequest(BaseModel):
    """
    CreateStoredCredentialProfileRequest
    """
    action: Optional[StrictStr] = None
    agreed_on: Optional[date] = Field(None, alias="agreedOn", description="The date on which the profile is agreed. The date format is `yyyy-mm-dd`. ")
    auth_gateway: Optional[StrictStr] = Field(None, alias="authGateway", description="Specifies the ID of the payment gateway that Zuora will use when activating the stored credential profile. ")
    card_security_code: Optional[StrictStr] = Field(None, alias="cardSecurityCode", description="The security code of the credit card. ")
    consent_agreement_ref: Optional[constr(strict=True, max_length=128)] = Field(None, alias="consentAgreementRef", description="Specifies your reference for the consent agreement that you have established with the customer. ")
    consent_agreement_src: StrictStr = Field(..., alias="consentAgreementSrc")
    network_transaction_id: Optional[constr(strict=True, max_length=128)] = Field(None, alias="networkTransactionId", description="The ID of a network transaction. Only applicable if you set the `action` field to `Persist`. ")
    status: StrictStr = Field(...)
    type: StrictStr = Field(...)
    __properties = ["action", "agreedOn", "authGateway", "cardSecurityCode", "consentAgreementRef", "consentAgreementSrc", "networkTransactionId", "status", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateStoredCredentialProfileRequest:
        """Create an instance of CreateStoredCredentialProfileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateStoredCredentialProfileRequest:
        """Create an instance of CreateStoredCredentialProfileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateStoredCredentialProfileRequest.parse_obj(obj)

        _obj = CreateStoredCredentialProfileRequest.parse_obj({
            "action": obj.get("action"),
            "agreed_on": obj.get("agreedOn"),
            "auth_gateway": obj.get("authGateway"),
            "card_security_code": obj.get("cardSecurityCode"),
            "consent_agreement_ref": obj.get("consentAgreementRef"),
            "consent_agreement_src": obj.get("consentAgreementSrc"),
            "network_transaction_id": obj.get("networkTransactionId"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj


