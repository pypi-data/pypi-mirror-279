# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from com.zuora.models.create_order_order_line_item import CreateOrderOrderLineItem
from com.zuora.models.preview_account_info import PreviewAccountInfo
from com.zuora.models.preview_options import PreviewOptions
from com.zuora.models.preview_order_subscriptions_async import PreviewOrderSubscriptionsAsync

class PreviewOrderRequest(BaseModel):
    """
    PreviewOrderRequest
    """
    category: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of an Order object. ")
    description: Optional[constr(strict=True, max_length=500)] = Field(None, description="A description of the order.")
    existing_account_number: Optional[constr(strict=True, max_length=70)] = Field(None, alias="existingAccountNumber", description="The account number that this order will be created under. It can be either the accountNumber or the account info. It will return an error if both are specified. Note that invoice owner account of the subscriptions included in this order should be the same with the account of the order. ")
    order_date: date = Field(..., alias="orderDate", description="The date when the order is signed. All of the order actions under this order will use this order date as the contract effective date.")
    order_line_items: Optional[conlist(CreateOrderOrderLineItem)] = Field(None, alias="orderLineItems", description="[Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.   With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.   **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.         ")
    order_number: Optional[constr(strict=True, max_length=100)] = Field(None, alias="orderNumber", description="The order number of this order.    **Note:** Make sure the order number does not contain a slash. ")
    preview_account_info: Optional[PreviewAccountInfo] = Field(None, alias="previewAccountInfo")
    preview_options: PreviewOptions = Field(..., alias="previewOptions")
    reason_code: Optional[constr(strict=True, max_length=255)] = Field(None, alias="reasonCode", description="Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs. ")
    subscriptions: Optional[conlist(PreviewOrderSubscriptionsAsync)] = Field(None, description="Each item includes a set of order actions, which will be applied to the same base subscription.")
    __properties = ["category", "customFields", "description", "existingAccountNumber", "orderDate", "orderLineItems", "orderNumber", "previewAccountInfo", "previewOptions", "reasonCode", "subscriptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviewOrderRequest:
        """Create an instance of PreviewOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in order_line_items (list)
        _items = []
        if self.order_line_items:
            for _item in self.order_line_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderLineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of preview_account_info
        if self.preview_account_info:
            _dict['previewAccountInfo'] = self.preview_account_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preview_options
        if self.preview_options:
            _dict['previewOptions'] = self.preview_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviewOrderRequest:
        """Create an instance of PreviewOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviewOrderRequest.parse_obj(obj)

        _obj = PreviewOrderRequest.parse_obj({
            "category": obj.get("category"),
            "custom_fields": obj.get("customFields"),
            "description": obj.get("description"),
            "existing_account_number": obj.get("existingAccountNumber"),
            "order_date": obj.get("orderDate"),
            "order_line_items": [CreateOrderOrderLineItem.from_dict(_item) for _item in obj.get("orderLineItems")] if obj.get("orderLineItems") is not None else None,
            "order_number": obj.get("orderNumber"),
            "preview_account_info": PreviewAccountInfo.from_dict(obj.get("previewAccountInfo")) if obj.get("previewAccountInfo") is not None else None,
            "preview_options": PreviewOptions.from_dict(obj.get("previewOptions")) if obj.get("previewOptions") is not None else None,
            "reason_code": obj.get("reasonCode"),
            "subscriptions": [PreviewOrderSubscriptionsAsync.from_dict(_item) for _item in obj.get("subscriptions")] if obj.get("subscriptions") is not None else None
        })
        return _obj


