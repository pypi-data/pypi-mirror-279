# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from com.zuora.models.order_action_add_product import OrderActionAddProduct
from com.zuora.models.order_action_cancel_subscription import OrderActionCancelSubscription
from com.zuora.models.order_action_change_plan import OrderActionChangePlan
from com.zuora.models.order_action_create_subscription import OrderActionCreateSubscription
from com.zuora.models.order_action_owner_transfer import OrderActionOwnerTransfer
from com.zuora.models.order_action_remove_product import OrderActionRemoveProduct
from com.zuora.models.order_action_renew_subscription import OrderActionRenewSubscription
from com.zuora.models.order_action_resume import OrderActionResume
from com.zuora.models.order_action_suspend import OrderActionSuspend
from com.zuora.models.order_action_terms_and_conditions import OrderActionTermsAndConditions
from com.zuora.models.order_action_update_product import OrderActionUpdateProduct
from com.zuora.models.order_item import OrderItem
from com.zuora.models.order_metric import OrderMetric
from com.zuora.models.trigger_date import TriggerDate

class OrderAction(BaseModel):
    """
    Represents the processed order action.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="The Id of the order action processed in the order.")
    create_subscription: Optional[OrderActionCreateSubscription] = Field(None, alias="createSubscription")
    add_product: Optional[OrderActionAddProduct] = Field(None, alias="addProduct")
    update_product: Optional[OrderActionUpdateProduct] = Field(None, alias="updateProduct")
    cancel_subscription: Optional[OrderActionCancelSubscription] = Field(None, alias="cancelSubscription")
    change_plan: Optional[OrderActionChangePlan] = Field(None, alias="changePlan")
    owner_transfer: Optional[OrderActionOwnerTransfer] = Field(None, alias="ownerTransfer")
    remove_product: Optional[OrderActionRemoveProduct] = Field(None, alias="removeProduct")
    renew_subscription: Optional[OrderActionRenewSubscription] = Field(None, alias="renewSubscription")
    suspend: Optional[OrderActionSuspend] = None
    resume: Optional[OrderActionResume] = None
    terms_and_conditions: Optional[OrderActionTermsAndConditions] = Field(None, alias="termsAndConditions")
    change_reason: Optional[StrictStr] = Field(None, alias="changeReason", description="The change reason set for an order action when an order is created. ")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="customFields", description="Container for custom fields of an Order Action object. ")
    sequence: Optional[StrictInt] = Field(None, description="The sequence of the order actions processed in the order.")
    order_items: Optional[conlist(OrderItem)] = Field(None, alias="orderItems", description="The `orderItems` nested field is only available to existing Orders customers who already have access to the field.  **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics. * The Order ELP and Order Item objects  * The \"Generated Reason\" and \"Order Item ID\" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects  Existing Orders customers who have these metrics will continue to be supported. ")
    order_metrics: Optional[conlist(OrderMetric)] = Field(None, alias="orderMetrics", description="The container for order metrics.  **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics. * The Order ELP and Order Item objects  * The \"Generated Reason\" and \"Order Item ID\" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects  Existing Orders customers who have these metrics will continue to be supported.  **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects.  * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr) * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv) * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb)  It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/).  Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported. ")
    trigger_dates: Optional[conlist(TriggerDate)] = Field(None, alias="triggerDates", description="Container for the contract effective, service activation, and customer acceptance dates of the order action.   If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.  If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.  If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions  If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions ")
    type: Optional[StrictStr] = None
    __properties = ["id", "createSubscription", "addProduct", "updateProduct", "cancelSubscription", "changePlan", "ownerTransfer", "removeProduct", "renewSubscription", "suspend", "resume", "termsAndConditions", "changeReason", "customFields", "sequence", "orderItems", "orderMetrics", "triggerDates", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderAction:
        """Create an instance of OrderAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of create_subscription
        if self.create_subscription:
            _dict['createSubscription'] = self.create_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_product
        if self.add_product:
            _dict['addProduct'] = self.add_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_product
        if self.update_product:
            _dict['updateProduct'] = self.update_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cancel_subscription
        if self.cancel_subscription:
            _dict['cancelSubscription'] = self.cancel_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of change_plan
        if self.change_plan:
            _dict['changePlan'] = self.change_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_transfer
        if self.owner_transfer:
            _dict['ownerTransfer'] = self.owner_transfer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remove_product
        if self.remove_product:
            _dict['removeProduct'] = self.remove_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of renew_subscription
        if self.renew_subscription:
            _dict['renewSubscription'] = self.renew_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspend
        if self.suspend:
            _dict['suspend'] = self.suspend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resume
        if self.resume:
            _dict['resume'] = self.resume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terms_and_conditions
        if self.terms_and_conditions:
            _dict['termsAndConditions'] = self.terms_and_conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_items (list)
        _items = []
        if self.order_items:
            for _item in self.order_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_metrics (list)
        _items = []
        if self.order_metrics:
            for _item in self.order_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_dates (list)
        _items = []
        if self.trigger_dates:
            for _item in self.trigger_dates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['triggerDates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderAction:
        """Create an instance of OrderAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderAction.parse_obj(obj)

        _obj = OrderAction.parse_obj({
            "id": obj.get("id"),
            "create_subscription": OrderActionCreateSubscription.from_dict(obj.get("createSubscription")) if obj.get("createSubscription") is not None else None,
            "add_product": OrderActionAddProduct.from_dict(obj.get("addProduct")) if obj.get("addProduct") is not None else None,
            "update_product": OrderActionUpdateProduct.from_dict(obj.get("updateProduct")) if obj.get("updateProduct") is not None else None,
            "cancel_subscription": OrderActionCancelSubscription.from_dict(obj.get("cancelSubscription")) if obj.get("cancelSubscription") is not None else None,
            "change_plan": OrderActionChangePlan.from_dict(obj.get("changePlan")) if obj.get("changePlan") is not None else None,
            "owner_transfer": OrderActionOwnerTransfer.from_dict(obj.get("ownerTransfer")) if obj.get("ownerTransfer") is not None else None,
            "remove_product": OrderActionRemoveProduct.from_dict(obj.get("removeProduct")) if obj.get("removeProduct") is not None else None,
            "renew_subscription": OrderActionRenewSubscription.from_dict(obj.get("renewSubscription")) if obj.get("renewSubscription") is not None else None,
            "suspend": OrderActionSuspend.from_dict(obj.get("suspend")) if obj.get("suspend") is not None else None,
            "resume": OrderActionResume.from_dict(obj.get("resume")) if obj.get("resume") is not None else None,
            "terms_and_conditions": OrderActionTermsAndConditions.from_dict(obj.get("termsAndConditions")) if obj.get("termsAndConditions") is not None else None,
            "change_reason": obj.get("changeReason"),
            "custom_fields": obj.get("customFields"),
            "sequence": obj.get("sequence"),
            "order_items": [OrderItem.from_dict(_item) for _item in obj.get("orderItems")] if obj.get("orderItems") is not None else None,
            "order_metrics": [OrderMetric.from_dict(_item) for _item in obj.get("orderMetrics")] if obj.get("orderMetrics") is not None else None,
            "trigger_dates": [TriggerDate.from_dict(_item) for _item in obj.get("triggerDates")] if obj.get("triggerDates") is not None else None,
            "type": obj.get("type")
        })
        return _obj


