# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from com.zuora.models.subscription_credit_memo_item import SubscriptionCreditMemoItem

class SubscriptionCreditMemo(BaseModel):
    """
     Container for credit memos.  **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.    # noqa: E501
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Credit memo amount.")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="amountWithoutTax", description="Credit memo amount minus tax.")
    credit_memo_items: Optional[conlist(SubscriptionCreditMemoItem)] = Field(None, alias="creditMemoItems")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="Tax amount on the credit memo.")
    __properties = ["amount", "amountWithoutTax", "creditMemoItems", "taxAmount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionCreditMemo:
        """Create an instance of SubscriptionCreditMemo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in credit_memo_items (list)
        _items = []
        if self.credit_memo_items:
            for _item in self.credit_memo_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditMemoItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionCreditMemo:
        """Create an instance of SubscriptionCreditMemo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionCreditMemo.parse_obj(obj)

        _obj = SubscriptionCreditMemo.parse_obj({
            "amount": obj.get("amount"),
            "amount_without_tax": obj.get("amountWithoutTax"),
            "credit_memo_items": [SubscriptionCreditMemoItem.from_dict(_item) for _item in obj.get("creditMemoItems")] if obj.get("creditMemoItems") is not None else None,
            "tax_amount": obj.get("taxAmount")
        })
        return _obj


