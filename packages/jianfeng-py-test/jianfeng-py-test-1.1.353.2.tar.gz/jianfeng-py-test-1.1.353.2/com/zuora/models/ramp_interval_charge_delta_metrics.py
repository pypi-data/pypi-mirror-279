# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from com.zuora.models.ramp_interval_charge_delta_metrics_delta_mrr_inner import RampIntervalChargeDeltaMetricsDeltaMrrInner
from com.zuora.models.ramp_interval_charge_delta_metrics_delta_quantity_inner import RampIntervalChargeDeltaMetricsDeltaQuantityInner

class RampIntervalChargeDeltaMetrics(BaseModel):
    """
    RampIntervalChargeDeltaMetrics
    """
    charge_number: Optional[StrictStr] = Field(None, alias="chargeNumber", description="The number of the rate plan charge.")
    delta_discount_tcb: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="deltaDiscountTcb", description="The discount delta amount for the TCB.")
    delta_discount_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="deltaDiscountTcv", description="The discount delta amount for the TCV.")
    delta_gross_tcb: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="deltaGrossTcb", description="The TCB delta value before discount charges are applied.")
    delta_gross_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="deltaGrossTcv", description="The TCV delta value before discount charges are applied.")
    delta_mrr: Optional[conlist(RampIntervalChargeDeltaMetricsDeltaMrrInner)] = Field(None, alias="deltaMrr", description="The MRR changing history of the current rate plan charge in the current ramp interval.")
    delta_net_tcb: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="deltaNetTcb", description="The TCB delta value after discount charges are applied.")
    delta_net_tcv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="deltaNetTcv", description="The TCV delta value after discount charges are applied.")
    delta_quantity: Optional[conlist(RampIntervalChargeDeltaMetricsDeltaQuantityInner)] = Field(None, alias="deltaQuantity", description="The charge quantity changing history of the current rate plan charge in the current ramp interval.")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(None, alias="productRatePlanChargeId", description="The ID of the corresponding product rate plan charge.")
    subscription_number: Optional[StrictStr] = Field(None, alias="subscriptionNumber", description="The number of the subscription that the current rate plan charge belongs to.")
    __properties = ["chargeNumber", "deltaDiscountTcb", "deltaDiscountTcv", "deltaGrossTcb", "deltaGrossTcv", "deltaMrr", "deltaNetTcb", "deltaNetTcv", "deltaQuantity", "productRatePlanChargeId", "subscriptionNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RampIntervalChargeDeltaMetrics:
        """Create an instance of RampIntervalChargeDeltaMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in delta_mrr (list)
        _items = []
        if self.delta_mrr:
            for _item in self.delta_mrr:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deltaMrr'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in delta_quantity (list)
        _items = []
        if self.delta_quantity:
            for _item in self.delta_quantity:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deltaQuantity'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RampIntervalChargeDeltaMetrics:
        """Create an instance of RampIntervalChargeDeltaMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RampIntervalChargeDeltaMetrics.parse_obj(obj)

        _obj = RampIntervalChargeDeltaMetrics.parse_obj({
            "charge_number": obj.get("chargeNumber"),
            "delta_discount_tcb": obj.get("deltaDiscountTcb"),
            "delta_discount_tcv": obj.get("deltaDiscountTcv"),
            "delta_gross_tcb": obj.get("deltaGrossTcb"),
            "delta_gross_tcv": obj.get("deltaGrossTcv"),
            "delta_mrr": [RampIntervalChargeDeltaMetricsDeltaMrrInner.from_dict(_item) for _item in obj.get("deltaMrr")] if obj.get("deltaMrr") is not None else None,
            "delta_net_tcb": obj.get("deltaNetTcb"),
            "delta_net_tcv": obj.get("deltaNetTcv"),
            "delta_quantity": [RampIntervalChargeDeltaMetricsDeltaQuantityInner.from_dict(_item) for _item in obj.get("deltaQuantity")] if obj.get("deltaQuantity") is not None else None,
            "product_rate_plan_charge_id": obj.get("productRatePlanChargeId"),
            "subscription_number": obj.get("subscriptionNumber")
        })
        return _obj


