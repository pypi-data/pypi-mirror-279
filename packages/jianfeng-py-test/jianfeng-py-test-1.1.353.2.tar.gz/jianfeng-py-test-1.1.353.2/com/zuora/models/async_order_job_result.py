# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from com.zuora.models.async_order_result_subscriptions import AsyncOrderResultSubscriptions
from com.zuora.models.create_order_response_order_line_items import CreateOrderResponseOrderLineItems
from com.zuora.models.create_order_response_ramps import CreateOrderResponseRamps
from com.zuora.models.failed_reason import FailedReason

class AsyncOrderJobResult(BaseModel):
    """
    **Note:** The schema of the `result` nested field is the same as the response body schema of either the [\"Create an order\"](https://www.zuora.com/developer/api-references/api/operation/Post_Order) or the [\"Preview an order\"](https://www.zuora.com/developer/api-references/api/operation/Post_PreviewOrder) operation, depending on the purpose of the job.  The following schema for the nested `result` field is defined as the response body schema of \"Create an order\". See [Preview an Order](https://www.zuora.com/developer/api-references/api/operation/Post_PreviewOrder) for the response body schema of \"Preview an order\".    # noqa: E501
    """
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The account ID for the order. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The account number for the order.")
    credit_memo_ids: Optional[conlist(StrictStr)] = Field(None, alias="creditMemoIds", description="An array of the credit memo IDs that are generated in the \"Create an order asynchronously\" operation. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.")
    credit_memo_numbers: Optional[conlist(StrictStr)] = Field(None, alias="creditMemoNumbers", description="An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.")
    invoice_id: Optional[StrictStr] = Field(None, alias="invoiceId", description="An array of the invoice IDs that are generated in the \"Create an order asynchronously\" operation. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.")
    invoice_numbers: Optional[conlist(StrictStr)] = Field(None, alias="invoiceNumbers", description="An array of the invoice numbers generated in this order request. Normally it includes one invoice number only, but can include multiple items when a subscription was tagged as invoice separately.")
    order_id: Optional[StrictStr] = Field(None, alias="orderId", description="The ID of the order created. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.")
    order_line_items: Optional[conlist(CreateOrderResponseOrderLineItems)] = Field(None, alias="orderLineItems")
    order_number: Optional[StrictStr] = Field(None, alias="orderNumber", description="The order number of the order created.")
    paid_amount: Optional[StrictStr] = Field(None, alias="paidAmount", description="The total amount collected in this order request.")
    payment_id: Optional[StrictStr] = Field(None, alias="paymentId", description="The ID of the payment that is collected in the \"Create an order asynchronously\" operation. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.")
    payment_number: Optional[StrictStr] = Field(None, alias="paymentNumber", description="The payment number that collected in this order request.")
    ramps: Optional[conlist(CreateOrderResponseRamps)] = Field(None, description="**Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.  The ramp definitions created by this order request. ")
    status: Optional[StrictStr] = Field(None, description="Status of the order. `Pending` is only applicable for an order that contains a `CreateSubscription` order action.")
    subscription_ids: Optional[conlist(StrictStr)] = Field(None, alias="subscriptionIds", description="Container for the IDs of the subscriptions in the order. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.")
    subscription_numbers: Optional[conlist(StrictStr)] = Field(None, alias="subscriptionNumbers", description="**Note:** This field is in Zuora REST API version control. Supported minor versions are 222.4 or earlier. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers of the subscriptions in an order. ")
    subscriptions: Optional[conlist(AsyncOrderResultSubscriptions)] = Field(None, description="**Note:** This field is in Zuora REST API version control. Supported minor versions are 223.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers and statuses in an order. ")
    __properties = ["processId", "requestId", "reasons", "success", "accountId", "accountNumber", "creditMemoIds", "creditMemoNumbers", "invoiceId", "invoiceNumbers", "orderId", "orderLineItems", "orderNumber", "paidAmount", "paymentId", "paymentNumber", "ramps", "status", "subscriptionIds", "subscriptionNumbers", "subscriptions"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Draft', 'Pending', 'Completed'):
            raise ValueError("must be one of enum values ('Draft', 'Pending', 'Completed')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AsyncOrderJobResult:
        """Create an instance of AsyncOrderJobResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_line_items (list)
        _items = []
        if self.order_line_items:
            for _item in self.order_line_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderLineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ramps (list)
        _items = []
        if self.ramps:
            for _item in self.ramps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ramps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AsyncOrderJobResult:
        """Create an instance of AsyncOrderJobResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AsyncOrderJobResult.parse_obj(obj)

        _obj = AsyncOrderJobResult.parse_obj({
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "credit_memo_ids": obj.get("creditMemoIds"),
            "credit_memo_numbers": obj.get("creditMemoNumbers"),
            "invoice_id": obj.get("invoiceId"),
            "invoice_numbers": obj.get("invoiceNumbers"),
            "order_id": obj.get("orderId"),
            "order_line_items": [CreateOrderResponseOrderLineItems.from_dict(_item) for _item in obj.get("orderLineItems")] if obj.get("orderLineItems") is not None else None,
            "order_number": obj.get("orderNumber"),
            "paid_amount": obj.get("paidAmount"),
            "payment_id": obj.get("paymentId"),
            "payment_number": obj.get("paymentNumber"),
            "ramps": [CreateOrderResponseRamps.from_dict(_item) for _item in obj.get("ramps")] if obj.get("ramps") is not None else None,
            "status": obj.get("status"),
            "subscription_ids": obj.get("subscriptionIds"),
            "subscription_numbers": obj.get("subscriptionNumbers"),
            "subscriptions": [AsyncOrderResultSubscriptions.from_dict(_item) for _item in obj.get("subscriptions")] if obj.get("subscriptions") is not None else None
        })
        return _obj


