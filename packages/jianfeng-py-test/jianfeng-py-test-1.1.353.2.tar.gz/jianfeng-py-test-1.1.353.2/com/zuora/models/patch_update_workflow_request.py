# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class PATCHUpdateWorkflowRequest(BaseModel):
    """
    PATCHUpdateWorkflowRequest
    """
    name: Optional[StrictStr] = Field(None, description="The name of the workflow definition ")
    description: Optional[StrictStr] = Field(None, description="The description of the workflow defintion ")
    active_workflow_version_id: Optional[StrictInt] = Field(None, description="The id of a version. This version will then be set to the active version of the workflow definition. ")
    status: Optional[StrictStr] = Field(None, description="Can be `Active` or `Inactive`. Active workfow definitions run like normal. Inactive workflow definitions cannot be run. ")
    __properties = ["name", "description", "active_workflow_version_id", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PATCHUpdateWorkflowRequest:
        """Create an instance of PATCHUpdateWorkflowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PATCHUpdateWorkflowRequest:
        """Create an instance of PATCHUpdateWorkflowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PATCHUpdateWorkflowRequest.parse_obj(obj)

        _obj = PATCHUpdateWorkflowRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "active_workflow_version_id": obj.get("active_workflow_version_id"),
            "status": obj.get("status")
        })
        return _obj


