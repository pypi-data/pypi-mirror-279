# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ListOfExchangeRates(BaseModel):
    """
    Container for exchange rate information on a given date. The field name is the date in `yyyy-mm-dd` format, for example, 2016-01-15.   # noqa: E501
    """
    currency: Optional[StrictStr] = Field(None, alias="CURRENCY", description="The exchange rate on the **providerExchangeRateDate**. The field name is the ISO currency code of the currency, for example, `EUR`.  There may be more than one currency returned for a given **providerExchangeRateDate**. If the rate for a certain currency is not available on the **providerExchangeRateDate**, the currency is not returned in the response. ")
    provider_exchange_rate_date: Optional[date] = Field(None, alias="providerExchangeRateDate", description="The date of the exchange rate used. The date is in `yyyy-mm-dd` format.  Corresponds to the value specified in the Provider Exchange Rate Date column in the Import Foreign Exchange Rates template when you uploaded the rates through the Mass Updater. ")
    __properties = ["CURRENCY", "providerExchangeRateDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListOfExchangeRates:
        """Create an instance of ListOfExchangeRates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListOfExchangeRates:
        """Create an instance of ListOfExchangeRates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListOfExchangeRates.parse_obj(obj)

        _obj = ListOfExchangeRates.parse_obj({
            "currency": obj.get("CURRENCY"),
            "provider_exchange_rate_date": obj.get("providerExchangeRateDate")
        })
        return _obj


