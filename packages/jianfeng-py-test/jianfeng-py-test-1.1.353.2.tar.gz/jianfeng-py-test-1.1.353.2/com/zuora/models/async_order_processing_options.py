# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from com.zuora.models.billing_options import BillingOptions
from com.zuora.models.electronic_payment_options import ElectronicPaymentOptions

class AsyncOrderProcessingOptions(BaseModel):
    """
    The container for billing processing options and payment processing options.  **Note:** This field is not supported in draft orders.   # noqa: E501
    """
    application_order: Optional[conlist(StrictStr)] = Field(None, alias="applicationOrder", description="The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.  **Note:**   - This field is valid only if the `applyCredit` field is set to `true`.   - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply to invoices. ")
    apply_credit: Optional[StrictBool] = Field(None, alias="applyCredit", description=" - If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices   **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. ")
    apply_credit_balance: Optional[StrictBool] = Field(None, alias="applyCreditBalance", description="Indicates if any credit balance on a customer's account is automatically applied to invoices. If no value is specified then this field defaults to false. This feature is not available if you have enabled the Invoice Settlement feature. ")
    billing_options: Optional[BillingOptions] = Field(None, alias="billingOptions")
    collect_payment: Optional[StrictBool] = Field(None, alias="collectPayment", description="Indicates if the current request needs to collect payments. This value can not be 'true' when 'runBilling' flag is 'false'. ")
    electronic_payment_options: Optional[ElectronicPaymentOptions] = Field(None, alias="electronicPaymentOptions")
    run_billing: Optional[StrictBool] = Field(None, alias="runBilling", description="Indicates if the current request needs to generate an invoice. The invoice will be generated against all subscriptions included in this order. ")
    __properties = ["applicationOrder", "applyCredit", "applyCreditBalance", "billingOptions", "collectPayment", "electronicPaymentOptions", "runBilling"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AsyncOrderProcessingOptions:
        """Create an instance of AsyncOrderProcessingOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing_options
        if self.billing_options:
            _dict['billingOptions'] = self.billing_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of electronic_payment_options
        if self.electronic_payment_options:
            _dict['electronicPaymentOptions'] = self.electronic_payment_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AsyncOrderProcessingOptions:
        """Create an instance of AsyncOrderProcessingOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AsyncOrderProcessingOptions.parse_obj(obj)

        _obj = AsyncOrderProcessingOptions.parse_obj({
            "application_order": obj.get("applicationOrder"),
            "apply_credit": obj.get("applyCredit"),
            "apply_credit_balance": obj.get("applyCreditBalance"),
            "billing_options": BillingOptions.from_dict(obj.get("billingOptions")) if obj.get("billingOptions") is not None else None,
            "collect_payment": obj.get("collectPayment"),
            "electronic_payment_options": ElectronicPaymentOptions.from_dict(obj.get("electronicPaymentOptions")) if obj.get("electronicPaymentOptions") is not None else None,
            "run_billing": obj.get("runBilling")
        })
        return _obj


