# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt

class Options(BaseModel):
    """
    Invoice or Payment.  # noqa: E501
    """
    billing_target_date: Optional[date] = Field(None, alias="billingTargetDate", description="Date through which to calculate charges if an invoice is generated. See [What is a Target Date?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs#What_is_a_Target_Date.3F).")
    collect_payment: Optional[StrictBool] = Field(None, alias="collectPayment", description="Indicates if the current request needs to collect payments. This value can not be 'true' when 'runBilling' flag is 'false'.")
    max_subscriptions_per_account: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="maxSubscriptionsPerAccount")
    run_billing: Optional[StrictBool] = Field(None, alias="runBilling", description="Indicates if the current request needs to generate an invoice. The invoice will be generated against all subscriptions included in this order.")
    __properties = ["billingTargetDate", "collectPayment", "maxSubscriptionsPerAccount", "runBilling"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Options:
        """Create an instance of Options from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Options:
        """Create an instance of Options from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Options.parse_obj(obj)

        _obj = Options.parse_obj({
            "billing_target_date": obj.get("billingTargetDate"),
            "collect_payment": obj.get("collectPayment"),
            "max_subscriptions_per_account": obj.get("maxSubscriptionsPerAccount"),
            "run_billing": obj.get("runBilling")
        })
        return _obj


