# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class GetInvoiceApplicationPartRequest(BaseModel):
    """
    GetInvoiceApplicationPartRequest
    """
    applied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="appliedAmount", description="The amount that is applied to the invoice. ")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the Zuora user who created the payment or credit memo. ")
    created_date: Optional[datetime] = Field(None, alias="createdDate", description="The date and time when the payment or credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-12-01 15:31:10. ")
    credit_memo_id: Optional[StrictStr] = Field(None, alias="creditMemoId", description="The ID of credit memo that is applied to the specified invoice. ")
    payment_id: Optional[StrictStr] = Field(None, alias="paymentId", description="The ID of the payment that is applied to the specified invoice. ")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the Zuora user who last updated the payment or credit memo. ")
    updated_date: Optional[datetime] = Field(None, alias="updatedDate", description="The date and time when the payment or credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2018-01-02 11:42:16. ")
    __properties = ["appliedAmount", "createdById", "createdDate", "creditMemoId", "paymentId", "updatedById", "updatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetInvoiceApplicationPartRequest:
        """Create an instance of GetInvoiceApplicationPartRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetInvoiceApplicationPartRequest:
        """Create an instance of GetInvoiceApplicationPartRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetInvoiceApplicationPartRequest.parse_obj(obj)

        _obj = GetInvoiceApplicationPartRequest.parse_obj({
            "applied_amount": obj.get("appliedAmount"),
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "credit_memo_id": obj.get("creditMemoId"),
            "payment_id": obj.get("paymentId"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate")
        })
        return _obj


