# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator
from com.zuora.models.create_payment_run_data_item import CreatePaymentRunDataItem

class CreatePaymentRunData(BaseModel):
    """
    CreatePaymentRunData
    """
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="A valid account ID associated with the payment run.  If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices/debit memos due on an account. ")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber", description="The number of the customer account associated with the payment run, such as `A00000001`.  You can specify either `accountNumber` or `accountId` for a customer account, but not both of them.  If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices, debit memos, and standalone payments due on an account. ")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount to be collected for the specified invoice/debit memo. `amount` must be a positive numeric value no more than the balance of the specified invoice/debit memo.  This field is only available when `documentId` is specified. If `amount` is not specified, whole balance of the invoice/debit memo is collected. ")
    comment: Optional[StrictStr] = Field(None, description="Additional comments. ")
    currency: Optional[StrictStr] = Field(None, description="Note: This field is only available if support for standalone payments is enabled.  The currency of the standalone payment. Specify this field only if the `standalone` field is `true`. The currency of the standalone payment can be different from the payment currency defined in the customer account settings. ")
    document_id: Optional[StrictStr] = Field(None, alias="documentId", description="The ID of a billing document associated with the payment run. `documentId` must be valid and match with `documentType`.  You must either specify both `documentId` and `documentType`, or specify neither of them.  If neither of `documentType` and `documentId` is specified, all invoices/debit memos with open balance of the account are collected. ")
    document_number: Optional[StrictStr] = Field(None, alias="documentNumber", description="The number of a billing document associated with the payment run. `documentNumber` must be valid and match with `documentType`.  You must either specify both `documentNumber` and `documentType`, or specify neither of them.  If neither of `documentType` and `documentNumber` is specified, all invoices/debit memos with open balance of the account are collected. ")
    document_type: Optional[StrictStr] = Field(None, alias="documentType", description="The type of a billing document associated with the payment run. The value can be `Invoice` or `DebitMemo`, but `DebitMemo` is only supported if the Invoice Settlement feature is enabled.  You must either specify both `documentType` and `documentId`, or specify neither of them.  If neither of `documentType` and `documentId` is specified, all invoices/debit memos with open balance of the account are collected. ")
    payment_gateway_id: Optional[StrictStr] = Field(None, alias="paymentGatewayId", description="The ID of the payment gateway for collecting invoices/debit memos. The specified payment gateway must be valid and active. If it is not specified, the default payment gateway of the account is used. If no payment gateway is configured for the account, the default payment gateway of the tenant is used.  If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices/debit memos due on an account. ")
    payment_method_id: Optional[StrictStr] = Field(None, alias="paymentMethodId", description="The ID of the payment method for collecting invoices/debit memos. The specified payment method must be a valid non-system payment method. If it is not specified, the default payment method of the account is used regardless of the `autoPay` value of the account.  If `processPaymentWithClosedPM` is set to `false`, the payment method cannot be closed.  If the payment retry rules are enabled, the payment method must meet the rules.  If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices/debit memos due on an account. ")
    standalone: Optional[StrictBool] = Field(None, description="Note: This field is only available if support for standalone payments is enabled.  Specify `true` to indicate that this is a standalone payment that will be created and processed in Zuora through Zuora gateway integration but will be settled outside of Zuora. When `standalone` is set to `true`:   - `accountId` or `accountNumber` is required.   - `amount` is required.    - The amount will not be summed up into the account balance and key metrics regardless of the payment currency.   - No settlement data will be created.   - Either the applied amount or the unapplied amount of the payment is zero.   - The standalone payment cannot be applied, unapplied, or transferred. ")
    data_items: Optional[conlist(CreatePaymentRunDataItem)] = Field(None, alias="dataItems")
    additional_properties: Dict[str, Any] = {}
    __properties = ["accountId", "accountNumber", "amount", "comment", "currency", "documentId", "documentNumber", "documentType", "paymentGatewayId", "paymentMethodId", "standalone", "dataItems"]

    @validator('document_type')
    def document_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Invoice', 'DebitMemo'):
            raise ValueError("must be one of enum values ('Invoice', 'DebitMemo')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePaymentRunData:
        """Create an instance of CreatePaymentRunData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data_items (list)
        _items = []
        if self.data_items:
            for _item in self.data_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataItems'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePaymentRunData:
        """Create an instance of CreatePaymentRunData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePaymentRunData.parse_obj(obj)

        _obj = CreatePaymentRunData.parse_obj({
            "account_id": obj.get("accountId"),
            "account_number": obj.get("accountNumber"),
            "amount": obj.get("amount"),
            "comment": obj.get("comment"),
            "currency": obj.get("currency"),
            "document_id": obj.get("documentId"),
            "document_number": obj.get("documentNumber"),
            "document_type": obj.get("documentType"),
            "payment_gateway_id": obj.get("paymentGatewayId"),
            "payment_method_id": obj.get("paymentMethodId"),
            "standalone": obj.get("standalone"),
            "data_items": [CreatePaymentRunDataItem.from_dict(_item) for _item in obj.get("dataItems")] if obj.get("dataItems") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


