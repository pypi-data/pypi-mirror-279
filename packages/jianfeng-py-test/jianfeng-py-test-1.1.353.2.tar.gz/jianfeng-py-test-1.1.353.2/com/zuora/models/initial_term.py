# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class InitialTerm(BaseModel):
    """
    Information about the first term of the subscription.   # noqa: E501
    """
    period: Optional[StrictInt] = Field(None, description="Duration of the first term in months, years, days, or weeks, depending on the value of the `periodType` field. Only applicable if the value of the `termType` field is `TERMED`. ")
    period_type: Optional[StrictStr] = Field(None, alias="periodType")
    start_date: Optional[date] = Field(None, alias="startDate", description="Start date of the first term, in YYYY-MM-DD format. ")
    end_date: Optional[date] = Field(None, alias="endDate", description="End date of the first term, in YYYY-MM-DD format. ")
    term_type: Optional[StrictStr] = Field(None, alias="termType")
    __properties = ["period", "periodType", "startDate", "endDate", "termType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InitialTerm:
        """Create an instance of InitialTerm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InitialTerm:
        """Create an instance of InitialTerm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InitialTerm.parse_obj(obj)

        _obj = InitialTerm.parse_obj({
            "period": obj.get("period"),
            "period_type": obj.get("periodType"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "term_type": obj.get("termType")
        })
        return _obj


