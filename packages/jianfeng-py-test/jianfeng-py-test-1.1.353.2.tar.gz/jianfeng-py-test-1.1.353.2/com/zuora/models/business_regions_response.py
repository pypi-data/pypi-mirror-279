# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, constr, validator
from com.zuora.models.failed_reason import FailedReason

class BusinessRegionsResponse(BaseModel):
    """
    BusinessRegionsResponse
    """
    process_id: Optional[StrictStr] = Field(None, alias="processId", description="The Id of the process that handle the operation. ")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ")
    reasons: Optional[conlist(FailedReason)] = None
    success: Optional[StrictBool] = Field(None, description="Indicates whether the call succeeded. ")
    id: Optional[StrictStr] = Field(None, description="The unique ID of the e-invoicing business region. ")
    country: Optional[StrictStr] = Field(None, description="The short name of a country or region where you must comply with e-invoicing requirements. For example, `IN` for India. For the full list of country names and codes, see <a href=\"https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes\" target=\"_blank\">ISO Standard Country Codes</a>. ")
    business_name: Optional[constr(strict=True, max_length=255)] = Field(None, alias="businessName", description="The full official name that the Seller is registered with the relevant legal authority. ")
    business_number: Optional[StrictStr] = Field(None, alias="businessNumber", description="The specify the unique identifier number of the legal entity or person that you do business with.  For example, you must use a GSTIN for India and Tax Identification Number (TIN) for Saudi Arabia. ")
    business_number_schema_id: Optional[StrictStr] = Field(None, alias="businessNumberSchemaId", description="The identification scheme identifier that an official registrar issues to identify the Seller as a legal entity or person. ")
    trade_name: Optional[constr(strict=True, max_length=100)] = Field(None, alias="tradeName", description="The name that the Seller is known as, other than the legal business name. ")
    tax_register_number: Optional[StrictStr] = Field(None, alias="taxRegisterNumber", description="The Seller's VAT identifier (also known as Seller VAT identification number) or the local identification (defined by the Seller’s address) of the Seller for tax purposes, or a reference that enables the Seller to state the registered tax status. ")
    endpoint_id: Optional[StrictStr] = Field(None, alias="endpointId", description="The Seller's electronic address, to which the application-level response to the e-invoice file might be delivered. ")
    endpoint_scheme_id: Optional[StrictStr] = Field(None, alias="endpointSchemeId", description="The identification scheme identifier of the Seller’s electronic address. ")
    address_line1: Optional[StrictStr] = Field(None, alias="addressLine1", description="The first line of the Seller’s address, which is often a street address or business name. ")
    address_line2: Optional[StrictStr] = Field(None, alias="addressLine2", description="The second line of the Seller’s address, which is often the name of a building. ")
    postal_code: Optional[StrictStr] = Field(None, alias="postalCode", description="The short code that can identify the business address. ")
    city: Optional[StrictStr] = Field(None, description="The the name of the city where the business is located. ")
    state: Optional[StrictStr] = Field(None, description="The name of the state or province where the business is located. ")
    contact_name: Optional[constr(strict=True, max_length=255)] = Field(None, alias="contactName", description="The name of the Seller contact to receive e-invoicing data. ")
    email: Optional[StrictStr] = Field(None, description="The email address of the Seller contact to receive e-invoicing data. ")
    phone_number: Optional[StrictStr] = Field(None, alias="phoneNumber", description="The business phone number of the Seller contact to receive e-invoicing data. ")
    service_provider_id: Optional[StrictStr] = Field(None, alias="serviceProviderId", description="The unique ID of the e-invoicing service provider that is associated to the business region. ")
    business_region_number: Optional[StrictStr] = Field(None, alias="businessRegionNumber", description="The unique number of the e-invoicing business region. ")
    digital_signature_enable: Optional[StrictBool] = Field(None, alias="digitalSignatureEnable", description="It will control that whether the pdf should be signed by vendor. ")
    digital_signature_box_enable: Optional[StrictBool] = Field(None, alias="digitalSignatureBoxEnable", description="It will control whether the dignature box will be shown on the pdf. ")
    digital_signature_box_pos_x: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="digitalSignatureBoxPosX", description="It is the X-axis that the box will be shown. ")
    digital_signature_box_pos_y: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="digitalSignatureBoxPosY", description="It is the Y-axis that the box will be shown. ")
    response_mapping: Optional[Dict[str, Any]] = Field(None, alias="responseMapping", description="The response mapping of the e-invoicing business region. ")
    process_type: Optional[StrictStr] = Field(None, alias="processType", description="The process type of the e-invoicing business region. ")
    invoice_enabled: Optional[StrictBool] = Field(None, alias="invoiceEnabled", description="It will control that whether the invoice should be supported by the process type or not. ")
    credit_memo_enabled: Optional[StrictBool] = Field(None, alias="creditMemoEnabled", description="It will control that whether the credit memo should be supported by the process type or not. ")
    debit_memo_enabled: Optional[StrictBool] = Field(None, alias="debitMemoEnabled", description="It will control that whether the debit memo should be supported by the process type or not. ")
    __properties = ["processId", "requestId", "reasons", "success", "id", "country", "businessName", "businessNumber", "businessNumberSchemaId", "tradeName", "taxRegisterNumber", "endpointId", "endpointSchemeId", "addressLine1", "addressLine2", "postalCode", "city", "state", "contactName", "email", "phoneNumber", "serviceProviderId", "businessRegionNumber", "digitalSignatureEnable", "digitalSignatureBoxEnable", "digitalSignatureBoxPosX", "digitalSignatureBoxPosY", "responseMapping", "processType", "invoiceEnabled", "creditMemoEnabled", "debitMemoEnabled"]

    @validator('process_type')
    def process_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Clearance', 'ClearanceWithCancellation', 'PostAudit', 'PEPPOLNetwork', 'Unknown'):
            raise ValueError("must be one of enum values ('Clearance', 'ClearanceWithCancellation', 'PostAudit', 'PEPPOLNetwork', 'Unknown')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BusinessRegionsResponse:
        """Create an instance of BusinessRegionsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BusinessRegionsResponse:
        """Create an instance of BusinessRegionsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BusinessRegionsResponse.parse_obj(obj)

        _obj = BusinessRegionsResponse.parse_obj({
            "process_id": obj.get("processId"),
            "request_id": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "id": obj.get("id"),
            "country": obj.get("country"),
            "business_name": obj.get("businessName"),
            "business_number": obj.get("businessNumber"),
            "business_number_schema_id": obj.get("businessNumberSchemaId"),
            "trade_name": obj.get("tradeName"),
            "tax_register_number": obj.get("taxRegisterNumber"),
            "endpoint_id": obj.get("endpointId"),
            "endpoint_scheme_id": obj.get("endpointSchemeId"),
            "address_line1": obj.get("addressLine1"),
            "address_line2": obj.get("addressLine2"),
            "postal_code": obj.get("postalCode"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "contact_name": obj.get("contactName"),
            "email": obj.get("email"),
            "phone_number": obj.get("phoneNumber"),
            "service_provider_id": obj.get("serviceProviderId"),
            "business_region_number": obj.get("businessRegionNumber"),
            "digital_signature_enable": obj.get("digitalSignatureEnable"),
            "digital_signature_box_enable": obj.get("digitalSignatureBoxEnable"),
            "digital_signature_box_pos_x": obj.get("digitalSignatureBoxPosX"),
            "digital_signature_box_pos_y": obj.get("digitalSignatureBoxPosY"),
            "response_mapping": obj.get("responseMapping"),
            "process_type": obj.get("processType"),
            "invoice_enabled": obj.get("invoiceEnabled"),
            "credit_memo_enabled": obj.get("creditMemoEnabled"),
            "debit_memo_enabled": obj.get("debitMemoEnabled")
        })
        return _obj


