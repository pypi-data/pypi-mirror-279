# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from com.zuora.models.delivery_frequency import DeliveryFrequency

class DeliverySchedule(BaseModel):
    """
    The `deliveryScheudule` is used for the Delivery Pricing charge model only.  To enable the Delivery Pricing charge model, submit a request at <a href=\"http://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a> and check **Delivery Pricing** in **Billing Settings** > **Enable Charge Types / Models**.   # noqa: E501
    """
    frequency: Optional[DeliveryFrequency] = None
    monday: Optional[StrictBool] = Field(None, description="Indicates whether delivery occurs on Monday.")
    tuesday: Optional[StrictBool] = Field(None, description="Indicates whether delivery occurs on Tuesday.")
    wednesday: Optional[StrictBool] = Field(None, description="Indicates whether delivery occurs on Wednesday.")
    thursday: Optional[StrictBool] = Field(None, description="Indicates whether delivery occurs on Thursday.")
    friday: Optional[StrictBool] = Field(None, description="Indicates whether delivery occurs on Friday.")
    saturday: Optional[StrictBool] = Field(None, description="Indicates whether delivery occurs on Saturday.")
    sunday: Optional[StrictBool] = Field(None, description="Indicates whether delivery occurs on Sunday.")
    __properties = ["frequency", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeliverySchedule:
        """Create an instance of DeliverySchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeliverySchedule:
        """Create an instance of DeliverySchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeliverySchedule.parse_obj(obj)

        _obj = DeliverySchedule.parse_obj({
            "frequency": obj.get("frequency"),
            "monday": obj.get("monday"),
            "tuesday": obj.get("tuesday"),
            "wednesday": obj.get("wednesday"),
            "thursday": obj.get("thursday"),
            "friday": obj.get("friday"),
            "saturday": obj.get("saturday"),
            "sunday": obj.get("sunday")
        })
        return _obj


