# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, constr
from com.zuora.models.rev_rec_trigger import RevRecTrigger

class UpdateDiscountInvoiceItem(BaseModel):
    """
    UpdateDiscountInvoiceItem
    """
    integration_id__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationId__NS", description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    integration_status__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="IntegrationStatus__NS", description="Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    sync_date__ns: Optional[constr(strict=True, max_length=255)] = Field(None, alias="SyncDate__NS", description="Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ")
    processing_type: Optional[StrictStr] = Field(None, alias="processingType")
    accounting_code: Optional[StrictStr] = Field(None, alias="accountingCode", description="The accounting code associated with the discount item.")
    adjustment_liability_accounting_code: Optional[StrictStr] = Field(None, alias="adjustmentLiabilityAccountingCode", description="The accounting code for adjustment liability. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.")
    adjustment_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="adjustmentRevenueAccountingCode", description="The accounting code for adjustment revenue. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The amount of the discount item. - Should be a negative number. For example, `-10`. - Always a fixed amount no matter whether the discount charge associated with the discount item uses the [fixed-amount model or percentage model](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models#Fixed_amount_model_and_percentage_model). - For tax-exclusive discount items, this amount indicates the discount item amount excluding tax. - For tax-inclusive discount items, this amount indicates the discount item amount including tax. ")
    charge_date: Optional[StrictStr] = Field(None, alias="chargeDate", description="The date when the discount item is charged, in `yyyy-mm-dd hh:mm:ss` format.")
    charge_name: Optional[StrictStr] = Field(None, alias="chargeName", description="The name of the charge associated with the discount item. This field is required if the `productRatePlanChargeId` field is not specified in the request. ")
    contract_asset_accounting_code: Optional[StrictStr] = Field(None, alias="contractAssetAccountingCode", description="The accounting code for contract asset. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ")
    contract_liability_accounting_code: Optional[StrictStr] = Field(None, alias="contractLiabilityAccountingCode", description="The accounting code for contract liability. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ")
    contract_recognized_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="contractRecognizedRevenueAccountingCode", description="The accounting code for contract recognized revenue. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ")
    deferred_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="deferredRevenueAccountingCode", description="The accounting code for the deferred revenue, such as Monthly Recurring Liability. **Note:** This field is only available if you have Zuora Finance enabled. ")
    description: Optional[StrictStr] = Field(None, description="The description of the discount item. ")
    id: StrictStr = Field(..., description="The unique ID of the discount item. ")
    item_type: Optional[StrictStr] = Field(None, alias="itemType", description="The type of the discount item. ")
    purchase_order_number: Optional[StrictStr] = Field(None, alias="purchaseOrderNumber", description="The purchase order number associated with the discount item. ")
    recognized_revenue_accounting_code: Optional[StrictStr] = Field(None, alias="recognizedRevenueAccountingCode", description="The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges. **Note:** This field is only available if you have Zuora Finance enabled. ")
    rev_rec_code: Optional[StrictStr] = Field(None, alias="revRecCode", description="The revenue recognition code.")
    rev_rec_trigger_condition: Optional[StrictStr] = Field(None, alias="revRecTriggerCondition")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(None, alias="revenueRecognitionRuleName", description="The name of the revenue recognition rule governing the revenue schedule. **Note:** This field is only available if you have Zuora Finance enabled. ")
    sku: Optional[StrictStr] = Field(None, description="The SKU of the invoice item. The SKU of the discount item must be different from the SKU of any existing product. ")
    unbilled_receivables_accounting_code: Optional[StrictStr] = Field(None, alias="unbilledReceivablesAccountingCode", description="The accounting code for unbilled receivables. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unitPrice", description="The per-unit price of the discount item. If the discount charge associated with the discount item uses the percentage model, the unit price will display as a percentage amount in PDF. For example: if unit price is 5.00, it will display as 5.00% in PDF. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "processingType", "accountingCode", "adjustmentLiabilityAccountingCode", "adjustmentRevenueAccountingCode", "amount", "chargeDate", "chargeName", "contractAssetAccountingCode", "contractLiabilityAccountingCode", "contractRecognizedRevenueAccountingCode", "deferredRevenueAccountingCode", "description", "id", "itemType", "purchaseOrderNumber", "recognizedRevenueAccountingCode", "revRecCode", "revRecTriggerCondition", "revenueRecognitionRuleName", "sku", "unbilledReceivablesAccountingCode", "unitPrice"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateDiscountInvoiceItem:
        """Create an instance of UpdateDiscountInvoiceItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateDiscountInvoiceItem:
        """Create an instance of UpdateDiscountInvoiceItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateDiscountInvoiceItem.parse_obj(obj)

        _obj = UpdateDiscountInvoiceItem.parse_obj({
            "integration_id__ns": obj.get("IntegrationId__NS"),
            "integration_status__ns": obj.get("IntegrationStatus__NS"),
            "sync_date__ns": obj.get("SyncDate__NS"),
            "processing_type": obj.get("processingType"),
            "accounting_code": obj.get("accountingCode"),
            "adjustment_liability_accounting_code": obj.get("adjustmentLiabilityAccountingCode"),
            "adjustment_revenue_accounting_code": obj.get("adjustmentRevenueAccountingCode"),
            "amount": obj.get("amount"),
            "charge_date": obj.get("chargeDate"),
            "charge_name": obj.get("chargeName"),
            "contract_asset_accounting_code": obj.get("contractAssetAccountingCode"),
            "contract_liability_accounting_code": obj.get("contractLiabilityAccountingCode"),
            "contract_recognized_revenue_accounting_code": obj.get("contractRecognizedRevenueAccountingCode"),
            "deferred_revenue_accounting_code": obj.get("deferredRevenueAccountingCode"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "item_type": obj.get("itemType"),
            "purchase_order_number": obj.get("purchaseOrderNumber"),
            "recognized_revenue_accounting_code": obj.get("recognizedRevenueAccountingCode"),
            "rev_rec_code": obj.get("revRecCode"),
            "rev_rec_trigger_condition": obj.get("revRecTriggerCondition"),
            "revenue_recognition_rule_name": obj.get("revenueRecognitionRuleName"),
            "sku": obj.get("sku"),
            "unbilled_receivables_accounting_code": obj.get("unbilledReceivablesAccountingCode"),
            "unit_price": obj.get("unitPrice")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


