# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class GetDebitMemoPdfStatusResponse(BaseModel):
    """
    GetDebitMemoPdfStatusResponse
    """
    debit_memo_id: Optional[StrictStr] = Field(None, alias="debitMemoId", description="The ID of the debit memo whose pdf status is requested. ")
    debit_memo_number: Optional[StrictStr] = Field(None, alias="debitMemoNumber", description="The debit memo number of the debit memo whose pdf status is requested. ")
    pdf_generation_status: Optional[StrictStr] = Field(None, alias="pdfGenerationStatus", description="The generation status of the debit memo PDF. Can be one of - None/Pending/Processing/Generated/Error/Obsolete/Archived ")
    created_on: Optional[StrictStr] = Field(None, alias="createdOn", description="The time at which the request to generate the PDF was created. ")
    updated_on: Optional[StrictStr] = Field(None, alias="updatedOn", description="The time at which the request to generate the PDF was updated. ")
    __properties = ["debitMemoId", "debitMemoNumber", "pdfGenerationStatus", "createdOn", "updatedOn"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetDebitMemoPdfStatusResponse:
        """Create an instance of GetDebitMemoPdfStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetDebitMemoPdfStatusResponse:
        """Create an instance of GetDebitMemoPdfStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetDebitMemoPdfStatusResponse.parse_obj(obj)

        _obj = GetDebitMemoPdfStatusResponse.parse_obj({
            "debit_memo_id": obj.get("debitMemoId"),
            "debit_memo_number": obj.get("debitMemoNumber"),
            "pdf_generation_status": obj.get("pdfGenerationStatus"),
            "created_on": obj.get("createdOn"),
            "updated_on": obj.get("updatedOn")
        })
        return _obj


