# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class WorkflowInstance(BaseModel):
    """
    A instance workflow object.  # noqa: E501
    """
    created_at: Optional[StrictStr] = Field(None, alias="createdAt", description="The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format. ")
    id: Optional[StrictInt] = Field(None, description="The unique ID of the workflow. ")
    name: Optional[StrictStr] = Field(None, description="The run number of this workflow instance ")
    original_workflow_id: Optional[StrictInt] = Field(None, alias="originalWorkflowId", description="The identifier of the workflow template that is used to create this instance. ")
    status: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = Field(None, alias="updatedAt", description="The date and time the last time when the workflow is updated, in the `YYYY-MM-DD HH:MM:SS` format. ")
    __properties = ["createdAt", "id", "name", "originalWorkflowId", "status", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkflowInstance:
        """Create an instance of WorkflowInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkflowInstance:
        """Create an instance of WorkflowInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkflowInstance.parse_obj(obj)

        _obj = WorkflowInstance.parse_obj({
            "created_at": obj.get("createdAt"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "original_workflow_id": obj.get("originalWorkflowId"),
            "status": obj.get("status"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


