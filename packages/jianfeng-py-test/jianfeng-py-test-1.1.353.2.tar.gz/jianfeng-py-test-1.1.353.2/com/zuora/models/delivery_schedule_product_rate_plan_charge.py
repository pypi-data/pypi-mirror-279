# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class DeliveryScheduleProductRatePlanCharge(BaseModel):
    """
    DeliveryScheduleProductRatePlanCharge
    """
    frequency: Optional[StrictStr] = Field(None, alias="Frequency")
    friday: Optional[StrictBool] = Field(None, alias="Friday", description="The flag to indicate should the delivery happen on Friday ")
    monday: Optional[StrictBool] = Field(None, alias="Monday", description="The flag to indicate should the delivery happen on Monday ")
    saturday: Optional[StrictBool] = Field(None, alias="Saturday", description="The flag to indicate should the delivery happen on Saturday ")
    sunday: Optional[StrictBool] = Field(None, alias="Sunday", description="The flag to indicate should the delivery happen on Sunday ")
    thursday: Optional[StrictBool] = Field(None, alias="Thursday", description="The flag to indicate should the delivery happen on Thursday ")
    tuesday: Optional[StrictBool] = Field(None, alias="Tuesday", description="The flag to indicate should the delivery happen on Tuesday ")
    wendesday: Optional[StrictBool] = Field(None, alias="Wendesday", description="The flag to indicate should the delivery happen on Wendesday ")
    __properties = ["Frequency", "Friday", "Monday", "Saturday", "Sunday", "Thursday", "Tuesday", "Wendesday"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeliveryScheduleProductRatePlanCharge:
        """Create an instance of DeliveryScheduleProductRatePlanCharge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeliveryScheduleProductRatePlanCharge:
        """Create an instance of DeliveryScheduleProductRatePlanCharge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeliveryScheduleProductRatePlanCharge.parse_obj(obj)

        _obj = DeliveryScheduleProductRatePlanCharge.parse_obj({
            "frequency": obj.get("Frequency"),
            "friday": obj.get("Friday"),
            "monday": obj.get("Monday"),
            "saturday": obj.get("Saturday"),
            "sunday": obj.get("Sunday"),
            "thursday": obj.get("Thursday"),
            "tuesday": obj.get("Tuesday"),
            "wendesday": obj.get("Wendesday")
        })
        return _obj


