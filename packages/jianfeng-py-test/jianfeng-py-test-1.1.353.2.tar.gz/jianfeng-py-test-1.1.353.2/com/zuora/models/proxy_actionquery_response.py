# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from com.zuora.models.z_object import ZObject

class ProxyActionqueryResponse(BaseModel):
    """
    ProxyActionqueryResponse
    """
    done: Optional[StrictBool] = Field(None, description="Indicates whether the returned records contain all the query results. * If the `queryLocator` field is returned, this field is set to `false`. * If no `queryLocator` field is returned, this field is set to `true`. ")
    query_locator: Optional[StrictStr] = Field(None, alias="queryLocator", description="A marker passed to QueryMore to get the next set of results. For more information, see [QueryMore](https://www.zuora.com/developer/api-references/api/operation/Action_PostqueryMore/).")
    records: Optional[conlist(ZObject)] = Field(None, description="A list of queried results.")
    size: Optional[StrictInt] = Field(None, description="The number of the returned query results.")
    __properties = ["done", "queryLocator", "records", "size"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProxyActionqueryResponse:
        """Create an instance of ProxyActionqueryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in records (list)
        _items = []
        if self.records:
            for _item in self.records:
                if _item:
                    _items.append(_item.to_dict())
            _dict['records'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProxyActionqueryResponse:
        """Create an instance of ProxyActionqueryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProxyActionqueryResponse.parse_obj(obj)

        _obj = ProxyActionqueryResponse.parse_obj({
            "done": obj.get("done"),
            "query_locator": obj.get("queryLocator"),
            "records": [ZObject.from_dict(_item) for _item in obj.get("records")] if obj.get("records") is not None else None,
            "size": obj.get("size")
        })
        return _obj


