# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from com.zuora.models.taxation_item_finance_information import TaxationItemFinanceInformation

class TaxationItem(BaseModel):
    """
    TaxationItem
    """
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById", description="The ID of the Zuora user who created the taxation item.")
    created_date: Optional[StrictStr] = Field(None, alias="createdDate", description="The date and time when the taxation item was created in the Zuora system, in `yyyy-mm-dd hh:mm:ss` format.")
    exempt_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="exemptAmount", description="The calculated tax amount excluded due to the exemption.")
    finance_information: Optional[TaxationItemFinanceInformation] = Field(None, alias="financeInformation")
    id: Optional[StrictStr] = Field(None, description="The ID of the taxation item.")
    invoice_item_id: Optional[StrictStr] = Field(None, alias="invoiceItemId", description="The ID of the invoice associated with the taxation item.")
    jurisdiction: Optional[StrictStr] = Field(None, description="The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.")
    location_code: Optional[StrictStr] = Field(None, alias="locationCode", description="The identifier for the location based on the value of the `taxCode` field.")
    memo_item_id: Optional[StrictStr] = Field(None, alias="memoItemId", description="The identifier for the memo item which is related to this tax item")
    name: Optional[StrictStr] = Field(None, description="The name of the taxation item.")
    source_tax_item_id: Optional[StrictStr] = Field(None, alias="sourceTaxItemId", description="The identifier for which tax item the credit memo/debit memo was given to")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount", description="The amount of the tax applied to the invoice.")
    applicable_tax_un_rounded: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="applicableTaxUnRounded", description="The unrounded amount of the tax.")
    country: Optional[StrictStr] = Field(None, description="The field which contains country code.")
    tax_code: Optional[StrictStr] = Field(None, alias="taxCode", description="The tax code identifies which tax rules and tax rates to apply to a specific invoice.")
    tax_code_description: Optional[StrictStr] = Field(None, alias="taxCodeDescription", description="The description of the tax code.")
    tax_date: Optional[date] = Field(None, alias="taxDate", description="The date when the tax is applied to the invoice.")
    tax_mode: Optional[StrictStr] = Field(None, alias="taxMode")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxRate", description="The tax rate applied to the invoice.")
    tax_rate_description: Optional[StrictStr] = Field(None, alias="taxRateDescription", description="The description of the tax rate.")
    tax_rate_type: Optional[StrictStr] = Field(None, alias="taxRateType")
    updated_by_id: Optional[StrictStr] = Field(None, alias="updatedById", description="The ID of the Zuora user who last updated the taxation item.")
    updated_date: Optional[StrictStr] = Field(None, alias="updatedDate", description="The date and time when the taxation item was last updated, in `yyyy-mm-dd hh:mm:ss` format.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["createdById", "createdDate", "exemptAmount", "financeInformation", "id", "invoiceItemId", "jurisdiction", "locationCode", "memoItemId", "name", "sourceTaxItemId", "taxAmount", "applicableTaxUnRounded", "country", "taxCode", "taxCodeDescription", "taxDate", "taxMode", "taxRate", "taxRateDescription", "taxRateType", "updatedById", "updatedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TaxationItem:
        """Create an instance of TaxationItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TaxationItem:
        """Create an instance of TaxationItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TaxationItem.parse_obj(obj)

        _obj = TaxationItem.parse_obj({
            "created_by_id": obj.get("createdById"),
            "created_date": obj.get("createdDate"),
            "exempt_amount": obj.get("exemptAmount"),
            "finance_information": TaxationItemFinanceInformation.from_dict(obj.get("financeInformation")) if obj.get("financeInformation") is not None else None,
            "id": obj.get("id"),
            "invoice_item_id": obj.get("invoiceItemId"),
            "jurisdiction": obj.get("jurisdiction"),
            "location_code": obj.get("locationCode"),
            "memo_item_id": obj.get("memoItemId"),
            "name": obj.get("name"),
            "source_tax_item_id": obj.get("sourceTaxItemId"),
            "tax_amount": obj.get("taxAmount"),
            "applicable_tax_un_rounded": obj.get("applicableTaxUnRounded"),
            "country": obj.get("country"),
            "tax_code": obj.get("taxCode"),
            "tax_code_description": obj.get("taxCodeDescription"),
            "tax_date": obj.get("taxDate"),
            "tax_mode": obj.get("taxMode"),
            "tax_rate": obj.get("taxRate"),
            "tax_rate_description": obj.get("taxRateDescription"),
            "tax_rate_type": obj.get("taxRateType"),
            "updated_by_id": obj.get("updatedById"),
            "updated_date": obj.get("updatedDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


