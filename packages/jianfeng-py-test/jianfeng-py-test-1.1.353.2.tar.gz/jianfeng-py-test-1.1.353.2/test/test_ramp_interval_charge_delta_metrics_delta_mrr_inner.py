# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from com.zuora.models.ramp_interval_charge_delta_metrics_delta_mrr_inner import RampIntervalChargeDeltaMetricsDeltaMrrInner  # noqa: E501

class TestRampIntervalChargeDeltaMetricsDeltaMrrInner(unittest.TestCase):
    """RampIntervalChargeDeltaMetricsDeltaMrrInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RampIntervalChargeDeltaMetricsDeltaMrrInner:
        """Test RampIntervalChargeDeltaMetricsDeltaMrrInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RampIntervalChargeDeltaMetricsDeltaMrrInner`
        """
        model = RampIntervalChargeDeltaMetricsDeltaMrrInner()  # noqa: E501
        if include_optional:
            return RampIntervalChargeDeltaMetricsDeltaMrrInner(
                discount = 1.337,
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                gross = 1.337,
                net = 1.337,
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
            )
        else:
            return RampIntervalChargeDeltaMetricsDeltaMrrInner(
        )
        """

    def testRampIntervalChargeDeltaMetricsDeltaMrrInner(self):
        """Test RampIntervalChargeDeltaMetricsDeltaMrrInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
