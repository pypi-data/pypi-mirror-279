# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2023-10-24
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from com.zuora.models.charge_override import ChargeOverride  # noqa: E501

class TestChargeOverride(unittest.TestCase):
    """ChargeOverride unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChargeOverride:
        """Test ChargeOverride
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChargeOverride`
        """
        model = ChargeOverride()  # noqa: E501
        if include_optional:
            return ChargeOverride(
                name = '',
                account_receivable_accounting_code = '',
                adjustment_liability_accounting_code = '',
                adjustment_revenue_accounting_code = '',
                contract_asset_accounting_code = '',
                contract_liability_accounting_code = '',
                contract_recognized_revenue_accounting_code = '',
                deferred_revenue_accounting_code = '',
                recognized_revenue_accounting_code = '',
                un_billed_receivables_accounting_code = '',
                product_category = '',
                product_class = '',
                product_family = '',
                product_line = '',
                charge_model = 'FlatFee',
                charge_type = 'OneTime',
                tax_code = '',
                tax_mode = 'TaxInclusive',
                is_charge_level_min_commit = True,
                commitment_type = 'UNIT',
                prepaid_operation_type = 'topup',
                is_committed = True,
                charge_function = 'Standard',
                prepaid_uom = '',
                drawdown_uom = '',
                prepaid_total_quantity = 1.337,
                is_prepaid = True,
                credit_option = 'TimeBased',
                billing = {"billCycleDay":27,"billCycleType":"DefaultFromCustomer","billingPeriod":"Month","billingPeriodAlignment":"AlignToCharge","billingTiming":"IN_ADVANCE","specificBillingPeriod":6,"weeklyBillCycleDay":"Sunday"},
                charge_number = '',
                custom_fields = {
                    'key' : None
                    },
                description = '',
                drawdown_rate = 1.337,
                end_date = {"endDateCondition":"Subscription_End","specificEndDate":"2000-01-23","upToPeriods":7,"upToPeriodsType":"Billing_Periods"},
                exclude_item_billing_from_revenue_accounting = True,
                exclude_item_booking_from_revenue_accounting = True,
                is_allocation_eligible = True,
                is_rollover = True,
                is_unbilled = True,
                prepaid_quantity = 1.337,
                pricing = {"chargeModelData":{"chargeModelConfiguration":{"customFieldPerUnitRate":"customFieldPerUnitRate","customFieldTotalAmount":"customFieldTotalAmount","formula":"formula"},"quantity":0.3616076749251911,"tiers":[{"endingUnit":2.027123023002322,"price":4.145608029883936,"priceFormat":"FlatFee","startingUnit":7.386281948385884,"tier":1},{"endingUnit":2.027123023002322,"price":4.145608029883936,"priceFormat":"FlatFee","startingUnit":7.386281948385884,"tier":1}]},"discount":{"applyDiscountTo":"ONETIME","discountAmount":1.0246457001441578,"discountLevel":"rateplan","discountPercentage":1.4894159098541704,"priceChangeOption":"NoChange"},"oneTimeFlatFee":{"listPrice":6.84685269835264},"oneTimePerUnit":{"listPrice":7.457744773683766,"quantity":0.11730742509559433},"oneTimeTiered":{"quantity":0.4965218492984954,"tiers":[{"endingUnit":2.027123023002322,"price":4.145608029883936,"priceFormat":"FlatFee","startingUnit":7.386281948385884,"tier":1},{"endingUnit":2.027123023002322,"price":4.145608029883936,"priceFormat":"FlatFee","startingUnit":7.386281948385884,"tier":1}]},"oneTimeVolume":{"quantity":0.5025004791520294,"tiers":[{"endingUnit":2.027123023002322,"price":4.145608029883936,"priceFormat":"FlatFee","startingUnit":7.386281948385884,"tier":1},{"endingUnit":2.027123023002322,"price":4.145608029883936,"priceFormat":"FlatFee","startingUnit":7.386281948385884,"tier":1}]},"recurringDelivery":null,"recurringFlatFee":null,"recurringPerUnit":null,"recurringTiered":null,"recurringVolume":null,"usageFlatFee":null,"usageOverage":null,"usagePerUnit":null,"usageTiered":null,"usageTieredWithOverage":null,"usageVolume":null},
                product_rate_plan_charge_number = '',
                product_rate_plan_charge_id = '',
                rev_rec_code = '',
                rev_rec_trigger_condition = 'Contract Effective Date',
                revenue_recognition_rule_name = '',
                rollover_apply = 'ApplyFirst',
                rollover_periods = 1.337,
                start_date = {"specificTriggerDate":"2000-01-23","triggerEvent":"ContractEffective"},
                unique_token = '',
                upsell_origin_charge_number = '',
                validity_period_type = 'SUBSCRIPTION_TERM',
                commitment_level = 'RATEPLAN'
            )
        else:
            return ChargeOverride(
                product_rate_plan_charge_id = '',
        )
        """

    def testChargeOverride(self):
        """Test ChargeOverride"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
