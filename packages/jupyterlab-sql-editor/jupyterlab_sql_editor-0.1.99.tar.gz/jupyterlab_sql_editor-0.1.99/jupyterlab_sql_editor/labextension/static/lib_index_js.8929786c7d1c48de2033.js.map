{"version":3,"file":"lib_index_js.8929786c7d1c48de2033.js","mappings":"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","sources":["webpack://jupyterlab-sql-editor/./src/constants.ts","webpack://jupyterlab-sql-editor/./src/formatter.ts","webpack://jupyterlab-sql-editor/./src/index.ts","webpack://jupyterlab-sql-editor/./src/utils.ts"],"sourcesContent":["export namespace Constants {\n  export const SHORT_PLUGIN_NAME = 'jupyterlab-sql-editor';\n  export const FORMAT_COMMAND = `${SHORT_PLUGIN_NAME}:format_cell`;\n  export const FORMAT_COMMAND_DOCUMENT = `${SHORT_PLUGIN_NAME}:format_document`;\n  export const LONG_PLUGIN_NAME = `${SHORT_PLUGIN_NAME}`;\n  export const SETTINGS_SECTION = `${LONG_PLUGIN_NAME}:plugin`;\n}\n","import { Cell, CodeCell } from '@jupyterlab/cells';\nimport { INotebookTracker, Notebook } from '@jupyterlab/notebook';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { format } from 'sql-formatter';\nimport { RegExpForeignCodeExtractor } from '@jupyter-lsp/jupyterlab-lsp';\nimport { Constants } from './constants';\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { cellMagicExtractor, markerExtractor } from './utils';\nimport { ICodeMirror } from '@jupyterlab/codemirror';\nimport { KeywordCase } from 'sql-formatter';\n\nexport class SqlFormatter {\n  private formatTabWidth: number;\n  private formatUseTabs: boolean;\n  private formatKeywordCase: KeywordCase;\n\n  constructor(\n    formatTabWidth: number,\n    formatUseTabs: boolean,\n    formatKeywordCase: KeywordCase\n  ) {\n    this.formatTabWidth = formatTabWidth;\n    this.formatUseTabs = formatUseTabs;\n    this.formatKeywordCase = formatKeywordCase;\n  }\n\n  format(text: string | null): string {\n    const formatted = format(text || '', {\n      language: 'spark', // Defaults to \"sql\" (see the above list of supported dialects)\n      tabWidth: this.formatTabWidth, // Defaults to two spaces. Ignored if useTabs is true\n      useTabs: this.formatUseTabs, // Defaults to false\n      keywordCase: this.formatKeywordCase, // Defaults to false (not safe to use when SQL dialect has case-sensitive identifiers)\n      linesBetweenQueries: 2 // Defaults to 1\n    });\n    return formatted;\n  }\n}\n\nclass JupyterlabNotebookCodeFormatter {\n  private notebookTracker: INotebookTracker;\n  private working: boolean;\n  private extractors: RegExpForeignCodeExtractor[];\n  private codeMirror: ICodeMirror;\n  private sqlFormatter: SqlFormatter;\n  constructor(\n    notebookTracker: INotebookTracker,\n    codeMirror: ICodeMirror,\n    sqlFormatter: SqlFormatter\n  ) {\n    this.working = false;\n    this.notebookTracker = notebookTracker;\n    this.extractors = [];\n    this.extractors.push(cellMagicExtractor('sparksql'));\n    this.extractors.push(cellMagicExtractor('trino'));\n    this.extractors.push(markerExtractor('sparksql'));\n    this.extractors.push(markerExtractor('trino'));\n    this.codeMirror = codeMirror;\n    this.sqlFormatter = sqlFormatter;\n  }\n\n  setFormatter(sqlFormatter: SqlFormatter) {\n    this.sqlFormatter = sqlFormatter;\n  }\n\n  public async formatAction() {\n    return this.formatCells(true);\n  }\n\n  public async formatSelectedCodeCells(notebook?: Notebook) {\n    return this.formatCells(true, notebook);\n  }\n\n  private getCodeCells(selectedOnly = true, notebook?: Notebook): CodeCell[] {\n    if (!this.notebookTracker.currentWidget) {\n      return [];\n    }\n    const codeCells: CodeCell[] = [];\n    notebook = notebook || this.notebookTracker.currentWidget.content;\n    notebook.widgets.forEach((cell: Cell) => {\n      if (cell.model.type === 'code') {\n        if (!selectedOnly || notebook?.isSelectedOrActive(cell)) {\n          codeCells.push(cell as CodeCell);\n        }\n      }\n    });\n    return codeCells;\n  }\n\n  private tryReplacing(\n    cellText: string,\n    extractor: RegExpForeignCodeExtractor\n  ): string | null {\n    const extracted = extractor.extract_foreign_code(cellText);\n    if (\n      extracted &&\n      extracted.length > 0 &&\n      extracted[0].foreign_code &&\n      extracted[0].range\n    ) {\n      const sqlText = extracted[0].foreign_code;\n      const formattedSql = this.sqlFormatter.format(sqlText) + '\\n';\n      const doc = new this.codeMirror.CodeMirror.Doc(cellText, 'sql', 0, '\\n');\n      const startPos = new this.codeMirror.CodeMirror.Pos(\n        extracted[0].range.start.line,\n        extracted[0].range.start.column\n      );\n      const endPos = new this.codeMirror.CodeMirror.Pos(\n        extracted[0].range.end.line,\n        extracted[0].range.end.column\n      );\n      doc.replaceRange(formattedSql, startPos, endPos);\n      return doc.getValue();\n    }\n    return null;\n  }\n\n  private async formatCells(selectedOnly: boolean, notebook?: Notebook) {\n    if (this.working || !this.applicable()) {\n      return;\n    }\n    try {\n      this.working = true;\n      const selectedCells = this.getCodeCells(selectedOnly, notebook);\n      if (selectedCells.length > 0) {\n        const currentTexts = selectedCells.map(cell => cell.model.value.text);\n        const formattedTexts = currentTexts.map(cellText => {\n          const formatted = this.extractors\n            .map(extractor => this.tryReplacing(cellText, extractor))\n            .find(formatted => formatted);\n          return formatted || '';\n        });\n        for (let i = 0; i < selectedCells.length; ++i) {\n          const cell = selectedCells[i];\n          const currentText = currentTexts[i];\n          const formattedText = formattedTexts[i];\n          if (cell.model.value.text === currentText) {\n            cell.model.value.text = formattedText;\n          }\n        }\n      }\n    } catch (error) {\n      await showErrorMessage('Jupyterlab Code Formatter Error', error);\n    } finally {\n      this.working = false;\n    }\n  }\n\n  applicable() {\n    const selectedCells = this.getCodeCells();\n    if (selectedCells.length > 0) {\n      const currentTexts = selectedCells.map(cell => cell.model.value.text);\n      let numSqlCells = 0;\n      currentTexts.forEach(cellText => {\n        const found = this.extractors.find(extractor =>\n          extractor.has_foreign_code(cellText)\n        );\n        if (found) {\n          numSqlCells++;\n        }\n      });\n      // eslint-disable-next-line eqeqeq\n      return numSqlCells == selectedCells.length;\n    }\n    return false;\n  }\n}\n\nclass JupyterlabFileEditorCodeFormatter {\n  private editorTracker: IEditorTracker;\n  private working: boolean;\n  private sqlFormatter: SqlFormatter;\n  constructor(editorTracker: IEditorTracker, sqlFormatter: SqlFormatter) {\n    this.working = false;\n    this.editorTracker = editorTracker;\n    this.sqlFormatter = sqlFormatter;\n  }\n\n  setFormatter(sqlFormatter: SqlFormatter) {\n    this.sqlFormatter = sqlFormatter;\n  }\n\n  formatAction() {\n    if (this.working) {\n      return;\n    }\n    const editorWidget = this.editorTracker.currentWidget;\n    if (editorWidget) {\n      try {\n        this.working = true;\n        const editor = editorWidget.content.editor;\n        const code = editor?.model.value.text;\n        const formatted = this.sqlFormatter.format(code);\n        editorWidget.content.editor.model.value.text = formatted;\n      } finally {\n        this.working = false;\n      }\n    }\n  }\n}\n\nexport class JupyterLabCodeFormatter {\n  private app: JupyterFrontEnd;\n  private tracker: INotebookTracker;\n  private editorTracker: IEditorTracker;\n  private notebookCodeFormatter: JupyterlabNotebookCodeFormatter;\n  private fileEditorCodeFormatter: JupyterlabFileEditorCodeFormatter;\n  constructor(\n    app: JupyterFrontEnd,\n    tracker: INotebookTracker,\n    editorTracker: IEditorTracker,\n    codeMirror: ICodeMirror,\n    sqlFormatter: SqlFormatter\n  ) {\n    this.app = app;\n    this.tracker = tracker;\n    this.editorTracker = editorTracker;\n    this.notebookCodeFormatter = new JupyterlabNotebookCodeFormatter(\n      this.tracker,\n      codeMirror,\n      sqlFormatter\n    );\n    this.fileEditorCodeFormatter = new JupyterlabFileEditorCodeFormatter(\n      this.editorTracker,\n      sqlFormatter\n    );\n    this.setupCommands();\n    this.setupContextMenu();\n  }\n\n  setFormatter(sqlFormatter: SqlFormatter): void {\n    this.notebookCodeFormatter.setFormatter(sqlFormatter);\n    this.fileEditorCodeFormatter.setFormatter(sqlFormatter);\n  }\n\n  private setupContextMenu() {\n    this.app.contextMenu.addItem({\n      command: Constants.FORMAT_COMMAND,\n      selector: '.jp-CodeCell'\n    });\n    this.app.contextMenu.addItem({\n      command: Constants.FORMAT_COMMAND_DOCUMENT,\n      selector: '.jp-FileEditor'\n    });\n  }\n\n  private setupCommands() {\n    this.app.commands.addCommand(Constants.FORMAT_COMMAND, {\n      execute: async () => {\n        await this.notebookCodeFormatter.formatSelectedCodeCells();\n      },\n      isVisible: () => {\n        return this.notebookCodeFormatter.applicable();\n      },\n      label: 'Format SQL Cell'\n    });\n    this.app.commands.addCommand(Constants.FORMAT_COMMAND_DOCUMENT, {\n      execute: async () => {\n        await this.fileEditorCodeFormatter.formatAction();\n      },\n      label: 'Format SQL Document'\n    });\n  }\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ILSPCodeExtractorsManager } from '@jupyter-lsp/jupyterlab-lsp';\nimport { ICodeMirror } from '@jupyterlab/codemirror';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport {\n  JupyterLabCodeFormatter as SqlCodeFormatter,\n  SqlFormatter\n} from './formatter';\nimport {\n  cellMagicExtractor,\n  markerExtractor,\n  lineMagicExtractor,\n  sqlCodeMirrorModesFor\n} from './utils';\nimport { Constants } from './constants';\nimport { KeywordCase } from 'sql-formatter';\n\n/*\nResults in\n\nLINE_MAGIC_EXTRACT\n(?:^|\\n)%sparksql(?: |-c|--cache|-e|--eager|-[a-z] [0-9a-zA-Z/._]+|--[a-zA-Z]+ [0-9a-zA-Z/._]+)*([^\\n]*)\n\nCELL_MAGIC_EXTRACT\n(?:^|\\n)%%sparksql(?: |-c|--cache|-e|--eager|-[a-z] [0-9a-zA-Z/._]+|--[a-zA-Z]+ [0-9a-zA-Z/._]+)*\\n([^]*)\n*/\n\n/**\n * Code taken from https://github.com/jupyterlab/jupyterlab/blob/master/packages/codemirror/src/codemirror-ipython.ts\n * Modified to support embedded sql syntax\n */\nfunction codeMirrorWithSqlSyntaxHighlightSupport(c: ICodeMirror) {\n  /**\n   * Define an IPython codemirror mode.\n   *\n   * It is a slightly altered Python Mode with a `?` operator.\n   */\n  c.CodeMirror.defineMode(\n    'ipython',\n    (config: CodeMirror.EditorConfiguration, modeOptions?: any) => {\n      const pythonConf: any = {};\n      for (const prop in modeOptions) {\n        if (modeOptions.hasOwnProperty(prop)) {\n          pythonConf[prop] = modeOptions[prop];\n        }\n      }\n      pythonConf.name = 'python';\n      pythonConf.singleOperators = new RegExp('^[\\\\+\\\\-\\\\*/%&|@\\\\^~<>!\\\\?]');\n      pythonConf.identifiers = new RegExp(\n        '^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*'\n      );\n      //return c.CodeMirror.getMode(config, pythonConf);\n\n      // Instead of returning this mode we multiplex it with SQL\n      const pythonMode = c.CodeMirror.getMode(config, pythonConf);\n\n      // get a mode for SQL\n      const sqlMode = c.CodeMirror.getMode(config, 'sql');\n\n      // multiplex python with SQL and return it\n      const multiplexedModes = sqlCodeMirrorModesFor(\n        'sparksql',\n        sqlMode\n      ).concat(sqlCodeMirrorModesFor('trino', sqlMode));\n\n      return c.CodeMirror.multiplexingMode(pythonMode, ...multiplexedModes);\n    }\n    // Original code has a third argument. Not sure why we don't..\n    // https://github.com/jupyterlab/jupyterlab/blob/master/packages/codemirror/src/codemirror-ipython.ts\n    // ,\n    // 'python'\n  );\n\n  // The following is already done by default implementation so not redoing here\n  // c.CodeMirror.defineMIME('text/x-ipython', 'ipython');\n  // c.CodeMirror.modeInfo.push({\n  //   ext: [],\n  //   mime: 'text/x-ipython',\n  //   mode: 'ipython',\n  //   name: 'ipython'\n  // });\n}\n\n/**\n * Initialization data for the jupyterlab-sql-editor extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-sql-editor:plugin',\n  autoStart: true,\n  optional: [],\n  requires: [\n    ICodeMirror,\n    ILSPCodeExtractorsManager,\n    ISettingRegistry,\n    IEditorTracker,\n    INotebookTracker\n  ],\n  activate: (\n    app: JupyterFrontEnd,\n    codeMirror: ICodeMirror,\n    lspExtractorsMgr: ILSPCodeExtractorsManager,\n    settingRegistry: ISettingRegistry,\n    editorTracker: IEditorTracker,\n    tracker: INotebookTracker\n  ) => {\n    console.log('JupyterLab extension jupyterlab-sql-editor is activated!');\n\n    const sqlFormatter = new SqlFormatter(4, false, 'upper');\n    const sqlCodeFormatter = new SqlCodeFormatter(\n      app,\n      tracker,\n      editorTracker,\n      codeMirror,\n      sqlFormatter\n    );\n    console.log('jupyterlab-sql-editor SQL code formatter registered');\n\n    /**\n     * Load the settings for this extension\n     *\n     * @param setting Extension settings\n     */\n    function loadSetting(settings: ISettingRegistry.ISettings): void {\n      // Read the settings and convert to the correct type\n      const formatTabwidth = settings.get('formatTabWidth').composite as number;\n      const formatUseTabs = settings.get('formatUseTabs').composite as boolean;\n      const formatKeywordCase = settings.get('formatKeywordCase')\n        .composite as KeywordCase;\n      const sqlFormatter = new SqlFormatter(\n        formatTabwidth,\n        formatUseTabs,\n        formatKeywordCase\n      );\n      sqlCodeFormatter.setFormatter(sqlFormatter);\n    }\n\n    // Wait for the application to be restored and\n    // for the settings for this plugin to be loaded\n    Promise.all([\n      app.restored,\n      settingRegistry.load(Constants.SETTINGS_SECTION)\n    ])\n      .then(([, settings]) => {\n        // Read the settings\n        loadSetting(settings);\n        // Listen for your plugin setting changes using Signal\n        settings.changed.connect(loadSetting);\n      })\n      .catch(reason => {\n        console.error(\n          `Something went wrong when reading the settings.\\n${reason}`\n        );\n      });\n\n    // JupyterLab uses the CodeMirror library to syntax highlight code\n    // within the cells. Register a multiplex CodeMirror capable of\n    // highlightin SQL which is embedded in a IPython magic or within\n    // a python string (delimited by markers)\n    codeMirrorWithSqlSyntaxHighlightSupport(codeMirror);\n    console.log(\n      'jupyterlab-sql-editor code mirror for syntax highlighting registered'\n    );\n\n    // JupyterLab-LSP relies on extractors to pull the SQL out of the cell\n    // and into a virtual document which is then passed to the sql-language-server\n    // for code completion evaluation\n    lspExtractorsMgr.register(markerExtractor('sparksql'), 'python');\n    lspExtractorsMgr.register(lineMagicExtractor('sparksql'), 'python');\n    lspExtractorsMgr.register(cellMagicExtractor('sparksql'), 'python');\n    lspExtractorsMgr.register(markerExtractor('trino'), 'python');\n    lspExtractorsMgr.register(lineMagicExtractor('trino'), 'python');\n    lspExtractorsMgr.register(cellMagicExtractor('trino'), 'python');\n    console.log('jupyterlab-sql-editor LSP extractors registered');\n  }\n};\n\nexport default plugin;\n","import { RegExpForeignCodeExtractor } from '@jupyter-lsp/jupyterlab-lsp';\nimport { Mode } from 'codemirror';\nimport { ICodeMirror } from '@jupyterlab/codemirror';\n\nfunction line_magic(language: string) {\n  return `%${language}`;\n}\nfunction cell_magic(language: string) {\n  return `%%${language}`;\n}\nfunction start(language: string) {\n  return `--start-${language}`;\n}\nfunction end(language: string) {\n  return `--end-${language}`;\n}\n\n// sparksql magic accepts options in the long form\n// --dataframe df\n// or in the short form\n// -d df\n// some options do not require any values, they act more as a flag\nconst SPACE = ' ';\nconst OPTION_VALUE = '[0-9a-zA-Z\\\\._]+';\nconst SHORT_OPTS = '-[a-z]';\nconst LONG_OPTS = '--[_a-zA-Z]+';\nconst COMMANDS = `(?:${SPACE}|${SHORT_OPTS} ${OPTION_VALUE}|${LONG_OPTS} ${OPTION_VALUE}|${SHORT_OPTS}|${LONG_OPTS})*`;\nconst BEGIN = '(?:^|\\n)';\n\nexport function sqlCodeMirrorModesFor(\n  language: string,\n  sqlMode: Mode<unknown>\n) {\n  return [\n    {\n      open: `${start(language)}`,\n      close: `${end(language)}`,\n      // parseDelimiters is set to true which considers\n      // the marker as part of the SQL statement\n      // it is thus syntax highlighted as a comment\n      parseDelimiters: true,\n      mode: sqlMode\n    },\n    {\n      open: RegExp(`${line_magic(language)}${COMMANDS}`) as unknown as string,\n      close: '\\n', // Line magic: Stop at end of line (blank line)\n      parseDelimiters: false,\n      mode: sqlMode\n    },\n    {\n      open: RegExp(`${cell_magic(language)}${COMMANDS}`) as unknown as string,\n      close: '__A MARKER THAT WILL NEVER BE MATCHED__', // Cell magic: capture chars till the end of the cell\n      parseDelimiters: false,\n      mode: sqlMode\n    }\n  ];\n}\n\nexport function lineMagicExtractor(\n  language: string\n): RegExpForeignCodeExtractor {\n  return new RegExpForeignCodeExtractor({\n    language: language,\n    pattern: `${BEGIN}${line_magic(language)}${COMMANDS}([^\\n]*)`,\n    foreign_capture_groups: [1],\n    is_standalone: true,\n    file_extension: language\n  });\n}\n\nexport function cellMagicExtractor(\n  language: string\n): RegExpForeignCodeExtractor {\n  return new RegExpForeignCodeExtractor({\n    language: language,\n    pattern: `^${cell_magic(language)}.*?\\n([\\\\S\\\\s]*)`,\n    foreign_capture_groups: [1],\n    is_standalone: true,\n    file_extension: language\n  });\n}\n\nexport function markerExtractor(language: string): RegExpForeignCodeExtractor {\n  return new RegExpForeignCodeExtractor({\n    language: language,\n    pattern: `${start(language)}.*?\\n([\\\\S\\\\s]*)${end(language)}`,\n    foreign_capture_groups: [1],\n    is_standalone: true,\n    file_extension: language\n  });\n}\n\n/**\n * Register text editor based on file type.\n * @param c\n * @param language\n */\nexport function registerCodeMirrorFor(c: ICodeMirror, language: string): void {\n  c.CodeMirror.defineMode(\n    language,\n    (config: CodeMirror.EditorConfiguration, modeOptions?: any) => {\n      const mode = c.CodeMirror.getMode(config, 'sql');\n      return mode;\n    }\n  );\n  c.CodeMirror.defineMIME(`text/x-${language}`, language);\n  c.CodeMirror.modeInfo.push({\n    ext: [language],\n    mime: `text/x-${language}`,\n    mode: language,\n    name: language\n  });\n}\n"],"names":[],"sourceRoot":""}