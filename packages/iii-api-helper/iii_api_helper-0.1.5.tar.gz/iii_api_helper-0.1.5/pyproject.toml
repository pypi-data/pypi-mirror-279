[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "iii-api-helper"
dynamic = ["version"]
description = "III Common FastAPI base."
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "allen0099" },
]
classifiers = [
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Server",
    "Topic :: Utilities",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "arrow",
    "httpx",
    "python-dotenv",
    "sentry-sdk",
    "fastapi",
    "orjson",
    "uvicorn[standard]>=0.23.0,<=0.28.1",
]

[project.optional-dependencies]
database = [
    "alembic>=1.10.0",
    "sqlalchemy",
    "sqlmodel",
]

[tool.hatch.version]
path = "src/api_helper/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/api_helper"]

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
    "pytest-mock",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.coverage.run]
source_pkgs = [
    "api_helper", "tests"
]
omit = [
    "*venv*"
]

[tool.coverage.paths]
api_helper = ["src/api_helper", "*/api_helper/src/api_helper"]
tests = ["tests", "*/api_helper/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "except ImportError:",
]

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.ruff]
src = ["src"]
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
ignore = [
    "E501",
    "ANN101",
    "ANN102",
    "ANN401",
]
extend-select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "C", # flake8-comprehensions
    "E", # pycodestyle errors
    "F", # pyflakes
    "I", # isort
    "UP", # pyupgrade
    "W", # pycodestyle warnings
    "G", # flake8-logging-format
    "N", # pep8-naming
    "Q", # flake8-quotes
    "S", # flake8-bandit
    "EM", # flake8-errmsg
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "BLE", # flake8-blind-except
    "DTZ", # flake8-datetimez
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "LOG", # flake8-logging
    "PIE", # flake8-pie
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "SLOT", # flake8-slots
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**" = ["S101", "ARG001", "ARG002", "ANN002", "ANN003"]

[tool.ruff.lint.isort]
force-single-line = true
