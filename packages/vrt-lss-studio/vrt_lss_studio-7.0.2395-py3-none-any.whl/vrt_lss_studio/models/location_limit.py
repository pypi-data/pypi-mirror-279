# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 7.0.2395
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from vrt_lss_studio.models.location_cargos_limit import LocationCargosLimit
from vrt_lss_studio.models.location_transports_limit import LocationTransportsLimit
from vrt_lss_studio.models.time_window import TimeWindow
from typing import Optional, Set
from typing_extensions import Self

class LocationLimit(BaseModel):
    """
    Limitation on the capacity of a location during a certain time period. 
    """ # noqa: E501
    key: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="Constraint key, unique identifier.")
    time_window: Optional[TimeWindow]
    min_cargos: Optional[LocationCargosLimit] = None
    max_cargos: Optional[LocationCargosLimit] = None
    min_transports: Optional[LocationTransportsLimit] = None
    max_transports: Optional[LocationTransportsLimit] = None
    __properties: ClassVar[List[str]] = ["key", "time_window", "min_cargos", "max_cargos", "min_transports", "max_transports"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationLimit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_window
        if self.time_window:
            _dict['time_window'] = self.time_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_cargos
        if self.min_cargos:
            _dict['min_cargos'] = self.min_cargos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_cargos
        if self.max_cargos:
            _dict['max_cargos'] = self.max_cargos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_transports
        if self.min_transports:
            _dict['min_transports'] = self.min_transports.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_transports
        if self.max_transports:
            _dict['max_transports'] = self.max_transports.to_dict()
        # set to None if time_window (nullable) is None
        # and model_fields_set contains the field
        if self.time_window is None and "time_window" in self.model_fields_set:
            _dict['time_window'] = None

        # set to None if min_cargos (nullable) is None
        # and model_fields_set contains the field
        if self.min_cargos is None and "min_cargos" in self.model_fields_set:
            _dict['min_cargos'] = None

        # set to None if max_cargos (nullable) is None
        # and model_fields_set contains the field
        if self.max_cargos is None and "max_cargos" in self.model_fields_set:
            _dict['max_cargos'] = None

        # set to None if min_transports (nullable) is None
        # and model_fields_set contains the field
        if self.min_transports is None and "min_transports" in self.model_fields_set:
            _dict['min_transports'] = None

        # set to None if max_transports (nullable) is None
        # and model_fields_set contains the field
        if self.max_transports is None and "max_transports" in self.model_fields_set:
            _dict['max_transports'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationLimit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "time_window": TimeWindow.from_dict(obj["time_window"]) if obj.get("time_window") is not None else None,
            "min_cargos": LocationCargosLimit.from_dict(obj["min_cargos"]) if obj.get("min_cargos") is not None else None,
            "max_cargos": LocationCargosLimit.from_dict(obj["max_cargos"]) if obj.get("max_cargos") is not None else None,
            "min_transports": LocationTransportsLimit.from_dict(obj["min_transports"]) if obj.get("min_transports") is not None else None,
            "max_transports": LocationTransportsLimit.from_dict(obj["max_transports"]) if obj.get("max_transports") is not None else None
        })
        return _obj


