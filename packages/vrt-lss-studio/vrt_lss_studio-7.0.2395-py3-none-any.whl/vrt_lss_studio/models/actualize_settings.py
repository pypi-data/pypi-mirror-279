# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 7.0.2395
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from vrt_lss_studio.models.calculation_settings import CalculationSettings
from vrt_lss_studio.models.geo_settings import GeoSettings
from typing import Optional, Set
from typing_extensions import Self

class ActualizeSettings(BaseModel):
    """
    Actualize settings. 
    """ # noqa: E501
    current_time: Optional[datetime] = Field(default=None, description="Current date and time according to the [ISO 8601](https://tools.ietf.org/html/rfc3339#section-5.6). If not specified, the current time when the request was received by the server is taken. ")
    geo_settings: Optional[GeoSettings] = None
    calculation_settings: Optional[CalculationSettings] = None
    __properties: ClassVar[List[str]] = ["current_time", "geo_settings", "calculation_settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActualizeSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geo_settings
        if self.geo_settings:
            _dict['geo_settings'] = self.geo_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calculation_settings
        if self.calculation_settings:
            _dict['calculation_settings'] = self.calculation_settings.to_dict()
        # set to None if current_time (nullable) is None
        # and model_fields_set contains the field
        if self.current_time is None and "current_time" in self.model_fields_set:
            _dict['current_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActualizeSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "current_time": obj.get("current_time"),
            "geo_settings": GeoSettings.from_dict(obj["geo_settings"]) if obj.get("geo_settings") is not None else None,
            "calculation_settings": CalculationSettings.from_dict(obj["calculation_settings"]) if obj.get("calculation_settings") is not None else None
        })
        return _obj


