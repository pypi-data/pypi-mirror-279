# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import circle.web3.smart_contract_platform
from circle.web3.smart_contract_platform.models.contract_deployment_estimate_fee_response import ContractDeploymentEstimateFeeResponse  # noqa: E501
from circle.web3.smart_contract_platform.rest import ApiException

class TestContractDeploymentEstimateFeeResponse(unittest.TestCase):
    """ContractDeploymentEstimateFeeResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ContractDeploymentEstimateFeeResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ContractDeploymentEstimateFeeResponse`
        """
        model = circle.web3.smart_contract_platform.models.contract_deployment_estimate_fee_response.ContractDeploymentEstimateFeeResponse()  # noqa: E501
        if include_optional :
            return ContractDeploymentEstimateFeeResponse(
                high = circle.web3.smart_contract_platform.models.estimated_transaction_fee.EstimatedTransactionFee(
                    gas_limit = '21000', 
                    gas_price = '', 
                    max_fee = '5.935224468', 
                    priority_fee = '1.022783914', 
                    base_fee = '1.022783914', ), 
                low = circle.web3.smart_contract_platform.models.estimated_transaction_fee.EstimatedTransactionFee(
                    gas_limit = '21000', 
                    gas_price = '', 
                    max_fee = '5.935224468', 
                    priority_fee = '1.022783914', 
                    base_fee = '1.022783914', ), 
                medium = circle.web3.smart_contract_platform.models.estimated_transaction_fee.EstimatedTransactionFee(
                    gas_limit = '21000', 
                    gas_price = '', 
                    max_fee = '5.935224468', 
                    priority_fee = '1.022783914', 
                    base_fee = '1.022783914', )
            )
        else :
            return ContractDeploymentEstimateFeeResponse(
        )
        """

    def testContractDeploymentEstimateFeeResponse(self):
        """Test ContractDeploymentEstimateFeeResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
