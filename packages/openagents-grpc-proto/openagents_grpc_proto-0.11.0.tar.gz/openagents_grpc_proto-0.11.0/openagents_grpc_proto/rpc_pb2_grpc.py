# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import Job_pb2 as Job__pb2
import rpc_pb2 as rpc__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class PoolConnectorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.requestJob = channel.unary_unary(
                '/PoolConnector/requestJob',
                request_serializer=rpc__pb2.RpcRequestJob.SerializeToString,
                response_deserializer=Job__pb2.Job.FromString,
                _registered_method=True)
        self.sendJobRequest = channel.unary_unary(
                '/PoolConnector/sendJobRequest',
                request_serializer=rpc__pb2.RpcJobRequest.SerializeToString,
                response_deserializer=Job__pb2.Job.FromString,
                _registered_method=True)
        self.getJob = channel.unary_unary(
                '/PoolConnector/getJob',
                request_serializer=rpc__pb2.RpcGetJob.SerializeToString,
                response_deserializer=Job__pb2.Job.FromString,
                _registered_method=True)
        self.getPendingJobs = channel.unary_unary(
                '/PoolConnector/getPendingJobs',
                request_serializer=rpc__pb2.RpcGetPendingJobs.SerializeToString,
                response_deserializer=rpc__pb2.PendingJobs.FromString,
                _registered_method=True)
        self.isJobDone = channel.unary_unary(
                '/PoolConnector/isJobDone',
                request_serializer=rpc__pb2.RpcGetJob.SerializeToString,
                response_deserializer=rpc__pb2.RpcIsJobDone.FromString,
                _registered_method=True)
        self.acceptJob = channel.unary_unary(
                '/PoolConnector/acceptJob',
                request_serializer=rpc__pb2.RpcAcceptJob.SerializeToString,
                response_deserializer=Job__pb2.Job.FromString,
                _registered_method=True)
        self.cancelJob = channel.unary_unary(
                '/PoolConnector/cancelJob',
                request_serializer=rpc__pb2.RpcCancelJob.SerializeToString,
                response_deserializer=Job__pb2.Job.FromString,
                _registered_method=True)
        self.outputForJob = channel.unary_unary(
                '/PoolConnector/outputForJob',
                request_serializer=rpc__pb2.RpcJobOutput.SerializeToString,
                response_deserializer=Job__pb2.Job.FromString,
                _registered_method=True)
        self.completeJob = channel.unary_unary(
                '/PoolConnector/completeJob',
                request_serializer=rpc__pb2.RpcJobComplete.SerializeToString,
                response_deserializer=Job__pb2.Job.FromString,
                _registered_method=True)
        self.logForJob = channel.unary_unary(
                '/PoolConnector/logForJob',
                request_serializer=rpc__pb2.RpcJobLog.SerializeToString,
                response_deserializer=Job__pb2.Job.FromString,
                _registered_method=True)
        self.payJob = channel.unary_unary(
                '/PoolConnector/payJob',
                request_serializer=rpc__pb2.RpcPayJobRequest.SerializeToString,
                response_deserializer=Job__pb2.Job.FromString,
                _registered_method=True)
        self.requestPayment = channel.unary_unary(
                '/PoolConnector/requestPayment',
                request_serializer=rpc__pb2.RpcRequestPayment.SerializeToString,
                response_deserializer=rpc__pb2.RpcRequestPaymentResponse.FromString,
                _registered_method=True)
        self.waitForPayments = channel.unary_unary(
                '/PoolConnector/waitForPayments',
                request_serializer=rpc__pb2.RpcWaitForPaymentsRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcWaitForPaymentsResponse.FromString,
                _registered_method=True)
        self.announceNode = channel.unary_unary(
                '/PoolConnector/announceNode',
                request_serializer=rpc__pb2.RpcAnnounceNodeRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcAnnounceNodeResponse.FromString,
                _registered_method=True)
        self.announceEventTemplate = channel.unary_unary(
                '/PoolConnector/announceEventTemplate',
                request_serializer=rpc__pb2.RpcAnnounceTemplateRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcAnnounceTemplateResponse.FromString,
                _registered_method=True)
        self.discoverPools = channel.unary_unary(
                '/PoolConnector/discoverPools',
                request_serializer=rpc__pb2.RpcDiscoverPoolsRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiscoverPoolsResponse.FromString,
                _registered_method=True)
        self.discoverNodes = channel.unary_unary(
                '/PoolConnector/discoverNodes',
                request_serializer=rpc__pb2.RpcDiscoverNodesRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiscoverNodesResponse.FromString,
                _registered_method=True)
        self.discoverActions = channel.unary_unary(
                '/PoolConnector/discoverActions',
                request_serializer=rpc__pb2.RpcDiscoverActionsRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiscoverActionsResponse.FromString,
                _registered_method=True)
        self.discoverNearbyNodes = channel.unary_unary(
                '/PoolConnector/discoverNearbyNodes',
                request_serializer=rpc__pb2.RpcDiscoverNearbyNodesRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiscoverNearbyNodesResponse.FromString,
                _registered_method=True)
        self.discoverNearbyActions = channel.unary_unary(
                '/PoolConnector/discoverNearbyActions',
                request_serializer=rpc__pb2.RpcDiscoverNearbyActionsRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiscoverNearbyActionsResponse.FromString,
                _registered_method=True)
        self.sendSignedEvent = channel.unary_unary(
                '/PoolConnector/sendSignedEvent',
                request_serializer=rpc__pb2.RpcSendSignedEventRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcSendSignedEventResponse.FromString,
                _registered_method=True)
        self.subscribeToEvents = channel.unary_unary(
                '/PoolConnector/subscribeToEvents',
                request_serializer=rpc__pb2.RpcSubscribeToEventsRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcSubscribeToEventsResponse.FromString,
                _registered_method=True)
        self.unsubscribeFromEvents = channel.unary_unary(
                '/PoolConnector/unsubscribeFromEvents',
                request_serializer=rpc__pb2.RpcUnsubscribeFromEventsRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcUnsubscribeFromEventsResponse.FromString,
                _registered_method=True)
        self.getEvents = channel.unary_unary(
                '/PoolConnector/getEvents',
                request_serializer=rpc__pb2.RpcGetEventsRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcGetEventsResponse.FromString,
                _registered_method=True)
        self.createDisk = channel.unary_unary(
                '/PoolConnector/createDisk',
                request_serializer=rpc__pb2.RpcCreateDiskRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcCreateDiskResponse.FromString,
                _registered_method=True)
        self.openDisk = channel.unary_unary(
                '/PoolConnector/openDisk',
                request_serializer=rpc__pb2.RpcOpenDiskRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcOpenDiskResponse.FromString,
                _registered_method=True)
        self.closeDisk = channel.unary_unary(
                '/PoolConnector/closeDisk',
                request_serializer=rpc__pb2.RpcCloseDiskRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcCloseDiskResponse.FromString,
                _registered_method=True)
        self.diskDeleteFile = channel.unary_unary(
                '/PoolConnector/diskDeleteFile',
                request_serializer=rpc__pb2.RpcDiskDeleteFileRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiskDeleteFileResponse.FromString,
                _registered_method=True)
        self.diskListFiles = channel.unary_unary(
                '/PoolConnector/diskListFiles',
                request_serializer=rpc__pb2.RpcDiskListFilesRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiskListFilesResponse.FromString,
                _registered_method=True)
        self.diskReadFile = channel.unary_stream(
                '/PoolConnector/diskReadFile',
                request_serializer=rpc__pb2.RpcDiskReadFileRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiskReadFileResponse.FromString,
                _registered_method=True)
        self.diskReadSmallFile = channel.unary_unary(
                '/PoolConnector/diskReadSmallFile',
                request_serializer=rpc__pb2.RpcDiskReadFileRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiskReadFileResponse.FromString,
                _registered_method=True)
        self.diskWriteFile = channel.stream_unary(
                '/PoolConnector/diskWriteFile',
                request_serializer=rpc__pb2.RpcDiskWriteFileRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiskWriteFileResponse.FromString,
                _registered_method=True)
        self.diskWriteSmallFile = channel.unary_unary(
                '/PoolConnector/diskWriteSmallFile',
                request_serializer=rpc__pb2.RpcDiskWriteFileRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcDiskWriteFileResponse.FromString,
                _registered_method=True)
        self.cacheSet = channel.stream_unary(
                '/PoolConnector/cacheSet',
                request_serializer=rpc__pb2.RpcCacheSetRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcCacheSetResponse.FromString,
                _registered_method=True)
        self.cacheGet = channel.unary_stream(
                '/PoolConnector/cacheGet',
                request_serializer=rpc__pb2.RpcCacheGetRequest.SerializeToString,
                response_deserializer=rpc__pb2.RpcCacheGetResponse.FromString,
                _registered_method=True)


class PoolConnectorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def requestJob(self, request, context):
        """job management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendJobRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPendingJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isJobDone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def acceptJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancelJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def outputForJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def completeJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logForJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def payJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestPayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def waitForPayments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def announceNode(self, request, context):
        """discovery
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def announceEventTemplate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def discoverPools(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def discoverNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def discoverActions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def discoverNearbyNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def discoverNearbyActions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendSignedEvent(self, request, context):
        """generic nostr events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeToEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unsubscribeFromEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createDisk(self, request, context):
        """blob storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openDisk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeDisk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def diskDeleteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def diskListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def diskReadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def diskReadSmallFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def diskWriteFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def diskWriteSmallFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cacheSet(self, request_iterator, context):
        """cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cacheGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PoolConnectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'requestJob': grpc.unary_unary_rpc_method_handler(
                    servicer.requestJob,
                    request_deserializer=rpc__pb2.RpcRequestJob.FromString,
                    response_serializer=Job__pb2.Job.SerializeToString,
            ),
            'sendJobRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.sendJobRequest,
                    request_deserializer=rpc__pb2.RpcJobRequest.FromString,
                    response_serializer=Job__pb2.Job.SerializeToString,
            ),
            'getJob': grpc.unary_unary_rpc_method_handler(
                    servicer.getJob,
                    request_deserializer=rpc__pb2.RpcGetJob.FromString,
                    response_serializer=Job__pb2.Job.SerializeToString,
            ),
            'getPendingJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPendingJobs,
                    request_deserializer=rpc__pb2.RpcGetPendingJobs.FromString,
                    response_serializer=rpc__pb2.PendingJobs.SerializeToString,
            ),
            'isJobDone': grpc.unary_unary_rpc_method_handler(
                    servicer.isJobDone,
                    request_deserializer=rpc__pb2.RpcGetJob.FromString,
                    response_serializer=rpc__pb2.RpcIsJobDone.SerializeToString,
            ),
            'acceptJob': grpc.unary_unary_rpc_method_handler(
                    servicer.acceptJob,
                    request_deserializer=rpc__pb2.RpcAcceptJob.FromString,
                    response_serializer=Job__pb2.Job.SerializeToString,
            ),
            'cancelJob': grpc.unary_unary_rpc_method_handler(
                    servicer.cancelJob,
                    request_deserializer=rpc__pb2.RpcCancelJob.FromString,
                    response_serializer=Job__pb2.Job.SerializeToString,
            ),
            'outputForJob': grpc.unary_unary_rpc_method_handler(
                    servicer.outputForJob,
                    request_deserializer=rpc__pb2.RpcJobOutput.FromString,
                    response_serializer=Job__pb2.Job.SerializeToString,
            ),
            'completeJob': grpc.unary_unary_rpc_method_handler(
                    servicer.completeJob,
                    request_deserializer=rpc__pb2.RpcJobComplete.FromString,
                    response_serializer=Job__pb2.Job.SerializeToString,
            ),
            'logForJob': grpc.unary_unary_rpc_method_handler(
                    servicer.logForJob,
                    request_deserializer=rpc__pb2.RpcJobLog.FromString,
                    response_serializer=Job__pb2.Job.SerializeToString,
            ),
            'payJob': grpc.unary_unary_rpc_method_handler(
                    servicer.payJob,
                    request_deserializer=rpc__pb2.RpcPayJobRequest.FromString,
                    response_serializer=Job__pb2.Job.SerializeToString,
            ),
            'requestPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.requestPayment,
                    request_deserializer=rpc__pb2.RpcRequestPayment.FromString,
                    response_serializer=rpc__pb2.RpcRequestPaymentResponse.SerializeToString,
            ),
            'waitForPayments': grpc.unary_unary_rpc_method_handler(
                    servicer.waitForPayments,
                    request_deserializer=rpc__pb2.RpcWaitForPaymentsRequest.FromString,
                    response_serializer=rpc__pb2.RpcWaitForPaymentsResponse.SerializeToString,
            ),
            'announceNode': grpc.unary_unary_rpc_method_handler(
                    servicer.announceNode,
                    request_deserializer=rpc__pb2.RpcAnnounceNodeRequest.FromString,
                    response_serializer=rpc__pb2.RpcAnnounceNodeResponse.SerializeToString,
            ),
            'announceEventTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.announceEventTemplate,
                    request_deserializer=rpc__pb2.RpcAnnounceTemplateRequest.FromString,
                    response_serializer=rpc__pb2.RpcAnnounceTemplateResponse.SerializeToString,
            ),
            'discoverPools': grpc.unary_unary_rpc_method_handler(
                    servicer.discoverPools,
                    request_deserializer=rpc__pb2.RpcDiscoverPoolsRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiscoverPoolsResponse.SerializeToString,
            ),
            'discoverNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.discoverNodes,
                    request_deserializer=rpc__pb2.RpcDiscoverNodesRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiscoverNodesResponse.SerializeToString,
            ),
            'discoverActions': grpc.unary_unary_rpc_method_handler(
                    servicer.discoverActions,
                    request_deserializer=rpc__pb2.RpcDiscoverActionsRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiscoverActionsResponse.SerializeToString,
            ),
            'discoverNearbyNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.discoverNearbyNodes,
                    request_deserializer=rpc__pb2.RpcDiscoverNearbyNodesRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiscoverNearbyNodesResponse.SerializeToString,
            ),
            'discoverNearbyActions': grpc.unary_unary_rpc_method_handler(
                    servicer.discoverNearbyActions,
                    request_deserializer=rpc__pb2.RpcDiscoverNearbyActionsRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiscoverNearbyActionsResponse.SerializeToString,
            ),
            'sendSignedEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.sendSignedEvent,
                    request_deserializer=rpc__pb2.RpcSendSignedEventRequest.FromString,
                    response_serializer=rpc__pb2.RpcSendSignedEventResponse.SerializeToString,
            ),
            'subscribeToEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeToEvents,
                    request_deserializer=rpc__pb2.RpcSubscribeToEventsRequest.FromString,
                    response_serializer=rpc__pb2.RpcSubscribeToEventsResponse.SerializeToString,
            ),
            'unsubscribeFromEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.unsubscribeFromEvents,
                    request_deserializer=rpc__pb2.RpcUnsubscribeFromEventsRequest.FromString,
                    response_serializer=rpc__pb2.RpcUnsubscribeFromEventsResponse.SerializeToString,
            ),
            'getEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.getEvents,
                    request_deserializer=rpc__pb2.RpcGetEventsRequest.FromString,
                    response_serializer=rpc__pb2.RpcGetEventsResponse.SerializeToString,
            ),
            'createDisk': grpc.unary_unary_rpc_method_handler(
                    servicer.createDisk,
                    request_deserializer=rpc__pb2.RpcCreateDiskRequest.FromString,
                    response_serializer=rpc__pb2.RpcCreateDiskResponse.SerializeToString,
            ),
            'openDisk': grpc.unary_unary_rpc_method_handler(
                    servicer.openDisk,
                    request_deserializer=rpc__pb2.RpcOpenDiskRequest.FromString,
                    response_serializer=rpc__pb2.RpcOpenDiskResponse.SerializeToString,
            ),
            'closeDisk': grpc.unary_unary_rpc_method_handler(
                    servicer.closeDisk,
                    request_deserializer=rpc__pb2.RpcCloseDiskRequest.FromString,
                    response_serializer=rpc__pb2.RpcCloseDiskResponse.SerializeToString,
            ),
            'diskDeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.diskDeleteFile,
                    request_deserializer=rpc__pb2.RpcDiskDeleteFileRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiskDeleteFileResponse.SerializeToString,
            ),
            'diskListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.diskListFiles,
                    request_deserializer=rpc__pb2.RpcDiskListFilesRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiskListFilesResponse.SerializeToString,
            ),
            'diskReadFile': grpc.unary_stream_rpc_method_handler(
                    servicer.diskReadFile,
                    request_deserializer=rpc__pb2.RpcDiskReadFileRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiskReadFileResponse.SerializeToString,
            ),
            'diskReadSmallFile': grpc.unary_unary_rpc_method_handler(
                    servicer.diskReadSmallFile,
                    request_deserializer=rpc__pb2.RpcDiskReadFileRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiskReadFileResponse.SerializeToString,
            ),
            'diskWriteFile': grpc.stream_unary_rpc_method_handler(
                    servicer.diskWriteFile,
                    request_deserializer=rpc__pb2.RpcDiskWriteFileRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiskWriteFileResponse.SerializeToString,
            ),
            'diskWriteSmallFile': grpc.unary_unary_rpc_method_handler(
                    servicer.diskWriteSmallFile,
                    request_deserializer=rpc__pb2.RpcDiskWriteFileRequest.FromString,
                    response_serializer=rpc__pb2.RpcDiskWriteFileResponse.SerializeToString,
            ),
            'cacheSet': grpc.stream_unary_rpc_method_handler(
                    servicer.cacheSet,
                    request_deserializer=rpc__pb2.RpcCacheSetRequest.FromString,
                    response_serializer=rpc__pb2.RpcCacheSetResponse.SerializeToString,
            ),
            'cacheGet': grpc.unary_stream_rpc_method_handler(
                    servicer.cacheGet,
                    request_deserializer=rpc__pb2.RpcCacheGetRequest.FromString,
                    response_serializer=rpc__pb2.RpcCacheGetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PoolConnector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('PoolConnector', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PoolConnector(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def requestJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/requestJob',
            rpc__pb2.RpcRequestJob.SerializeToString,
            Job__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sendJobRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/sendJobRequest',
            rpc__pb2.RpcJobRequest.SerializeToString,
            Job__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/getJob',
            rpc__pb2.RpcGetJob.SerializeToString,
            Job__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getPendingJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/getPendingJobs',
            rpc__pb2.RpcGetPendingJobs.SerializeToString,
            rpc__pb2.PendingJobs.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isJobDone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/isJobDone',
            rpc__pb2.RpcGetJob.SerializeToString,
            rpc__pb2.RpcIsJobDone.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def acceptJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/acceptJob',
            rpc__pb2.RpcAcceptJob.SerializeToString,
            Job__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cancelJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/cancelJob',
            rpc__pb2.RpcCancelJob.SerializeToString,
            Job__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def outputForJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/outputForJob',
            rpc__pb2.RpcJobOutput.SerializeToString,
            Job__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def completeJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/completeJob',
            rpc__pb2.RpcJobComplete.SerializeToString,
            Job__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logForJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/logForJob',
            rpc__pb2.RpcJobLog.SerializeToString,
            Job__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def payJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/payJob',
            rpc__pb2.RpcPayJobRequest.SerializeToString,
            Job__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def requestPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/requestPayment',
            rpc__pb2.RpcRequestPayment.SerializeToString,
            rpc__pb2.RpcRequestPaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def waitForPayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/waitForPayments',
            rpc__pb2.RpcWaitForPaymentsRequest.SerializeToString,
            rpc__pb2.RpcWaitForPaymentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def announceNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/announceNode',
            rpc__pb2.RpcAnnounceNodeRequest.SerializeToString,
            rpc__pb2.RpcAnnounceNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def announceEventTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/announceEventTemplate',
            rpc__pb2.RpcAnnounceTemplateRequest.SerializeToString,
            rpc__pb2.RpcAnnounceTemplateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def discoverPools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/discoverPools',
            rpc__pb2.RpcDiscoverPoolsRequest.SerializeToString,
            rpc__pb2.RpcDiscoverPoolsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def discoverNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/discoverNodes',
            rpc__pb2.RpcDiscoverNodesRequest.SerializeToString,
            rpc__pb2.RpcDiscoverNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def discoverActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/discoverActions',
            rpc__pb2.RpcDiscoverActionsRequest.SerializeToString,
            rpc__pb2.RpcDiscoverActionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def discoverNearbyNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/discoverNearbyNodes',
            rpc__pb2.RpcDiscoverNearbyNodesRequest.SerializeToString,
            rpc__pb2.RpcDiscoverNearbyNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def discoverNearbyActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/discoverNearbyActions',
            rpc__pb2.RpcDiscoverNearbyActionsRequest.SerializeToString,
            rpc__pb2.RpcDiscoverNearbyActionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sendSignedEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/sendSignedEvent',
            rpc__pb2.RpcSendSignedEventRequest.SerializeToString,
            rpc__pb2.RpcSendSignedEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def subscribeToEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/subscribeToEvents',
            rpc__pb2.RpcSubscribeToEventsRequest.SerializeToString,
            rpc__pb2.RpcSubscribeToEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unsubscribeFromEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/unsubscribeFromEvents',
            rpc__pb2.RpcUnsubscribeFromEventsRequest.SerializeToString,
            rpc__pb2.RpcUnsubscribeFromEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/getEvents',
            rpc__pb2.RpcGetEventsRequest.SerializeToString,
            rpc__pb2.RpcGetEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createDisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/createDisk',
            rpc__pb2.RpcCreateDiskRequest.SerializeToString,
            rpc__pb2.RpcCreateDiskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def openDisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/openDisk',
            rpc__pb2.RpcOpenDiskRequest.SerializeToString,
            rpc__pb2.RpcOpenDiskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def closeDisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/closeDisk',
            rpc__pb2.RpcCloseDiskRequest.SerializeToString,
            rpc__pb2.RpcCloseDiskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def diskDeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/diskDeleteFile',
            rpc__pb2.RpcDiskDeleteFileRequest.SerializeToString,
            rpc__pb2.RpcDiskDeleteFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def diskListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/diskListFiles',
            rpc__pb2.RpcDiskListFilesRequest.SerializeToString,
            rpc__pb2.RpcDiskListFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def diskReadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/PoolConnector/diskReadFile',
            rpc__pb2.RpcDiskReadFileRequest.SerializeToString,
            rpc__pb2.RpcDiskReadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def diskReadSmallFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/diskReadSmallFile',
            rpc__pb2.RpcDiskReadFileRequest.SerializeToString,
            rpc__pb2.RpcDiskReadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def diskWriteFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/PoolConnector/diskWriteFile',
            rpc__pb2.RpcDiskWriteFileRequest.SerializeToString,
            rpc__pb2.RpcDiskWriteFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def diskWriteSmallFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PoolConnector/diskWriteSmallFile',
            rpc__pb2.RpcDiskWriteFileRequest.SerializeToString,
            rpc__pb2.RpcDiskWriteFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cacheSet(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/PoolConnector/cacheSet',
            rpc__pb2.RpcCacheSetRequest.SerializeToString,
            rpc__pb2.RpcCacheSetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cacheGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/PoolConnector/cacheGet',
            rpc__pb2.RpcCacheGetRequest.SerializeToString,
            rpc__pb2.RpcCacheGetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
